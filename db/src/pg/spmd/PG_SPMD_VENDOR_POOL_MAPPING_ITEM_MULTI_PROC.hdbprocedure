/* Vendor pool별 Item 매핑처리 */
PROCEDURE PG_SPMD_VENDOR_POOL_MAPPING_ITEM_MULTI_PROC (
        IN I_TABLE TABLE(   TENANT_ID NVARCHAR(5), 
							COMPANY_CODE NVARCHAR(10), 
							ORG_TYPE_CODE NVARCHAR(30), 
							ORG_CODE NVARCHAR(10), 
							SPMD_CATEGORY_CODE NVARCHAR(4),
							SPMD_CHARACTER_CODE NVARCHAR(4),
							SPMD_CHARACTER_SERIAL_NO BIGINT,
							VENDOR_POOL_CODE NVARCHAR(20),
							UPDATE_USER_ID NVARCHAR(500)
        ),
        OUT O_RTN_MESG NVARCHAR(4000)
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
AS
BEGIN
	DECLARE V_SQL_EXEC_STR NVARCHAR(4000);
	DECLARE V_ROWCNT BIGINT;

    /* Mapping대상 Item 조회(다건 array로 등록됨.) */
    DECLARE CURSOR curItemList FOR
        SELECT 
            ITEM.TENANT_ID
            , ITEM.COMPANY_CODE
            , ITEM.ORG_TYPE_CODE
            , ITEM.ORG_CODE
            , ITEM.SPMD_CATEGORY_CODE
            , ITEM.SPMD_CHARACTER_CODE
            , ITEM.SPMD_CHARACTER_SERIAL_NO
            , LPAD(TO_CHAR(ITEM.SPMD_CHARACTER_SERIAL_NO), 3, '0') AS ATTR_COL_NO
            , ITEM.VENDOR_POOL_CODE
            , ITEM.UPDATE_USER_ID
            , VVPM.VENDOR_POOL_LOCAL_NAME
        FROM :I_TABLE ITEM
        JOIN PG_VP_VENDOR_POOL_MST VVPM ON (
                VVPM.TENANT_ID = ITEM.TENANT_ID
                AND VVPM.COMPANY_CODE = ITEM.COMPANY_CODE
                AND VVPM.ORG_TYPE_CODE = ITEM.ORG_TYPE_CODE
                AND VVPM.ORG_CODE = ITEM.ORG_CODE
                AND VVPM.VENDOR_POOL_CODE = ITEM.VENDOR_POOL_CODE
        )
        ;
	
	/* SQL Error 처리 */
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
        O_RTN_MESG := ::SQL_ERROR_CODE||'-'||::SQL_ERROR_MESSAGE;
		--SELECT ::SQL_ERROR_CODE||'-'||::SQL_ERROR_MESSAGE INTO O_RTN_MESG FROM DUMMY;
	END;



    /* 커서 시작 */
	FOR curItem AS curItemList
    DO
    
        /* Mapping Table 초기화 */
        IF curItemList::rowcount = 1 THEN
            DELETE FROM PG_MD_VP_ITEM_MAPPING VIM
            WHERE VIM.TENANT_ID = curItem.TENANT_ID
            AND VIM.COMPANY_CODE = curItem.COMPANY_CODE
            AND VIM.ORG_TYPE_CODE = curItem.ORG_TYPE_CODE
            AND VIM.ORG_CODE = curItem.ORG_CODE
            AND VIM.VENDOR_POOL_CODE = curItem.VENDOR_POOL_CODE
            ;
            
            DELETE FROM PG_MD_VP_ITEM_MAPPING_ATTR VIMA
            WHERE VIMA.TENANT_ID = curItem.TENANT_ID
            AND VIMA.COMPANY_CODE = curItem.COMPANY_CODE
            AND VIMA.ORG_TYPE_CODE = curItem.ORG_TYPE_CODE
            AND VIMA.ORG_CODE = curItem.ORG_CODE
            AND VIMA.VENDOR_POOL_CODE = curItem.VENDOR_POOL_CODE
            ;
        END IF;

        SELECT 
            COUNT(*) 
            INTO V_ROWCNT 
        FROM PG_MD_VP_ITEM_MAPPING VIM
        WHERE VIM.TENANT_ID = curItem.TENANT_ID
        AND VIM.COMPANY_CODE = curItem.COMPANY_CODE
        AND VIM.ORG_TYPE_CODE = curItem.ORG_TYPE_CODE
        AND VIM.ORG_CODE = curItem.ORG_CODE
        AND VIM.VENDOR_POOL_CODE = curItem.VENDOR_POOL_CODE
        ;
        
        -- PG_MD_VP_ITEM_MAPPING 테이블에 정의된 SPMD_ATTR_??? 컬럼을 처리하기 위해 Dynamic SQL로 처리해야함. 
        IF (V_ROWCNT = 0) THEN
            
            V_SQL_EXEC_STR := 'INSERT INTO PG_MD_VP_ITEM_MAPPING (';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	TENANT_ID'; 
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, COMPANY_CODE';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, ORG_TYPE_CODE';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, ORG_CODE';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, VENDOR_POOL_CODE';

            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, VENDOR_POOL_LOCAL_NAME';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, CONFIRMED_STATUS_CODE';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, SPMD_ATTR_'||curItem.ATTR_COL_NO ;
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, LOCAL_CREATE_DTM';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, LOCAL_UPDATE_DTM';

            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, CREATE_USER_ID';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, UPDATE_USER_ID';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, SYSTEM_CREATE_DTM';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, SYSTEM_UPDATE_DTM';

            V_SQL_EXEC_STR := V_SQL_EXEC_STR||') VALUES (';

            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	'''||curItem.TENANT_ID||''' ';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, '''||curItem.COMPANY_CODE||''' ';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, '''||curItem.ORG_TYPE_CODE||''' ';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, '''||curItem.ORG_CODE||''' ';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, '''||curItem.VENDOR_POOL_CODE||''' ';

            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, '''||curItem.VENDOR_POOL_LOCAL_NAME||''' ';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, ''200'' '; 	-- 100:신규(최초), 200:저장, 300:확정(품위결제)
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, ''Y'' ';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, CURRENT_TIMESTAMP';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, CURRENT_TIMESTAMP';

            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, '''||curItem.UPDATE_USER_ID||''' ';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, '''||curItem.UPDATE_USER_ID||''' ';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, CURRENT_TIMESTAMP';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, CURRENT_TIMESTAMP';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||')';

        ELSE

            V_SQL_EXEC_STR := 'UPDATE PG_MD_VP_ITEM_MAPPING VIM SET';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'		VIM.CONFIRMED_STATUS_CODE = ''200'' ';	-- 100:신규(최초), 200:저장, 300:확정(품위결제)
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'		, VIM.SPMD_ATTR_'||curItem.ATTR_COL_NO||' = ''Y'' ';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'		, VIM.LOCAL_UPDATE_DTM = CURRENT_TIMESTAMP ';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'		, VIM.UPDATE_USER_ID = '''||curItem.UPDATE_USER_ID||''' ';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'		, VIM.SYSTEM_UPDATE_DTM = CURRENT_TIMESTAMP ';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'WHERE VIM.TENANT_ID = '''||curItem.TENANT_ID||''' ';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'AND VIM.COMPANY_CODE = '''||curItem.COMPANY_CODE||''' ';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'AND VIM.ORG_TYPE_CODE = '''||curItem.ORG_TYPE_CODE||''' ';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'AND VIM.ORG_CODE = '''||curItem.ORG_CODE||''' ';
            V_SQL_EXEC_STR := V_SQL_EXEC_STR||'AND VIM.VENDOR_POOL_CODE = '''||curItem.VENDOR_POOL_CODE||''' ';
            
        END IF;
                
        -- Log 확인
        -- CALL LOG_PROC( :V_SQL_EXEC_STR );

        EXEC V_SQL_EXEC_STR;

        /* MAPPING ATTR 등록 */
        INSERT INTO PG_MD_VP_ITEM_MAPPING_ATTR (
            TENANT_ID 
            , COMPANY_CODE
            , ORG_TYPE_CODE
            , ORG_CODE
            , VENDOR_POOL_CODE
            , SPMD_CATEGORY_CODE
            , SPMD_CHARACTER_CODE
            , SPMD_CHARACTER_SERIAL_NO

            , LOCAL_CREATE_DTM
            , LOCAL_UPDATE_DTM
            , CREATE_USER_ID
            , UPDATE_USER_ID
            , SYSTEM_CREATE_DTM
            , SYSTEM_UPDATE_DTM
        ) VALUES (
            curItem.TENANT_ID
            , curItem.COMPANY_CODE
            , curItem.ORG_TYPE_CODE
            , curItem.ORG_CODE
            , curItem.VENDOR_POOL_CODE
            , curItem.SPMD_CATEGORY_CODE
            , curItem.SPMD_CHARACTER_CODE
            , curItem.SPMD_CHARACTER_SERIAL_NO

            , CURRENT_TIMESTAMP
            , CURRENT_TIMESTAMP
            , curItem.UPDATE_USER_ID
            , curItem.UPDATE_USER_ID
            , CURRENT_TIMESTAMP
            , CURRENT_TIMESTAMP
        );

    END FOR;

	COMMIT;
	O_RTN_MESG := '0000-SUCCESS';
END;