/* Vendor pool별 Item 매핑처리 */
PROCEDURE PG_SPMD_VENDOR_POOL_MAPPING_ITEM_PROC (
								IN I_TENANT_ID NVARCHAR(5), 
								IN I_COMPANY_CODE NVARCHAR(10), 
								IN I_ORG_TYPE_CODE NVARCHAR(30), 
								IN I_ORG_CODE NVARCHAR(10), 
								IN I_SPMD_CATEGORY_CODE NVARCHAR(4),
								IN I_SPMD_CHARACTER_CODE NVARCHAR(4),
								IN I_SPMD_CHARACTER_SERIAL_NO BIGINT,
								IN I_VENDOR_POOL_CODE NVARCHAR(20),
								IN I_UPDATE_USER_ID NVARCHAR(500),

								OUT O_RTN_MESG NVARCHAR(4000)
							)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
AS
BEGIN
	DECLARE V_VENDOR_POOL_LOCAL_NAME VARCHAR(240);
	DECLARE V_ATTR_COL_NO NVARCHAR(3);
	DECLARE V_SQL_EXEC_STR NVARCHAR(4000);
	DECLARE V_ROWCNT BIGINT;
	
	/* SQL Error 처리 */
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
        O_RTN_MESG := ::SQL_ERROR_CODE||'-'||::SQL_ERROR_MESSAGE;
		--SELECT ::SQL_ERROR_CODE||'-'||::SQL_ERROR_MESSAGE INTO O_RTN_MESG FROM DUMMY;
	END;
	
	SELECT 
		VVPM.VENDOR_POOL_LOCAL_NAME
		, LPAD(TO_CHAR(:I_SPMD_CHARACTER_SERIAL_NO), 3, '0') 
		INTO V_VENDOR_POOL_LOCAL_NAME, V_ATTR_COL_NO
	FROM PG_VP_VENDOR_POOL_MST VVPM
	WHERE VVPM.TENANT_ID = :I_TENANT_ID
	AND VVPM.COMPANY_CODE = :I_COMPANY_CODE
	AND VVPM.ORG_TYPE_CODE = :I_ORG_TYPE_CODE
	AND VVPM.ORG_CODE = :I_ORG_CODE
	AND VVPM.VENDOR_POOL_CODE = :I_VENDOR_POOL_CODE
	;

	/*
	-- PG_MD_VP_ITEM_MAPPING 테이블에 정의된 SPMD_ATTR_??? 컬럼을 처리하기 위해 Dynamic SQL로 처리해야함. 
	MERGE INTO
			PG_MD_VP_ITEM_MAPPING AS VIM
		USING DUMMY
		ON ( 
			VIM.TENANT_ID = :I_TENANT_ID
			AND VIM.COMPANY_CODE = :I_COMPANY_CODE
			AND VIM.ORG_TYPE_CODE = :I_ORG_TYPE_CODE
			AND VIM.ORG_CODE = :I_ORG_CODE
			AND VIM.VENDOR_POOL_CODE = :I_VENDOR_POOL_CODE
		)
	WHEN MATCHED THEN
		UPDATE SET 
			VIM.CONFIRMED_STATUS_CODE = '777'	-- 100:신규, 999:확정
			, VIM.SPMD_ATTR_001 = 'Y'
			, VIM.LOCAL_UPDATE_DTM = CURRENT_TIMESTAMP
			, VIM.UPDATE_USER_ID = :I_UPDATE_USER_ID
			, VIM.SYSTEM_UPDATE_DTM = CURRENT_TIMESTAMP
	WHEN NOT MATCHED THEN
		INSERT (
			TENANT_ID 
			, COMPANY_CODE
			, ORG_TYPE_CODE
			, ORG_CODE
			, VENDOR_POOL_CODE 
			
			, VENDOR_POOL_LOCAL_NAME
			, CONFIRMED_STATUS_CODE
			, SPMD_ATTR_001
			, LOCAL_CREATE_DTM
			, LOCAL_UPDATE_DTM
			, CREATE_USER_ID
			, UPDATE_USER_ID
			, SYSTEM_CREATE_DTM
			, SYSTEM_UPDATE_DTM
		) VALUES (
			:I_TENANT_ID
			, :I_COMPANY_CODE
			, :I_ORG_TYPE_CODE
			, :I_ORG_CODE
			, :I_VENDOR_POOL_CODE
			
			, :V_VENDOR_POOL_LOCAL_NAME
			, '000'
			, 'Y'
			, CURRENT_TIMESTAMP
			, CURRENT_TIMESTAMP
			, :I_UPDATE_USER_ID
			, :I_UPDATE_USER_ID
			, CURRENT_TIMESTAMP
			, CURRENT_TIMESTAMP
		)
	;
	*/
	SELECT 
		COUNT(*) 
		INTO V_ROWCNT 
	FROM PG_MD_VP_ITEM_MAPPING VIM
	WHERE VIM.TENANT_ID = :I_TENANT_ID
	AND VIM.COMPANY_CODE = :I_COMPANY_CODE
	AND VIM.ORG_TYPE_CODE = :I_ORG_TYPE_CODE
	AND VIM.ORG_CODE = :I_ORG_CODE
	AND VIM.VENDOR_POOL_CODE = :I_VENDOR_POOL_CODE
	;
	
	IF (V_ROWCNT = 0) THEN
		
		V_SQL_EXEC_STR := 'INSERT INTO PG_MD_VP_ITEM_MAPPING (';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	TENANT_ID'; 
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, COMPANY_CODE';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, ORG_TYPE_CODE';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, ORG_CODE';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, VENDOR_POOL_CODE';

		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, VENDOR_POOL_LOCAL_NAME';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, CONFIRMED_STATUS_CODE';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, SPMD_ATTR_'||:V_ATTR_COL_NO ;
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, LOCAL_CREATE_DTM';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, LOCAL_UPDATE_DTM';

		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, CREATE_USER_ID';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, UPDATE_USER_ID';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, SYSTEM_CREATE_DTM';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, SYSTEM_UPDATE_DTM';

		V_SQL_EXEC_STR := V_SQL_EXEC_STR||') VALUES (';

		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	'''||:I_TENANT_ID||''' ';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, '''||:I_COMPANY_CODE||''' ';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, '''||:I_ORG_TYPE_CODE||''' ';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, '''||:I_ORG_CODE||''' ';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, '''||:I_VENDOR_POOL_CODE||''' ';

		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, '''||:V_VENDOR_POOL_LOCAL_NAME||''' ';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, ''000'' '; 
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, ''Y'' ';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, CURRENT_TIMESTAMP';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, CURRENT_TIMESTAMP';

		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, '''||:I_UPDATE_USER_ID||''' ';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, '''||:I_UPDATE_USER_ID||''' ';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, CURRENT_TIMESTAMP';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'	, CURRENT_TIMESTAMP';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||')';

	ELSE

		V_SQL_EXEC_STR := 'UPDATE PG_MD_VP_ITEM_MAPPING VIM SET';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'		VIM.CONFIRMED_STATUS_CODE = ''100'' ';	-- 100:신규, 999:확정
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'		, VIM.SPMD_ATTR_'||:V_ATTR_COL_NO||' = ''Y'' ';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'		, VIM.LOCAL_UPDATE_DTM = CURRENT_TIMESTAMP ';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'		, VIM.UPDATE_USER_ID = '''||:I_UPDATE_USER_ID||''' ';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'		, VIM.SYSTEM_UPDATE_DTM = CURRENT_TIMESTAMP ';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'WHERE VIM.TENANT_ID = '''||:I_TENANT_ID||''' ';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'AND VIM.COMPANY_CODE = '''||:I_COMPANY_CODE||''' ';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'AND VIM.ORG_TYPE_CODE = '''||:I_ORG_TYPE_CODE||''' ';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'AND VIM.ORG_CODE = '''||:I_ORG_CODE||''' ';
		V_SQL_EXEC_STR := V_SQL_EXEC_STR||'AND VIM.VENDOR_POOL_CODE = '''||:I_VENDOR_POOL_CODE||''' ';
		
	END IF;
			
	-- Log 확인
	-- CALL LOG_PROC( :V_SQL_EXEC_STR );

	EXEC V_SQL_EXEC_STR;
	
	COMMIT;
	O_RTN_MESG := '0000-SUCCESS';
END;