/* Vendor Pool별 Material/Supplier Mapping 목록 Value Keyin 저장 처리 */
PROCEDURE PG_MD_VP_MAPPING_VALUE_SAVE_PROC (
									IN I_TABLE TABLE(   
														  TENANT_ID NVARCHAR(5) 
														, COMPANY_CODE NVARCHAR(10)
														, ORG_TYPE_CODE NVARCHAR(30)
														, ORG_CODE NVARCHAR(10)
														, VENDOR_POOL_CODE NVARCHAR(20)
														, MATERIAL_CODE NVARCHAR(40)
														, SUPPLIER_CODE NVARCHAR(10)
														, SPMD_CHARACTER_SERIAL_NO BIGINT
														, ATTR_VALUE NVARCHAR(100)
														, UPDATE_USER_ID NVARCHAR(255)
									),
									OUT O_TABLE TABLE(
														  RETURN_CODE NVARCHAR(5)
														, RETURN_MSG NVARCHAR(4000)
									)
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
AS
BEGIN

	DECLARE i INT;

	DECLARE v_tenant_id NVARCHAR(5);
	DECLARE v_company_code NVARCHAR(10);
	DECLARE v_org_type_code NVARCHAR(30);
	DECLARE v_org_code NVARCHAR(10);
	DECLARE v_spmd_category_code NVARCHAR(4);
	DECLARE v_spmd_character_code NVARCHAR(4);
	DECLARE v_spmd_character_serial_no BIGINT;
	DECLARE v_vendor_pool_code NVARCHAR(20);
	DECLARE v_update_user_id NVARCHAR(255);

	/* 사용자 정의  Error코드 */
	DECLARE v_usr_errcd CONDITION FOR SQL_ERROR_CODE 10000;

	/* SQL Error 처리 */
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;

		--SELECT ::SQL_ERROR_CODE||'-'||::SQL_ERROR_MESSAGE INTO O_RTN_MESG FROM DUMMY;
		:O_TABLE.insert((::SQL_ERROR_CODE, 'SQLEXCEPTION-[1]: '||::SQL_ERROR_MESSAGE));
	END;

	:O_TABLE.insert(('LOG', 'STEP-1 [Procedure Start]'));

    /* Mapping value Table 기존등록값 삭제 초기화 */
    DELETE FROM PG_MD_MATERIAL_ITEM_VALUE MMIV
    WHERE EXISTS (
        SELECT 1 FROM :I_TABLE TMP
        WHERE TMP.TENANT_ID = MMIV.TENANT_ID
        AND TMP.COMPANY_CODE = MMIV.COMPANY_CODE
        AND TMP.ORG_TYPE_CODE = MMIV.ORG_TYPE_CODE
        AND TMP.ORG_CODE = MMIV.ORG_CODE
        AND TMP.VENDOR_POOL_CODE = MMIV.VENDOR_POOL_CODE
        AND TMP.MATERIAL_CODE = MMIV.MATERIAL_CODE
        AND TMP.SUPPLIER_CODE = MMIV.SUPPLIER_CODE
    )
    ;

	:O_TABLE.insert(('LOG', 'STEP-2 [Pass]'));

	/* VP별 Material/Supplier Mapping대상 Value값 조회(다건 array로 등록됨.) */
	v_req_item_value_tbl =	SELECT 
								TMP.TENANT_ID
								, TMP.COMPANY_CODE
								, TMP.ORG_TYPE_CODE
								, TMP.ORG_CODE
								, TMP.VENDOR_POOL_CODE
								, TMP.MATERIAL_CODE
								, TMP.SUPPLIER_CODE
								, TMP.SPMD_CHARACTER_SERIAL_NO
								, LPAD(TO_CHAR(TMP.SPMD_CHARACTER_SERIAL_NO), 3, '0') AS ATTR_COL_NO
								, TMP.ATTR_VALUE
								, TMP.UPDATE_USER_ID
							FROM :I_TABLE TMP
							;


	:O_TABLE.insert(('LOG', 'STEP-3 ['||RECORD_COUNT( :v_req_item_value_tbl )||']'));

	FOR i IN 1 .. RECORD_COUNT( :v_req_item_value_tbl ) DO

		EXECUTE IMMEDIATE
			'
			MERGE INTO
					PG_MD_MATERIAL_ITEM_VALUE AS MMIV
				USING DUMMY
				ON (
					    MMIV.TENANT_ID = ?
					AND MMIV.COMPANY_CODE = ?
					AND MMIV.ORG_TYPE_CODE = ?
					AND MMIV.ORG_CODE = ?
					AND MMIV.VENDOR_POOL_CODE = ?
					AND MMIV.MATERIAL_CODE = ?
					AND MMIV.SUPPLIER_CODE = ?
				)
			WHEN MATCHED THEN

				UPDATE SET
					MMIV.MAPPING_FLAG = TRUE
					, MMIV.SPMD_ATTR_'||:v_req_item_value_tbl.ATTR_COL_NO[:i]||' = ?
					, MMIV.LOCAL_UPDATE_DTM = CURRENT_TIMESTAMP
					, MMIV.UPDATE_USER_ID = ?
					, MMIV.SYSTEM_UPDATE_DTM = CURRENT_TIMESTAMP

			WHEN NOT MATCHED THEN

				INSERT (
					TENANT_ID 
					, COMPANY_CODE
					, ORG_TYPE_CODE
					, ORG_CODE
					, VENDOR_POOL_CODE

					, MATERIAL_CODE
					, SUPPLIER_CODE
					, USE_FLAG
					, MAPPING_FLAG
					, SPMD_ATTR_'||:v_req_item_value_tbl.ATTR_COL_NO[:i]||'

					, LOCAL_CREATE_DTM
					, LOCAL_UPDATE_DTM
					, CREATE_USER_ID
					, UPDATE_USER_ID
					, SYSTEM_CREATE_DTM
					, SYSTEM_UPDATE_DTM

				) VALUES (

					  ?
					, ?
					, ?
					, ?
					, ?

					, ?
					, ?
					, TRUE
					, TRUE
					, ?

					, CURRENT_TIMESTAMP
					, CURRENT_TIMESTAMP
					, ?
					, ?
					, CURRENT_TIMESTAMP
					, CURRENT_TIMESTAMP
				)
			'
			USING
				  :v_req_item_value_tbl.TENANT_ID[:i]
				, :v_req_item_value_tbl.COMPANY_CODE[:i]
				, :v_req_item_value_tbl.ORG_TYPE_CODE[:i]
				, :v_req_item_value_tbl.ORG_CODE[:i]
				, :v_req_item_value_tbl.VENDOR_POOL_CODE[:i]
				, :v_req_item_value_tbl.MATERIAL_CODE[:i]
				, :v_req_item_value_tbl.SUPPLIER_CODE[:i]
				, :v_req_item_value_tbl.ATTR_VALUE[:i]
				, :v_req_item_value_tbl.UPDATE_USER_ID[:i]
				
				, :v_req_item_value_tbl.TENANT_ID[:i]
				, :v_req_item_value_tbl.COMPANY_CODE[:i]
				, :v_req_item_value_tbl.ORG_TYPE_CODE[:i]
				, :v_req_item_value_tbl.ORG_CODE[:i]
				, :v_req_item_value_tbl.VENDOR_POOL_CODE[:i]
				, :v_req_item_value_tbl.MATERIAL_CODE[:i]
				, :v_req_item_value_tbl.SUPPLIER_CODE[:i]
				, :v_req_item_value_tbl.ATTR_VALUE[:i]
				, :v_req_item_value_tbl.UPDATE_USER_ID[:i]
				, :v_req_item_value_tbl.UPDATE_USER_ID[:i]
		; /* Dynamic Exec End */

		:O_TABLE.insert(('LOG', 'STEP-4 [FOR-'||:i||'] [FOR-'||:v_req_item_value_tbl.VENDOR_POOL_CODE[:i]||'] [FOR-'||:v_req_item_value_tbl.MATERIAL_CODE[:i]||'] [FOR-'||:v_req_item_value_tbl.SUPPLIER_CODE[:i]||'] [FOR-'||:v_req_item_value_tbl.ATTR_COL_NO[:i]||'] [FOR-'||:v_req_item_value_tbl.ATTR_VALUE[:i]||']'));

		--SIGNAL v_usr_errcd SET MESSAGE_TEXT = 'STEP-4 error User Define Error Description.';
	END FOR;

	:O_TABLE.delete();
	:O_TABLE.insert(('00000', 'Procedure Success...'));
END;