PROCEDURE PG_VP_MAPPING_CHANGE_PROC (
  IN I_MST PG_VP_VENDOR_POOL_MST_TYPE
 ,IN I_SUP PG_VP_VENDOR_POOL_SUPPLIER_TYPE
 ,IN I_ITM PG_VP_VENDOR_POOL_ITEM_TYPE
 ,IN I_MAN PG_VP_VENDOR_POOL_MANAGER_TYPE
 ,IN I_USER_ID NVARCHAR(255)
 ,IN I_USER_NO NVARCHAR(255)
 ,OUT O_MSG PG_VP_VENDOR_POOL_PROC_OUT_TYPE
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
/*******************************************************************************************************************************************************
 프로시저명: PG_VP_MAPPING_CHANGE_PROC
 작성자:     이주원
 작성일자:   2020-12-29
 수정일자:   2021-01-04
 설명: Vendor Pool 관리 화면에서 저장 시 Vendor Pool 마스터, Supplier, Item, Manager 정보를 등록(수정 및 삭제)한다.
       1. Vendor Pool 마스터 정보의 등록은 별도의 화면을 통해 등록하며 등록 시 해당 프로시저에서는 마스터 정보만 등록 가능하다.
       2. Vendor Pool 마스터 정보의 삭제는 Supplier, Item, Manager 매핑 정보가 1개라도 존재하지 않는 경우만 가능하며(USE_FLAG만가 TRUE인 데이터)
          USE_FLAG만 False로 Update처리한다.
          * Vendor Pool Key 정보는 Use Flag와 상관없이 시퀀스로 자동 생성되기 때문에 삭제 후 다시 살릴수 있는 방법이 없다.
            Vendor Pool Master 정보를 삭제 후 다시 살리지 않는다.(Just History용으로 남게 됨.)
            Use Flag가 false인 데이터에 대하여 다시 동일 Vendor Pool Code로 생성되는 경우 에러발생!!
       3. Supplier, Item, Manager 정보는 실 정보 삭제는 없고 삭제 시 USE_FLAG만 False로 Update처리한다.
       4. Supplier, Item, Manager 정보는 
          [Insert] 시
          Vendor Pool Master에 해당 정보가 존재하지 않는 경우Insert, 
          존재하는 경우 (삭제 후 등록인 경우 이에 해당) USE_FLAG(True)와 함께 다른 정보를 Update 처리한다.
          [Update] 시
          Vendor Pool Master에 해당 정보가 존재하지 않는 경우 Error, 
          존재하는 경우 USE_FLAG(True)를 제외한 정보를 Update 처리한다.
          * Supplier 정보는 [PG_VP_SUPPLIER_MST_VIEW] 등록되어 있는 데이터만 가능하며(언어셋이 지정되어 있기 때문에 count 0 인지만 확인)
          * Material 정보는 [PG_VP_MATERIAL_MST_VIEW] 등록되어 있는 데이터만 가능하며(언어셋이 지정되어 있기 때문에 count 0 인지만 확인)
          * Manager  정보는 [CM_HR_EMPLOYEE] 등록되어 있는 데이터만 가능하다.(테넌트 정보와 Employee No만 비교.)
       5. Vendor Pool 마스터정보는 필수로 1건이 존재해야 하며 그 외 Supplier, Item, Manager 정보는 1건도 없을 수 있다.
       6. MAPPING SUPPLIER인 경우 수정, 등록, READ등 DELETE를 제외한 모든 정보를 TEMP 테이블에 INSERT한다.
          후속 프로세스에서 승인, 거절 시 TEMP에 있는 데이터로 SUPPLIER_DTL에 데이터를 엎어치는 로직 있음.
          하여 INSERT정보는 그대로 TEMP에 INSERT
               UPDATE정보 또한 그대로 TEMP에 INSERT
               DELETE 정보는 TEMP에 작업X
               READ 정보 또한 그대로 TEMP에 INSERT
               즉. 삭제된 정보는 TEMP에 존재하지 않기 때문에 후속 프로세스에서 SUPPLIER_DTL 정보와 비교하여 데이터가 존재하지 않기 때문에 그 때 실제 
                   삭제를 진행한다.(USE_FLAG: FALSE)
               그 외 정보는 TEMP정보로 SUPPLIER_DTL에 엎어침.
          MAPPING SUPPLIER는 TEMP테이블에 데이터가 존재하지 않는 경우에만 등록가능하다.
*******************************************************************************************************************************************************/
AS
BEGIN
    DECLARE V_TEST_MSG NVARCHAR(500) := '';
    
    /*****************************************************
	MASTER정보 CUD 전 체크를 위한 변수
	*****************************************************/
    DECLARE V_MASTER_COUNT INT := 0;
	DECLARE V_MASTER_EXIST_CNT INT := 0;
	DECLARE V_MASTER_EXIST_DELETE_CNT INT := 0;
	
	/*****************************************************
	MAPPING정보 CUD 전 체크를 위한 변수
	*****************************************************/
	DECLARE V_SUPPLIER_EXIST_CNT INT := 0;
	DECLARE V_ITEM_EXIST_CNT INT := 0;
	DECLARE V_MANAGER_EXIST_CNT INT := 0;
	
	/*****************************************************
	MAPPING정보 근본 데이터 존재여부 체크를 위한 변수
	*****************************************************/
	DECLARE V_SUPPLIER_AVLB_CNT INT := 0;
	DECLARE V_ITEM_AVLB_CNT INT := 0;
	DECLARE V_MANAGER_AVLB_CNT INT := 0;
	
	--SUPPLIER CUD 가능여부 체크를 위한 변수(TEMP존재여부)
	DECLARE V_SUPPLIER_TEMP_EXIST_CNT INT := 0;
	
	/*****************************************************
	SUPPLIER 저장 가능여부 체크를 위한 변수
	(TEMP에 데이터가 있는한 :I_SUP에 데이터가 넘어오면 안됨)
	위를 체크하기 위한 변수들.
	*****************************************************/
	DECLARE V_SUPPLIER_TEMP_CNT INT := 0;
	DECLARE V_SUPPLIER_COUNT INT := 0;
	
	/*****************************************************
	MASTER정보 삭제 시 MAPPING 건수 체크를 위한 변수
	*****************************************************/
	DECLARE V_SUPPLIER_EXIST_CNT_FOR_DELETE_MASTER INT := 0;
	DECLARE V_ITEM_EXIST_CNT_FOR_DELETE_MASTER INT := 0;
	DECLARE V_MANAGER_EXIST_CNT_FOR_DELETE_MASTER INT := 0;
	
	/*****************************************************
	각 MAPPING 정보 LOOPING 변수
	*****************************************************/
	DECLARE V_SUPPLIER_LOOP_INDEX INT := 0;
	DECLARE V_ITEM_LOOP_INDEX INT := 0;
	DECLARE V_MANAGER_LOOP_INDEX INT := 0;
	
	--CUD 건수 체크를 위한 변수
    DECLARE V_CUD_COUNT INT := 0;
    
    --마스터 LOOPING CURSOR 정보
    DECLARE CURSOR l_mst_cursor FOR
        SELECT *
        FROM :I_MST
        ORDER BY TENANT_ID, COMPANY_CODE,  ORG_TYPE_CODE, ORG_CODE, VENDOR_POOL_CODE;
        
    --매핑 SUPPLIER LOOPING CURSOR 정보
    DECLARE CURSOR l_sup_cursor FOR
        SELECT *
        FROM :I_SUP
        ORDER BY TENANT_ID, COMPANY_CODE,  ORG_TYPE_CODE, ORG_CODE, VENDOR_POOL_CODE, SUPPLIER_CODE;
    
    --매핑 ITEM 정보 LOOPING CURSOR 정보    
    DECLARE CURSOR l_itm_cursor FOR
        SELECT *
        FROM :I_ITM
        ORDER BY TENANT_ID, COMPANY_CODE,  ORG_TYPE_CODE, ORG_CODE, VENDOR_POOL_CODE, MATERIAL_CODE;
    
    --매핑 MANAGER 정보 LOOPING CURSOR 정보
    DECLARE CURSOR l_man_cursor FOR
        SELECT *
        FROM :I_MAN
        ORDER BY TENANT_ID, COMPANY_CODE,  ORG_TYPE_CODE, ORG_CODE, VENDOR_POOL_CODE, VENDOR_POOL_PERSON_EMPNO;
    
    --INPUT PARAM ERROR
    DECLARE invalid_input_param CONDITION FOR SQL_ERROR_CODE 10000;
    
    --WHERE CONDITION ERROR
    DECLARE invalid_where_info  CONDITION FOR SQL_ERROR_CODE 10001;
    
    --INSERT, UPDATE, DELETE CONDITION ERROR
    DECLARE invalid_crud_info   CONDITION FOR SQL_ERROR_CODE 10002;
    
    --DECLARE error_mst_crud      CONDITION FOR SQL_ERROR_CODE 10003;
    /****************************************************************
    자바 SERVICE EXCEPTION 정의 될때까지만 ERROR 시 ROLLBACK 적용
    추후 SERVICE EXCEPTION 처리 시 자동 ROLLBACK되기 때문에 
    ROLLBACK 부분만 삭제 예정
    ****************************************************************/
    DECLARE var_rollback NVARCHAR(100) := 'ROLLBACK';
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		--O_MSG = SELECT  'NG' RETURN_CODE, ::SQL_ERROR_CODE||'-'||::SQL_ERROR_MESSAGE RETURN_MSG FROM  DUMMY;
		EXEC (:var_rollback);
		IF ::SQL_ERROR_CODE < 10000 THEN
			O_MSG = SELECT  'NG' RETURN_CODE, LPAD(::SQL_ERROR_CODE, 8, '0')||'-'||::SQL_ERROR_MESSAGE RETURN_MSG FROM  DUMMY;
		ELSE 
			O_MSG = SELECT  'NG' RETURN_CODE, ::SQL_ERROR_MESSAGE RETURN_MSG FROM  DUMMY;
		END IF;
		
	END;
	
	/********************************************************
	[PARAM VALIDATION] 시작
	*******************************************************/
	
	/********************************************************
	PROC 호출 시 VENDOR POOL MASTER 정보는 1건만 받을 수 있다.
	MASTER 외의 TYPE 정보는 0건 혹은 다건도 가능하다.
	*******************************************************/
	SELECT COUNT(*)
	INTO   V_MASTER_COUNT 
    FROM   :I_MST;
	
	IF  V_MASTER_COUNT  != 1 THEN
		SIGNAL invalid_input_param SET MESSAGE_TEXT = 'EPG00017'||'-'||'Param Error.(Please Check Master Data Count)';
	END IF;
	
	IF IFNULL( :I_USER_ID, '-999')  = '-999' OR TRIM( ' ' FROM :I_USER_ID ) = '' THEN
	    SIGNAL invalid_input_param SET MESSAGE_TEXT = 'EPG00015'||'-'||'Param Error.(Please Check User Info)';
	END IF;
	
	IF IFNULL( :I_USER_NO, '-999')  = '-999' OR TRIM( ' ' FROM :I_USER_NO ) = '' THEN
	    SIGNAL invalid_input_param SET MESSAGE_TEXT = 'EPG00016'||'-'||'Param Error.(Please Check User Info)';
	END IF;
	
	/********************************************************
	[PARAM VALIDATION] 종료
	*******************************************************/
	
	
	/********************************************************
	[BUSINESS 로직] 시작
	*******************************************************/
	
	/***************************************************************************************
	비즈니스 로직은 MASTER를 기준으로 작업한다.
	마스터 정보가 DB에 존재하는 경우 마스터, ITEM, SUPPLIER, MANAGER 정보를 동시에 CUD 처리한다.
	마스터 정보가 DB에 존재하지 않는 경우 마스터 정보만 INSERT 처리한다.
	(마스터 정보 INSERT 시 그 외의 TYPE 정보는 같이 저장 불가능하다)
	***************************************************************************************/
	FOR loop_mst AS l_mst_cursor DO
	    V_TEST_MSG := loop_mst.VENDOR_POOL_CODE;
	    
	    IF IFNULL( loop_mst.TENANT_ID, '-999')  = '-999' OR TRIM( ' ' FROM loop_mst.TENANT_ID ) = '' THEN
	        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00004'||'-'||'Master Error.';
	    END IF;
	    
	    IF IFNULL( loop_mst.COMPANY_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_mst.COMPANY_CODE ) = '' THEN
	        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00005'||'-'||'Master Error.';
	    END IF;
	    
	    IF IFNULL( loop_mst.ORG_TYPE_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_mst.ORG_TYPE_CODE ) = '' THEN
	        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00006'||'-'||'Master Error.';
	    END IF;
	    
	    IF IFNULL( loop_mst.ORG_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_mst.ORG_CODE ) = '' THEN
	        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00007'||'-'||'Master Error.';
	    END IF;
	    
	    IF IFNULL( loop_mst.VENDOR_POOL_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_mst.VENDOR_POOL_CODE ) = '' THEN
	        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00008'||'-'||'Master Error.';
	    END IF;
	    
	    IF TRIM( ' ' FROM loop_mst.CRUD_TYPE_CODE )  NOT IN ( 'C', 'U', 'D') THEN
	        SIGNAL invalid_crud_info SET MESSAGE_TEXT = 'EPG00009'||'-'||'Master Error.';
	    END IF;
	    
	    /********************************************************
		등록된 PG_VP_VENDOR_POOL_SUPPLIER_TMP 정보는 후속 프로세스로
		승인이나 거절 시 데이터가 삭제된다.
		그러므로 조건에 TMP데이터가 존재하는 경우 해당 프로세스에서는
		진행이 불가능하다.
		*******************************************************/
		SELECT COUNT(*)
		INTO   V_SUPPLIER_COUNT 
	    FROM   :I_SUP;
	    
	    SELECT COUNT(*)
		INTO   V_SUPPLIER_TEMP_CNT 
	    FROM   PG_VP_VENDOR_POOL_SUPPLIER_TMP A
	    WHERE  A.TENANT_ID            = loop_mst.TENANT_ID
	    AND    A.COMPANY_CODE         = loop_mst.COMPANY_CODE
	    AND    A.ORG_TYPE_CODE        = loop_mst.ORG_TYPE_CODE
	    AND    A.ORG_CODE             = loop_mst.ORG_CODE
	    AND    A.VENDOR_POOL_CODE     = loop_mst.VENDOR_POOL_CODE;
		
		/*****************************************************************************
		프로시저 호출 시 PG_VP_VENDOR_POOL_SUPPLIER_TMP에 데이터가 존재하는 경우
		어떤 경우에도 SUPPLIER 정보가 :I_SUP에 넘어오면 안된다.
		(화면에서 SUPPLIER 입력부를 막을 것이기 때문에 READ 데이터도 넘어오면 안된다.)
		*아래 SUPPLIER 로직에서 READ 데이터도 TEMP에 저장하기 때문임.
		*****************************************************************************/
		IF  V_SUPPLIER_TEMP_CNT > 0 AND V_SUPPLIER_COUNT  > 0 THEN
			SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00024'||'-'||'[Master] Supplier Temp Exist Error.';
		END IF;
	    
	    /***************************************************************************************
		조회조건에 해당하는 마스터 정보가 2건 이상인 경우 에러를 발생시킨다.
		신규인 경우 0건, 수정인 경우 1건이어야함.
		***************************************************************************************/
	    SELECT  COUNT(*)
		INTO    V_MASTER_EXIST_CNT
		FROM    PG_VP_VENDOR_POOL_MST A
		WHERE   A.TENANT_ID            = loop_mst.TENANT_ID
	    AND     A.COMPANY_CODE         = loop_mst.COMPANY_CODE
	    AND     A.ORG_TYPE_CODE        = loop_mst.ORG_TYPE_CODE
	    AND     A.ORG_CODE             = loop_mst.ORG_CODE
	    AND     A.VENDOR_POOL_CODE     = loop_mst.VENDOR_POOL_CODE
	    AND     A.VENDOR_POOL_USE_FLAG = TRUE;
		
		IF V_MASTER_EXIST_CNT > 1 THEN
		    SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00010'||'-'||'Master Error.';
		
		ELSE
			/***************************************************************************************
			[마스터 수정 프로세스]
			***************************************************************************************/
	    	IF TRIM( ' ' FROM loop_mst.CRUD_TYPE_CODE )  =  'U' THEN
		        --기존 데이터가 존재하는 경우 수정
		    	IF V_MASTER_EXIST_CNT = 1 THEN
                    BEGIN
						--DECLARE EXIT HANDLER FOR SQLEXCEPTION RESIGNAL SET MESSAGE_TEXT = 'EPG00099'||'-'||'Master Update Error.';
						
						UPDATE  PG_VP_VENDOR_POOL_MST MST
	                    SET     VENDOR_POOL_LOCAL_NAME				= TRIM( ' ' FROM loop_mst.VENDOR_POOL_LOCAL_NAME )
	                            ,VENDOR_POOL_ENGLISH_NAME 			= TRIM( ' ' FROM loop_mst.VENDOR_POOL_ENGLISH_NAME )
	                            ,REPR_DEPARTMENT_CODE 				= TRIM( ' ' FROM loop_mst.REPR_DEPARTMENT_CODE )			   
	                            ,OPERATION_UNIT_CODE 				= TRIM( ' ' FROM loop_mst.OPERATION_UNIT_CODE )
	                            ,INP_TYPE_CODE 						= TRIM( ' ' FROM loop_mst.INP_TYPE_CODE )
	                            ,MTLMOB_BASE_CODE 					= TRIM( ' ' FROM loop_mst.MTLMOB_BASE_CODE )
	                            ,REGULAR_EVALUATION_FLAG 			= IFNULL( loop_mst.REGULAR_EVALUATION_FLAG, TRUE)
	                            ,INDUSTRY_CLASS_CODE 				= TRIM( ' ' FROM loop_mst.INDUSTRY_CLASS_CODE )
	                            ,SD_EXCEPTION_FLAG 					= IFNULL( loop_mst.SD_EXCEPTION_FLAG, FALSE)
	                            ,VENDOR_POOL_APPLY_EXCEPTION_FLAG 	= IFNULL( loop_mst.VENDOR_POOL_APPLY_EXCEPTION_FLAG, FALSE)
	                            ,DOMESTIC_NET_PRICE_DIFF_RATE 		= loop_mst.DOMESTIC_NET_PRICE_DIFF_RATE
	                            ,DOM_OVERSEA_NETPRICE_DIFF_RATE 	= loop_mst.DOM_OVERSEA_NETPRICE_DIFF_RATE
	                            ,EQUIPMENT_GRADE_CODE 				= TRIM( ' ' FROM loop_mst.EQUIPMENT_GRADE_CODE )
	                            ,EQUIPMENT_TYPE_CODE 				= TRIM( ' ' FROM loop_mst.EQUIPMENT_TYPE_CODE )
	                            ,VENDOR_POOL_DESC 					= TRIM( ' ' FROM loop_mst.VENDOR_POOL_DESC )
	                            ,VENDOR_POOL_HISTORY_DESC 			= TRIM( ' ' FROM loop_mst.VENDOR_POOL_HISTORY_DESC )
	                            ,PARENT_VENDOR_POOL_CODE 			= TRIM( ' ' FROM loop_mst.PARENT_VENDOR_POOL_CODE )
	                            ,LEAF_FLAG 				 			= IFNULL( loop_mst.LEAF_FLAG, FALSE)
	                            ,MAKER_MATERIAL_CODE_MNGT_FLAG 		= IFNULL( loop_mst.MAKER_MATERIAL_CODE_MNGT_FLAG, FALSE)
	                            ,LEVEL_NUMBER 			 			= loop_mst.LEVEL_NUMBER 
	                            ,DISPLAY_SEQUENCE 		 			= loop_mst.DISPLAY_SEQUENCE 
	                            ,REGISTER_REASON 		 			= TRIM( ' ' FROM loop_mst.REGISTER_REASON )
	                            ,APPROVAL_NUMBER        			= TRIM( ' ' FROM loop_mst.APPROVAL_NUMBER )			   
	                            ,LOCAL_UPDATE_DTM       			= NOW()
	                            ,UPDATE_USER_ID         			= I_USER_ID
	                            ,SYSTEM_UPDATE_DTM      			= NOW()
	                    WHERE   TENANT_ID           = loop_mst.TENANT_ID
	                    AND     COMPANY_CODE        = loop_mst.COMPANY_CODE
	                    AND     ORG_TYPE_CODE       = loop_mst.ORG_TYPE_CODE
	                    AND     ORG_CODE            = loop_mst.ORG_CODE
	                    AND     VENDOR_POOL_CODE    = loop_mst.VENDOR_POOL_CODE
	                    ;
	                    
	                    SELECT ::ROWCOUNT into V_CUD_COUNT FROM DUMMY;
	            
	                    IF V_CUD_COUNT != 1 THEN
	                        SIGNAL invalid_crud_info SET MESSAGE_TEXT = 'EPG00011'||'-'||'Master Update Error.';
	                        --raise_application_error(-20001, 'PG_VP_VENDOR_POOL_MST UPDATE ERROR '|| loop_mst.VENDOR_POOL_CODE||' ['||::ROWCOUNT||']');
	                    END IF;
                    END;
				    
				    /********************************************************
					[Supplier 로직] 시작(Master 정보의 Update 시에만 가능함)
					*******************************************************/
					
					/********************************************************
					VENDOR POOL MASTER 수정 시 SUPPLIER를 수정하는 경우
					INSERT 혹은 DELETE 라인이 있으면 
					[PG_VP_VENDOR_POOL_SUPPLIER_TMP]로 INSERT한다.
					*********************************************************/
				    FOR loop_sup AS l_sup_cursor DO
					    V_TEST_MSG := loop_sup.SUPPLIER_CODE;
					    V_SUPPLIER_LOOP_INDEX := V_SUPPLIER_LOOP_INDEX + 1;
					    
					    IF IFNULL( loop_sup.TENANT_ID, '-999')  = '-999' OR TRIM( ' ' FROM loop_sup.TENANT_ID ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00004'||'-'||'Supplier Error.['||V_SUPPLIER_LOOP_INDEX||']';
					    END IF;
					    
					    IF IFNULL( loop_sup.COMPANY_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_sup.COMPANY_CODE ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00005'||'-'||'Supplier Error.['||V_SUPPLIER_LOOP_INDEX||']';
					    END IF;
					    
					    IF IFNULL( loop_sup.ORG_TYPE_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_sup.ORG_TYPE_CODE ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00006'||'-'||'Supplier Error.['||V_SUPPLIER_LOOP_INDEX||']';
					    END IF;
					    
					    IF IFNULL( loop_sup.ORG_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_sup.ORG_CODE ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00007'||'-'||'Supplier Error.['||V_SUPPLIER_LOOP_INDEX||']';
					    END IF;
					    
					    IF IFNULL( loop_sup.VENDOR_POOL_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_sup.VENDOR_POOL_CODE ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00008'||'-'||'Supplier Error.['||V_SUPPLIER_LOOP_INDEX||']';
					    END IF;
					    
					    IF IFNULL( loop_sup.SUPPLIER_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_sup.SUPPLIER_CODE ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00012'||'-'||'Supplier Error.['||V_SUPPLIER_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_sup.CRUD_TYPE_CODE )  NOT IN ('D', 'C', 'U') THEN
					        SIGNAL invalid_crud_info SET MESSAGE_TEXT = 'EPG00009'||'-'||'Supplier Error.['||V_SUPPLIER_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_mst.TENANT_ID )  != TRIM( ' ' FROM loop_sup.TENANT_ID ) THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00018'||'-'||'Supplier Error.['||V_SUPPLIER_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_mst.COMPANY_CODE )  != TRIM( ' ' FROM loop_sup.COMPANY_CODE ) THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00018'||'-'||'Supplier Error.['||V_SUPPLIER_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_mst.ORG_TYPE_CODE )  != TRIM( ' ' FROM loop_sup.ORG_TYPE_CODE ) THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00018'||'-'||'Supplier Error.['||V_SUPPLIER_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_mst.ORG_CODE )  != TRIM( ' ' FROM loop_sup.ORG_CODE ) THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00018'||'-'||'Supplier Error.['||V_SUPPLIER_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_mst.VENDOR_POOL_CODE )  != TRIM( ' ' FROM loop_sup.VENDOR_POOL_CODE ) THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00018'||'-'||'Supplier Error.['||V_SUPPLIER_LOOP_INDEX||']';
					    END IF;
					    
					    /*****************************************************
					    현재 SUPPLIER 원본 데이터 확인 불가.
					    VIEW에서 '*' 조회 대상 제외되어있고
					    '*'가 아닌 데이터는 ITEM VIEW와 겹치는 데이터 X
					    *****************************************************/
					    /*  
					    SELECT  COUNT(*)
						INTO    V_SUPPLIER_AVLB_CNT
						FROM    PG_VP_SUPPLIER_MST_VIEW A
						WHERE   A.TENANT_ID           = loop_sup.TENANT_ID
					    AND     A.COMPANY_CODE        = loop_sup.COMPANY_CODE
					    AND     A.ORG_TYPE_CODE       = loop_sup.ORG_TYPE_CODE
					    AND     A.ORG_CODE            = loop_sup.ORG_CODE
					    AND     A.SUPPLIER_CODE       = loop_sup.SUPPLIER_CODE
					    ;
					    
					    IF V_SUPPLIER_AVLB_CNT = 0 THEN
							SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00023'||'-'||'Supplier Not Exist Error.['||V_SUPPLIER_LOOP_INDEX||']';
						END IF;
						*/
						
						/************************************************************
						등록된 PG_VP_VENDOR_POOL_SUPPLIER_TMP 정보는 후속 프로세스로
						승인이나 거절 시 데이터가 삭제된다.
						그러므로 조건에 TMP데이터가 존재하는 경우 해당 프로세스에서는
						진행이 불가능하다.
						*************************************************************/
						SELECT  COUNT(*)
						INTO    V_SUPPLIER_TEMP_EXIST_CNT
						FROM    PG_VP_VENDOR_POOL_SUPPLIER_TMP A
						WHERE   A.TENANT_ID           = loop_sup.TENANT_ID
					    AND     A.COMPANY_CODE        = loop_sup.COMPANY_CODE
					    AND     A.ORG_TYPE_CODE       = loop_sup.ORG_TYPE_CODE
					    AND     A.ORG_CODE            = loop_sup.ORG_CODE
					    AND     A.VENDOR_POOL_CODE    = loop_sup.VENDOR_POOL_CODE
					    AND     A.SUPPLIER_CODE       = loop_sup.SUPPLIER_CODE
					    ;
					    
					    IF V_SUPPLIER_TEMP_EXIST_CNT > 0 THEN
							SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00024'||'-'||'Supplier Temp Exist Error.['||V_SUPPLIER_LOOP_INDEX||']';
						END IF;
					    
					    SELECT  COUNT(*)
						INTO    V_SUPPLIER_EXIST_CNT
						FROM    PG_VP_VENDOR_POOL_SUPPLIER_DTL A
						WHERE   A.TENANT_ID           = loop_sup.TENANT_ID
					    AND     A.COMPANY_CODE        = loop_sup.COMPANY_CODE
					    AND     A.ORG_TYPE_CODE       = loop_sup.ORG_TYPE_CODE
					    AND     A.ORG_CODE            = loop_sup.ORG_CODE
					    AND     A.VENDOR_POOL_CODE    = loop_sup.VENDOR_POOL_CODE
					    AND     A.SUPPLIER_CODE       = loop_sup.SUPPLIER_CODE
					    ;
					    
					    /*****************************************************************
					    공급처 삭제 시 TEMP에 아무런 작업도 안함.
					    (추후 TEMP와 DTL 정보 비교하여 TEMP에 없으면 DTL을 삭제함.)
					    *****************************************************************/
					    IF TRIM( ' ' FROM loop_sup.CRUD_TYPE_CODE )  !=  'D' THEN
					        
							IF V_SUPPLIER_EXIST_CNT > 1 THEN
								SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00010'||'-'||'Supplier Error.['||V_SUPPLIER_LOOP_INDEX||']';
							ELSE
								INSERT INTO  PG_VP_VENDOR_POOL_SUPPLIER_TMP
							    (
								    	 TENANT_ID                          ,COMPANY_CODE                        ,ORG_TYPE_CODE
										,ORG_CODE                           ,VENDOR_POOL_CODE                    ,SUPPLIER_CODE
										,CHANGER_EMPNO                      ,BEFORE_SUPPLIER_CODE                ,SUPEVAL_TARGET_FLAG
										,SUPPLIER_OP_PLAN_REVIEW_FLAG       ,SUPEVAL_CONTROL_FLAG			     ,SUPEVAL_CONTROL_START_DATE         
										,SUPEVAL_CONTROL_END_DATE           ,SUPEVAL_RESTRICT_START_DATE		 ,SUPEVAL_RESTRICT_END_DATE          
										,INP_CODE                           ,SUPPLIER_RM_CONTROL_FLAG		     ,SUPPLIER_BASE_PORTION_RATE         
										,APPROVAL_NUMBER                    ,LOCAL_CREATE_DTM                    ,CREATE_USER_ID         		
										,SYSTEM_CREATE_DTM                  ,LOCAL_UPDATE_DTM                    ,UPDATE_USER_ID
										,SYSTEM_UPDATE_DTM
							    ) VALUES (
							    		 loop_sup.TENANT_ID
							    		,loop_sup.COMPANY_CODE
							    		,loop_sup.ORG_TYPE_CODE
							    		,loop_sup.ORG_CODE
							    		,loop_sup.VENDOR_POOL_CODE
							    		,loop_sup.SUPPLIER_CODE
							    		,I_USER_NO
            							,NULL
							    		,IFNULL( loop_sup.SUPEVAL_TARGET_FLAG, FALSE)
										,IFNULL( loop_sup.SUPPLIER_OP_PLAN_REVIEW_FLAG, FALSE)
										,IFNULL( loop_sup.SUPEVAL_CONTROL_FLAG, FALSE)
										,TRIM( ' ' FROM loop_sup.SUPEVAL_CONTROL_START_DATE )
										,TRIM( ' ' FROM loop_sup.SUPEVAL_CONTROL_END_DATE )
										,TRIM( ' ' FROM loop_sup.SUPEVAL_RESTRICT_START_DATE )
										,TRIM( ' ' FROM loop_sup.SUPEVAL_RESTRICT_END_DATE )
										,TRIM( ' ' FROM loop_sup.INP_CODE )
										,IFNULL( loop_sup.SUPPLIER_RM_CONTROL_FLAG, FALSE)
										,loop_sup.SUPPLIER_BASE_PORTION_RATE
										,loop_sup.APPROVAL_NUMBER
										,NOW()
										,I_USER_ID
										,NOW()
										,NOW()
										,I_USER_ID
										,NOW()
							    )
							    ;
							    
							    SELECT ::ROWCOUNT into V_CUD_COUNT FROM DUMMY;
						    
							    IF V_CUD_COUNT != 1 THEN
							        SIGNAL invalid_crud_info SET MESSAGE_TEXT = 'EPG00011'||'-'||'Supplier Update(Insert) Error.['||V_SUPPLIER_LOOP_INDEX||']';
							    END IF;
							END IF;
						--삭제 로우가 존재하는 경우 VALIDATION만 체크한다.	
					    ELSE
							IF V_SUPPLIER_EXIST_CNT != 1 THEN
							    SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00020'||'-'||'Supplier Error.['||V_SUPPLIER_LOOP_INDEX||']';
						    END IF;
					    END IF;
					END FOR;
					/********************************************************
					[Supplier 로직] 종료(Master 정보의 Update 시에만 가능함)
					*******************************************************/
					
					/********************************************************
					[Material 로직] 시작(Master 정보의 Update 시에만 가능함)
					*******************************************************/
					FOR loop_itm AS l_itm_cursor DO
					    V_TEST_MSG := loop_itm.MATERIAL_CODE;
					    V_ITEM_LOOP_INDEX := V_ITEM_LOOP_INDEX + 1;
					    
					    IF IFNULL( loop_itm.TENANT_ID, '-999')  = '-999' OR TRIM( ' ' FROM loop_itm.TENANT_ID ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00004'||'-'||'Item Error.['||V_ITEM_LOOP_INDEX||']';
					    END IF;
					    
					    IF IFNULL( loop_itm.COMPANY_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_itm.COMPANY_CODE ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00005'||'-'||'Item Error.['||V_ITEM_LOOP_INDEX||']';
					    END IF;
					    
					    IF IFNULL( loop_itm.ORG_TYPE_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_itm.ORG_TYPE_CODE ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00006'||'-'||'Item Error.['||V_ITEM_LOOP_INDEX||']';
					    END IF;
					    
					    IF IFNULL( loop_itm.ORG_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_itm.ORG_CODE ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00007'||'-'||'Item Error.['||V_ITEM_LOOP_INDEX||']';
					    END IF;
					    
					    IF IFNULL( loop_itm.VENDOR_POOL_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_itm.VENDOR_POOL_CODE ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00008'||'-'||'Item Error.['||V_ITEM_LOOP_INDEX||']';
					    END IF;
					    
					    IF IFNULL( loop_itm.MATERIAL_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_itm.MATERIAL_CODE ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00021'||'-'||'Item Error.['||V_ITEM_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_itm.CRUD_TYPE_CODE )  NOT IN ('D', 'C', 'U') THEN
					        SIGNAL invalid_crud_info SET MESSAGE_TEXT = 'EPG00009'||'-'||'Item Error.['||V_ITEM_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_mst.TENANT_ID )  != TRIM( ' ' FROM loop_itm.TENANT_ID ) THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00018'||'-'||'Item Error.['||V_ITEM_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_mst.COMPANY_CODE )  != TRIM( ' ' FROM loop_itm.COMPANY_CODE ) THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00018'||'-'||'Item Error.['||V_ITEM_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_mst.ORG_TYPE_CODE )  != TRIM( ' ' FROM loop_itm.ORG_TYPE_CODE ) THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00018'||'-'||'Item Error.['||V_ITEM_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_mst.ORG_CODE )  != TRIM( ' ' FROM loop_itm.ORG_CODE ) THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00018'||'-'||'Item Error.['||V_ITEM_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_mst.VENDOR_POOL_CODE )  != TRIM( ' ' FROM loop_itm.VENDOR_POOL_CODE ) THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00018'||'-'||'Item Error.['||V_ITEM_LOOP_INDEX||']';
					    END IF;
					    
					    SELECT  COUNT(*)
						INTO    V_ITEM_AVLB_CNT
						FROM    PG_VP_MATERIAL_MST_VIEW A
						WHERE   A.TENANT_ID           = loop_itm.TENANT_ID
					    AND     A.COMPANY_CODE        = loop_itm.COMPANY_CODE
					    AND     A.ORG_TYPE_CODE       = loop_itm.ORG_TYPE_CODE
					    AND     A.ORG_CODE            = loop_itm.ORG_CODE
					    AND     A.MATERIAL_CODE       = loop_itm.MATERIAL_CODE
					    ;
					    
					    IF V_ITEM_AVLB_CNT = 0 THEN
							SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00023'||'-'||'Item Not Exist Error.['||V_SUPPLIER_LOOP_INDEX||']';
						END IF;
					    
					    SELECT  COUNT(*)
						INTO    V_ITEM_EXIST_CNT
						FROM    PG_VP_VENDOR_POOL_ITEM_DTL A
						WHERE   A.TENANT_ID           = loop_itm.TENANT_ID
					    AND     A.COMPANY_CODE        = loop_itm.COMPANY_CODE
					    AND     A.ORG_TYPE_CODE       = loop_itm.ORG_TYPE_CODE
					    AND     A.ORG_CODE            = loop_itm.ORG_CODE
					    AND     A.VENDOR_POOL_CODE    = loop_itm.VENDOR_POOL_CODE
					    AND     A.MATERIAL_CODE       = loop_itm.MATERIAL_CODE
					    ;
					    
					    IF TRIM( ' ' FROM loop_itm.CRUD_TYPE_CODE )  =  'C'  OR TRIM( ' ' FROM loop_itm.CRUD_TYPE_CODE )  =  'U' THEN
					        
							IF V_ITEM_EXIST_CNT > 1 THEN
								SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00010'||'-'||'Item Error.['||V_ITEM_LOOP_INDEX||']';
							END IF;
							
							--1건이 존재하는 경우 UPDATE
							IF V_ITEM_EXIST_CNT = 1 THEN
							    UPDATE  PG_VP_VENDOR_POOL_ITEM_DTL
								SET     REGISTER_REASON						= TRIM( ' ' FROM loop_itm.REGISTER_REASON )
									   ,APPROVAL_NUMBER						= loop_itm.APPROVAL_NUMBER        
									   ,VENDOR_POOL_MAPPING_USE_FLAG        = True
									   ,LOCAL_UPDATE_DTM       				= NOW()
									   ,UPDATE_USER_ID         				= I_USER_ID
									   ,SYSTEM_UPDATE_DTM      				= NOW()
								WHERE   TENANT_ID           = loop_itm.TENANT_ID
								AND     COMPANY_CODE        = loop_itm.COMPANY_CODE
								AND     ORG_TYPE_CODE       = loop_itm.ORG_TYPE_CODE
								AND     ORG_CODE            = loop_itm.ORG_CODE
								AND     VENDOR_POOL_CODE    = loop_itm.VENDOR_POOL_CODE
								AND     MATERIAL_CODE       = loop_itm.MATERIAL_CODE
							    ;
							-- 존재하지 않는 경우 신규생성
							ELSE
							    INSERT INTO  PG_VP_VENDOR_POOL_ITEM_DTL
							    (
								    	 TENANT_ID                          ,COMPANY_CODE                        ,ORG_TYPE_CODE
										,ORG_CODE                           ,VENDOR_POOL_CODE                    ,MATERIAL_CODE
										,VENDOR_POOL_MAPPING_USE_FLAG       ,REGISTER_REASON				     ,APPROVAL_NUMBER
										,LOCAL_CREATE_DTM                   ,CREATE_USER_ID         		     ,SYSTEM_CREATE_DTM
										,LOCAL_UPDATE_DTM                   ,UPDATE_USER_ID                      ,SYSTEM_UPDATE_DTM
							    ) VALUES (
							    		 loop_itm.TENANT_ID
							    		,loop_itm.COMPANY_CODE
							    		,loop_itm.ORG_TYPE_CODE
							    		,loop_itm.ORG_CODE
							    		,loop_itm.VENDOR_POOL_CODE
							    		,loop_itm.MATERIAL_CODE
							    		,TRUE
										,TRIM( ' ' FROM loop_itm.REGISTER_REASON )
										,loop_itm.APPROVAL_NUMBER
										,NOW()
										,I_USER_ID
										,NOW()
										,NOW()
										,I_USER_ID
										,NOW()
							    )
							    ;
							END IF;
						    
						    SELECT ::ROWCOUNT into V_CUD_COUNT FROM DUMMY;
						    
						    IF V_CUD_COUNT != 1 THEN
						        SIGNAL invalid_crud_info SET MESSAGE_TEXT = 'EPG00011'||'-'||'Item Update(Insert) Error.['||V_ITEM_LOOP_INDEX||']';
						    END IF;
					    ELSE
							IF V_ITEM_EXIST_CNT != 1 THEN
							    SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00020'||'-'||'Item Error.['||V_ITEM_LOOP_INDEX||']';
							ELSE
						    
								UPDATE  PG_VP_VENDOR_POOL_ITEM_DTL MST
								SET     VENDOR_POOL_MAPPING_USE_FLAG		= FALSE
									   ,LOCAL_UPDATE_DTM       				= NOW()
									   ,UPDATE_USER_ID         				= I_USER_ID
									   ,SYSTEM_UPDATE_DTM      				= NOW()
								WHERE   TENANT_ID           = loop_itm.TENANT_ID
								AND     COMPANY_CODE        = loop_itm.COMPANY_CODE
								AND     ORG_TYPE_CODE       = loop_itm.ORG_TYPE_CODE
								AND     ORG_CODE            = loop_itm.ORG_CODE
								AND     VENDOR_POOL_CODE    = loop_itm.VENDOR_POOL_CODE
								AND     MATERIAL_CODE       = loop_itm.MATERIAL_CODE
							    ;
						    END IF;
						    
						    SELECT ::ROWCOUNT into V_CUD_COUNT FROM DUMMY;
						    
						    IF V_CUD_COUNT != 1 THEN
						        SIGNAL invalid_crud_info SET MESSAGE_TEXT = 'EPG00011'||'-'||'Item Update(Insert) Error.['||V_ITEM_LOOP_INDEX||']';
						    END IF;
					    END IF;
					END FOR;
					/********************************************************
					[Material 로직] 종료(Master 정보의 Update 시에만 가능함)
					*******************************************************/
					
					/********************************************************
					[Manager 로직] 시작(Master 정보의 Update 시에만 가능함)
					*******************************************************/
					FOR loop_man AS l_man_cursor DO
					    V_TEST_MSG := loop_man.VENDOR_POOL_PERSON_EMPNO;
					    V_MANAGER_LOOP_INDEX := V_MANAGER_LOOP_INDEX + 1;
					    
					    IF IFNULL( loop_man.TENANT_ID, '-999')  = '-999' OR TRIM( ' ' FROM loop_man.TENANT_ID ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00004'||'-'||'Manager Error.['||V_MANAGER_LOOP_INDEX||']';
					    END IF;
					    
					    IF IFNULL( loop_man.COMPANY_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_man.COMPANY_CODE ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00005'||'-'||'Manager Error.['||V_MANAGER_LOOP_INDEX||']';
					    END IF;
					    
					    IF IFNULL( loop_man.ORG_TYPE_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_man.ORG_TYPE_CODE ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00006'||'-'||'Manager Error.['||V_MANAGER_LOOP_INDEX||']';
					    END IF;
					    
					    IF IFNULL( loop_man.ORG_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_man.ORG_CODE ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00007'||'-'||'Manager Error.['||V_MANAGER_LOOP_INDEX||']';
					    END IF;
					    
					    IF IFNULL( loop_man.VENDOR_POOL_CODE, '-999')  = '-999' OR TRIM( ' ' FROM loop_man.VENDOR_POOL_CODE ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00008'||'-'||'Manager Error.['||V_MANAGER_LOOP_INDEX||']';
					    END IF;
					    
					    IF IFNULL( loop_man.VENDOR_POOL_PERSON_EMPNO, '-999')  = '-999' OR TRIM( ' ' FROM loop_man.VENDOR_POOL_PERSON_EMPNO ) = '' THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00022'||'-'||'Manager Error.['||V_MANAGER_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_man.CRUD_TYPE_CODE )  NOT IN ('D', 'C', 'U') THEN
					        SIGNAL invalid_crud_info SET MESSAGE_TEXT = 'EPG00009'||'-'||'Manager Error.['||V_MANAGER_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_mst.TENANT_ID )  != TRIM( ' ' FROM loop_man.TENANT_ID ) THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00018'||'-'||'Manager Error.['||V_MANAGER_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_mst.COMPANY_CODE )  != TRIM( ' ' FROM loop_man.COMPANY_CODE ) THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00018'||'-'||'Manager Error.['||V_MANAGER_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_mst.ORG_TYPE_CODE )  != TRIM( ' ' FROM loop_man.ORG_TYPE_CODE ) THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00018'||'-'||'Manager Error.['||V_MANAGER_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_mst.ORG_CODE )  != TRIM( ' ' FROM loop_man.ORG_CODE ) THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00018'||'-'||'Manager Error.['||V_MANAGER_LOOP_INDEX||']';
					    END IF;
					    
					    IF TRIM( ' ' FROM loop_mst.VENDOR_POOL_CODE )  != TRIM( ' ' FROM loop_man.VENDOR_POOL_CODE ) THEN
					        SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00018'||'-'||'Manager Error.['||V_MANAGER_LOOP_INDEX||']';
					    END IF;
					    
					    SELECT  COUNT(*)
						INTO    V_MANAGER_AVLB_CNT
						FROM    CM_HR_EMPLOYEE A
						WHERE   A.TENANT_ID           = loop_man.TENANT_ID
					    AND     A.EMPLOYEE_NUMBER     = loop_man.VENDOR_POOL_PERSON_EMPNO
					    ;
					    
					    IF V_MANAGER_AVLB_CNT = 0 THEN
							SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00023'||'-'||'Manager Not Exist Error.['||V_SUPPLIER_LOOP_INDEX||']';
						END IF;
					    
					    SELECT  COUNT(*)
						INTO    V_MANAGER_EXIST_CNT
						FROM    PG_VP_VENDOR_POOL_MANAGER_DTL A
						WHERE   A.TENANT_ID         			= loop_man.TENANT_ID
					    AND     A.COMPANY_CODE      			= loop_man.COMPANY_CODE
					    AND     A.ORG_TYPE_CODE     			= loop_man.ORG_TYPE_CODE
					    AND     A.ORG_CODE          			= loop_man.ORG_CODE
					    AND     A.VENDOR_POOL_CODE  			= loop_man.VENDOR_POOL_CODE
					    AND     A.VENDOR_POOL_PERSON_EMPNO      = loop_man.VENDOR_POOL_PERSON_EMPNO
					    ;
					    
					    IF TRIM( ' ' FROM loop_man.CRUD_TYPE_CODE )  =  'C'  OR TRIM( ' ' FROM loop_man.CRUD_TYPE_CODE )  =  'U' THEN
					        
							IF V_MANAGER_EXIST_CNT > 1 THEN
								SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00010'||'-'||'Manager Error.['||V_MANAGER_LOOP_INDEX||']';
							END IF;
							
							--1건이 존재하는 경우 UPDATE
							IF V_MANAGER_EXIST_CNT = 1 THEN
							    UPDATE  PG_VP_VENDOR_POOL_MANAGER_DTL
								SET     VENDOR_POOL_PERSON_ROLE_TEXT		= TRIM( ' ' FROM loop_man.VENDOR_POOL_PERSON_ROLE_TEXT )
									   ,REGISTER_REASON						= TRIM( ' ' FROM loop_man.REGISTER_REASON )
									   ,APPROVAL_NUMBER						= loop_man.APPROVAL_NUMBER                       
									   ,VENDOR_POOL_MAPPING_USE_FLAG        = True
									   ,LOCAL_UPDATE_DTM       				= NOW()
									   ,UPDATE_USER_ID         				= I_USER_ID
									   ,SYSTEM_UPDATE_DTM      				= NOW()
								WHERE   TENANT_ID           			= loop_man.TENANT_ID
								AND     COMPANY_CODE        			= loop_man.COMPANY_CODE
								AND     ORG_TYPE_CODE       			= loop_man.ORG_TYPE_CODE
								AND     ORG_CODE            			= loop_man.ORG_CODE
								AND     VENDOR_POOL_CODE    			= loop_man.VENDOR_POOL_CODE
								AND     VENDOR_POOL_PERSON_EMPNO        = loop_man.VENDOR_POOL_PERSON_EMPNO
							    ;
							-- 존재하지 않는 경우 신규생성
							ELSE
							    INSERT INTO  PG_VP_VENDOR_POOL_MANAGER_DTL
							    (
								    	 TENANT_ID                          ,COMPANY_CODE                        ,ORG_TYPE_CODE
										,ORG_CODE                           ,VENDOR_POOL_CODE                    ,VENDOR_POOL_PERSON_EMPNO
										,VENDOR_POOL_PERSON_ROLE_TEXT       ,VENDOR_POOL_MAPPING_USE_FLAG        ,REGISTER_REASON				
										,APPROVAL_NUMBER                    ,LOCAL_CREATE_DTM                    ,CREATE_USER_ID         		
										,SYSTEM_CREATE_DTM                  ,LOCAL_UPDATE_DTM                    ,UPDATE_USER_ID
										,SYSTEM_UPDATE_DTM
							    ) VALUES (
							    		 loop_man.TENANT_ID
							    		,loop_man.COMPANY_CODE
							    		,loop_man.ORG_TYPE_CODE
							    		,loop_man.ORG_CODE
							    		,loop_man.VENDOR_POOL_CODE
							    		,loop_man.VENDOR_POOL_PERSON_EMPNO
							    		,TRIM( ' ' FROM loop_man.VENDOR_POOL_PERSON_ROLE_TEXT )
										,TRUE
										,TRIM( ' ' FROM loop_man.REGISTER_REASON )
										,loop_man.APPROVAL_NUMBER
										,NOW()
										,I_USER_ID
										,NOW()
										,NOW()
										,I_USER_ID
										,NOW()
							    )
							    ;
							END IF;
						    
						    SELECT ::ROWCOUNT into V_CUD_COUNT FROM DUMMY;
						    
						    IF V_CUD_COUNT != 1 THEN
						        SIGNAL invalid_crud_info SET MESSAGE_TEXT = 'EPG00011'||'-'||'Supplier Update(Insert) Error.['||V_MANAGER_LOOP_INDEX||']';
						    END IF;
					    ELSE
							IF V_MANAGER_EXIST_CNT != 1 THEN
							    SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00020'||'-'||'Manager Error.['||V_MANAGER_LOOP_INDEX||']';
							ELSE
						    
								UPDATE  PG_VP_VENDOR_POOL_MANAGER_DTL MST
								SET     VENDOR_POOL_MAPPING_USE_FLAG		= FALSE
									   ,LOCAL_UPDATE_DTM       				= NOW()
									   ,UPDATE_USER_ID         				= I_USER_ID
									   ,SYSTEM_UPDATE_DTM      				= NOW()
								WHERE   TENANT_ID           			= loop_man.TENANT_ID
								AND     COMPANY_CODE    			    = loop_man.COMPANY_CODE
								AND     ORG_TYPE_CODE   			    = loop_man.ORG_TYPE_CODE
								AND     ORG_CODE            			= loop_man.ORG_CODE
								AND     VENDOR_POOL_CODE    			= loop_man.VENDOR_POOL_CODE
								AND     VENDOR_POOL_PERSON_EMPNO        = loop_man.VENDOR_POOL_PERSON_EMPNO
							    ;
						    END IF;
						    
						    SELECT ::ROWCOUNT into V_CUD_COUNT FROM DUMMY;
						    
						    IF V_CUD_COUNT != 1 THEN
						        SIGNAL invalid_crud_info SET MESSAGE_TEXT = 'EPG00011'||'-'||'Supplier Update(Insert) Error.['||V_MANAGER_LOOP_INDEX||']';
						    END IF;
					    END IF;
					END FOR;
					/********************************************************
					[Manager 로직] 종료(Master 정보의 Update 시에만 가능함)
					*******************************************************/
		    	
		    	--UPDATE이고 기존 데이터가 존재지 않는 경우 에러
		    	ELSE 
		    	    SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00013'||'-'||'Master Error.';
		    	END IF;
		    
		    /***************************************************************************************
			[마스터 생성 프로세스]
			***************************************************************************************/
		    ELSEIF TRIM( ' ' FROM loop_mst.CRUD_TYPE_CODE )  =  'C' THEN
		        --기존 데이터가 존재지 않는 경우 마스터만 생성
		    	IF V_MASTER_EXIST_CNT = 0 THEN 
		    	    
		    	    SELECT  COUNT(*)
					INTO    V_MASTER_EXIST_DELETE_CNT
					FROM    PG_VP_VENDOR_POOL_MST A
					WHERE   A.TENANT_ID            = loop_mst.TENANT_ID
				    AND     A.COMPANY_CODE         = loop_mst.COMPANY_CODE
				    AND     A.ORG_TYPE_CODE        = loop_mst.ORG_TYPE_CODE
				    AND     A.ORG_CODE             = loop_mst.ORG_CODE
				    AND     A.VENDOR_POOL_CODE     = loop_mst.VENDOR_POOL_CODE
				    AND     A.VENDOR_POOL_USE_FLAG = FALSE;
				    
				    IF V_MASTER_EXIST_DELETE_CNT > 0 THEN 
				    	SIGNAL invalid_crud_info SET MESSAGE_TEXT = 'EPG00019'||'-'||'Master Error(EXIST DELETED MASTER DATA. PLEASE CHECK AGAIN).';
				    END IF;
		    	    
		    	    INSERT INTO PG_VP_VENDOR_POOL_MST MST(
		    	    	 TENANT_ID                           ,COMPANY_CODE                          ,ORG_TYPE_CODE
						,ORG_CODE                            ,VENDOR_POOL_CODE                      ,VENDOR_POOL_LOCAL_NAME
						,VENDOR_POOL_ENGLISH_NAME            ,REPR_DEPARTMENT_CODE                  ,OPERATION_UNIT_CODE 
						,INP_TYPE_CODE                       ,MTLMOB_BASE_CODE                      ,REGULAR_EVALUATION_FLAG
						,INDUSTRY_CLASS_CODE                 ,SD_EXCEPTION_FLAG                     ,VENDOR_POOL_APPLY_EXCEPTION_FLAG
						,DOMESTIC_NET_PRICE_DIFF_RATE        ,DOM_OVERSEA_NETPRICE_DIFF_RATE        ,EQUIPMENT_GRADE_CODE 			
						,EQUIPMENT_TYPE_CODE                 ,VENDOR_POOL_USE_FLAG                  ,VENDOR_POOL_DESC 				
						,VENDOR_POOL_HISTORY_DESC            ,PARENT_VENDOR_POOL_CODE               ,LEAF_FLAG 				 		
						,MAKER_MATERIAL_CODE_MNGT_FLAG       ,LEVEL_NUMBER                          ,DISPLAY_SEQUENCE 		 		
						,REGISTER_REASON                     ,APPROVAL_NUMBER                       ,LOCAL_CREATE_DTM       		
						,CREATE_USER_ID                      ,SYSTEM_CREATE_DTM                     ,LOCAL_UPDATE_DTM       		
						,UPDATE_USER_ID                      ,SYSTEM_UPDATE_DTM
		    	    ) VALUES (
		    	    	 loop_mst.TENANT_ID
						,loop_mst.COMPANY_CODE
						,loop_mst.ORG_TYPE_CODE
						,loop_mst.ORG_CODE
						,loop_mst.VENDOR_POOL_CODE
						,TRIM( ' ' FROM loop_mst.VENDOR_POOL_LOCAL_NAME )
						,TRIM( ' ' FROM loop_mst.VENDOR_POOL_ENGLISH_NAME )
						,TRIM( ' ' FROM loop_mst.REPR_DEPARTMENT_CODE )			   
						,TRIM( ' ' FROM loop_mst.OPERATION_UNIT_CODE )
						,TRIM( ' ' FROM loop_mst.INP_TYPE_CODE )
						,TRIM( ' ' FROM loop_mst.MTLMOB_BASE_CODE )
						,IFNULL( loop_mst.REGULAR_EVALUATION_FLAG, TRUE)
						,TRIM( ' ' FROM loop_mst.INDUSTRY_CLASS_CODE )
						,IFNULL( loop_mst.SD_EXCEPTION_FLAG, FALSE)
						,IFNULL( loop_mst.VENDOR_POOL_APPLY_EXCEPTION_FLAG, FALSE)
						,loop_mst.DOMESTIC_NET_PRICE_DIFF_RATE
						,loop_mst.DOM_OVERSEA_NETPRICE_DIFF_RATE
						,TRIM( ' ' FROM loop_mst.EQUIPMENT_GRADE_CODE )
						,TRIM( ' ' FROM loop_mst.EQUIPMENT_TYPE_CODE )
						,IFNULL( loop_mst.VENDOR_POOL_USE_FLAG, TRUE)
						,TRIM( ' ' FROM loop_mst.VENDOR_POOL_DESC )
						,TRIM( ' ' FROM loop_mst.VENDOR_POOL_HISTORY_DESC )
						,TRIM( ' ' FROM loop_mst.PARENT_VENDOR_POOL_CODE )
						,IFNULL( loop_mst.LEAF_FLAG, FALSE)
						,IFNULL( loop_mst.MAKER_MATERIAL_CODE_MNGT_FLAG, FALSE)
						,loop_mst.LEVEL_NUMBER 
						,loop_mst.DISPLAY_SEQUENCE 
						,TRIM( ' ' FROM loop_mst.REGISTER_REASON )
						,TRIM( ' ' FROM loop_mst.APPROVAL_NUMBER )			   
						,NOW()
						,I_USER_ID
						,NOW()
						,NOW()
						,I_USER_ID
						,NOW()
		    	    )
		    	    ;
		    	    
				    SELECT ::ROWCOUNT into V_CUD_COUNT FROM DUMMY;
						    
				    IF V_CUD_COUNT != 1 THEN
				        SIGNAL invalid_crud_info SET MESSAGE_TEXT = 'EPG00011'||'-'||'Master Insert Error.';
				    END IF;
				--기 데이터가 존재하는 경우 마스터 정보 등록 불가
				ELSE
				    SIGNAL invalid_crud_info SET MESSAGE_TEXT = 'EPG00019'||'-'||'Master Error.';
		    	END IF;
		    	
		    /***************************************************************************************
			[마스터 삭제 프로세스]
			***************************************************************************************/
		    ELSEIF TRIM( ' ' FROM loop_mst.CRUD_TYPE_CODE )  =  'D' THEN
		         --기존 데이터가 존재하는 경우 수정(삭제)
		    	IF V_MASTER_EXIST_CNT = 1 THEN
		    		
					SELECT	COUNT(*)
					INTO    V_SUPPLIER_EXIST_CNT_FOR_DELETE_MASTER
					FROM	PG_VP_VENDOR_POOL_SUPPLIER_DTL
					WHERE   TENANT_ID       				= loop_mst.TENANT_ID
					AND     COMPANY_CODE        			= loop_mst.COMPANY_CODE
					AND     ORG_TYPE_CODE       			= loop_mst.ORG_TYPE_CODE
					AND     ORG_CODE            			= loop_mst.ORG_CODE
					AND     VENDOR_POOL_CODE    			= loop_mst.VENDOR_POOL_CODE
					AND     VENDOR_POOL_MAPPING_USE_FLAG	= TRUE
					;
					
					IF V_SUPPLIER_EXIST_CNT_FOR_DELETE_MASTER > 0 THEN
						SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00014'||'-'||'Master(Supplier) Error.[S CNT]:'||V_SUPPLIER_EXIST_CNT_FOR_DELETE_MASTER;
					END IF;
					
					--SUPPLIER 승인 대기인 데이터가 있는 경우 VP마스터의 정보를 삭제할 수 없다.
					IF V_SUPPLIER_TEMP_CNT > 0 THEN
						SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00014'||'-'||'Master(Supplier) Error.[S CNT]:'||V_SUPPLIER_EXIST_CNT_FOR_DELETE_MASTER;
					END IF;
					
					SELECT	COUNT(*)
					INTO    V_ITEM_EXIST_CNT_FOR_DELETE_MASTER
					FROM	PG_VP_VENDOR_POOL_ITEM_DTL
					WHERE   TENANT_ID       				= loop_mst.TENANT_ID
					AND     COMPANY_CODE        			= loop_mst.COMPANY_CODE
					AND     ORG_TYPE_CODE       			= loop_mst.ORG_TYPE_CODE
					AND     ORG_CODE            			= loop_mst.ORG_CODE
					AND     VENDOR_POOL_CODE    			= loop_mst.VENDOR_POOL_CODE
					AND     VENDOR_POOL_MAPPING_USE_FLAG	= TRUE
					;
					
					IF V_ITEM_EXIST_CNT_FOR_DELETE_MASTER > 0 THEN
						SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00014'||'-'||'Master(Item) Error.[S CNT]:'||V_SUPPLIER_EXIST_CNT_FOR_DELETE_MASTER||',[I CNT]:'||V_ITEM_EXIST_CNT_FOR_DELETE_MASTER;
					END IF;
					
					SELECT	COUNT(*)
					INTO    V_MANAGER_EXIST_CNT_FOR_DELETE_MASTER
					FROM	PG_VP_VENDOR_POOL_MANAGER_DTL
					WHERE   TENANT_ID       				= loop_mst.TENANT_ID
					AND     COMPANY_CODE        			= loop_mst.COMPANY_CODE
					AND     ORG_TYPE_CODE       			= loop_mst.ORG_TYPE_CODE
					AND     ORG_CODE            			= loop_mst.ORG_CODE
					AND     VENDOR_POOL_CODE    			= loop_mst.VENDOR_POOL_CODE
					AND     VENDOR_POOL_MAPPING_USE_FLAG	= TRUE
					;
					
					IF V_MANAGER_EXIST_CNT_FOR_DELETE_MASTER  > 0 THEN
						SIGNAL invalid_where_info SET MESSAGE_TEXT = 'EPG00014'||'-'||'Master(Manager) Error.[S CNT]:'||V_SUPPLIER_EXIST_CNT_FOR_DELETE_MASTER||',[I CNT]:'||V_ITEM_EXIST_CNT_FOR_DELETE_MASTER||',[M CNT]:'||V_MANAGER_EXIST_CNT_FOR_DELETE_MASTER;
					END IF;
					
		    	
		    	    UPDATE  PG_VP_VENDOR_POOL_MST MST
					SET     VENDOR_POOL_USE_FLAG 				= FALSE
						   ,LOCAL_UPDATE_DTM       				= NOW()
						   ,UPDATE_USER_ID         				= I_USER_ID
						   ,SYSTEM_UPDATE_DTM      				= NOW()
					WHERE   TENANT_ID           = loop_mst.TENANT_ID
					AND     COMPANY_CODE        = loop_mst.COMPANY_CODE
					AND     ORG_TYPE_CODE       = loop_mst.ORG_TYPE_CODE
					AND     ORG_CODE            = loop_mst.ORG_CODE
					AND     VENDOR_POOL_CODE    = loop_mst.VENDOR_POOL_CODE
				    ;
				    
				    SELECT ::ROWCOUNT into V_CUD_COUNT FROM DUMMY;
		    
				    IF V_CUD_COUNT != 1 THEN
				        SIGNAL invalid_crud_info SET MESSAGE_TEXT = 'EPG00011'||'-'||'Master Delete Error.';
				    	--raise_application_error(-20001, 'PG_VP_VENDOR_POOL_MST UPDATE ERROR '|| loop_mst.VENDOR_POOL_CODE||' ['||::ROWCOUNT||']');
				    END IF;
				 --조회 조건에 해당하는 데이터 존재하지 않는 경우(삭제 시)   
				ELSE
					SIGNAL invalid_crud_info SET MESSAGE_TEXT = 'EPG00010'||'-'||'Master Error.';
				END IF;
		    END IF;
	    END IF;
	END FOR;
	/********************************************************
	[BUSINESS 로직] 종료
	*******************************************************/
    
    O_MSG = SELECT 'OK' RETURN_CODE, 'NPG00023' RETURN_MSG FROM DUMMY;
END;