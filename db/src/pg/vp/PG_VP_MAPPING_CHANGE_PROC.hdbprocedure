PROCEDURE PG_VP_MAPPING_CHANGE_PROC (
  IN I_MST PG_VP_VENDOR_POOL_MST_TYPE
 ,IN I_SUP PG_VP_VENDOR_POOL_SUPPLIER_TYPE
 ,IN I_ITM PG_VP_VENDOR_POOL_ITEM_TYPE
 ,IN I_MAN PG_VP_VENDOR_POOL_MANAGER_TYPE
 ,IN I_USER_ID NVARCHAR(255)
 ,IN I_USER_NO NVARCHAR(255)
 ,OUT O_MSG PG_VP_VENDOR_POOL_PROC_OUT_TYPE
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 

AS
BEGIN
    DECLARE V_SUPPLIER_CNT INT;
    DECLARE V_TENANT_ID NVARCHAR(5);
    DECLARE V_COMPANY_CODE NVARCHAR(10);
    DECLARE V_ORG_TYPE_CODE NVARCHAR(2);
    DECLARE V_ORG_CODE NVARCHAR(10);
    DECLARE V_VENDOR_POOL_CODE NVARCHAR(20);
    DECLARE V_LOOP_INDEX INT := 1;
    DECLARE V_LOOP_TEST INT := 1;
    DECLARE CURSOR l_mst_cursor FOR
        SELECT TENANT_ID, COMPANY_CODE,  ORG_TYPE_CODE, ORG_CODE, VENDOR_POOL_CODE, REPR_DEPARTMENT_CODE
        FROM :I_MST
        ORDER BY TENANT_ID, COMPANY_CODE,  ORG_TYPE_CODE, ORG_CODE, VENDOR_POOL_CODE;
    
    DECLARE  var_commit  NVARCHAR(100) := 'COMMIT';
	DECLARE var_rollback NVARCHAR(100) := 'ROLLBACK';
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		EXEC (:var_rollback);
		O_MSG = SELECT  'NG' RETURN_CODE, ::SQL_ERROR_CODE||'-'||::SQL_ERROR_MESSAGE RETURN_MSG FROM  DUMMY;
	END;
	
	FOR loop_mst AS l_mst_cursor DO
		UPDATE  PG_VP_VENDOR_POOL_MST MST
	    SET     REPR_DEPARTMENT_CODE    = loop_mst.REPR_DEPARTMENT_CODE
	            ,LOCAL_UPDATE_DTM       = NOW()
	            ,UPDATE_USER_ID         = I_USER_ID
	            ,SYSTEM_UPDATE_DTM      = NOW()
	    WHERE   TENANT_ID           = loop_mst.TENANT_ID
	    AND     COMPANY_CODE        = loop_mst.COMPANY_CODE
	    AND     ORG_TYPE_CODE       = loop_mst.ORG_TYPE_CODE
	    AND     ORG_CODE            = loop_mst.ORG_CODE
	    AND     VENDOR_POOL_CODE    = loop_mst.VENDOR_POOL_CODE
	    ;
	END FOR;
    
    EXEC (:var_commit);
    O_MSG = SELECT 'OK' RETURN_CODE, 'Successfully Saved.' RETURN_MSG FROM DUMMY;
END;