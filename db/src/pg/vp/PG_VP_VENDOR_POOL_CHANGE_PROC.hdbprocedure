PROCEDURE PG_VP_VENDOR_POOL_CHANGE_PROC (
  IN I_MST PG_VP_VENDOR_POOL_MST_TYPE
 ,IN I_SUP PG_VP_VENDOR_POOL_SUPPLIER_TYPE
 ,IN I_ITM PG_VP_VENDOR_POOL_ITEM_TYPE
 ,IN I_MAN PG_VP_VENDOR_POOL_MANAGER_TYPE
 ,IN I_USER_ID NVARCHAR(255)
 ,IN I_USER_NO NVARCHAR(255)
 ,OUT O_MSG PG_VP_VENDOR_POOL_PROC_OUT_TYPE
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 

AS
BEGIN
    DECLARE V_SUPPLIER_CNT INT;
    DECLARE V_TENANT_ID NVARCHAR(5);
    DECLARE V_COMPANY_CODE NVARCHAR(10);
    DECLARE V_ORG_TYPE_CODE NVARCHAR(2);
    DECLARE V_ORG_CODE NVARCHAR(10);
    DECLARE V_VENDOR_POOL_CODE NVARCHAR(20);
    
    DECLARE  var_commit  NVARCHAR(100) := 'COMMIT';
	DECLARE var_rollback NVARCHAR(100) := 'ROLLBACK';
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		EXEC (:var_rollback);
		O_MSG = SELECT  'NG' RETURN_CODE, ::SQL_ERROR_CODE||'-'||::SQL_ERROR_MESSAGE RETURN_MSG FROM  DUMMY;
	END;
    
    SELECT TOP 1
           TENANT_ID,
           COMPANY_CODE,
           ORG_TYPE_CODE,
           ORG_CODE,
           VENDOR_POOL_CODE
    INTO   V_TENANT_ID,
           V_COMPANY_CODE,
           V_ORG_TYPE_CODE,
           V_ORG_CODE,
           V_VENDOR_POOL_CODE
    FROM   :I_MST
    ;

	UPDATE PG_VP_VENDOR_POOL_MST MST
	set    (VENDOR_POOL_LOCAL_NAME
           ,VENDOR_POOL_ENGLISH_NAME
           ,REPR_DEPARTMENT_CODE
           ,OPERATION_UNIT_CODE
           ,INP_TYPE_CODE
           ,MTLMOB_BASE_CODE
           ,REGULAR_EVALUATION_FLAG
           ,INDUSTRY_CLASS_CODE
           ,SD_EXCEPTION_FLAG
           ,VENDOR_POOL_APPLY_EXCEPTION_FLAG
           ,DOMESTIC_NET_PRICE_DIFF_RATE
           ,EQUIPMENT_GRADE_CODE
           ,EQUIPMENT_TYPE_CODE
           ,VENDOR_POOL_USE_FLAG
           ,VENDOR_POOL_DESC
           ,VENDOR_POOL_HISTORY_DESC) =
           (SELECT VENDOR_POOL_LOCAL_NAME
		          ,VENDOR_POOL_ENGLISH_NAME
		          ,REPR_DEPARTMENT_CODE
		          ,OPERATION_UNIT_CODE
		          ,INP_TYPE_CODE
		          ,MTLMOB_BASE_CODE
		          ,REGULAR_EVALUATION_FLAG
		          ,INDUSTRY_CLASS_CODE
		          ,SD_EXCEPTION_FLAG
		          ,VENDOR_POOL_APPLY_EXCEPTION_FLAG
		          ,DOMESTIC_NET_PRICE_DIFF_RATE
		          ,EQUIPMENT_GRADE_CODE
		          ,EQUIPMENT_TYPE_CODE
		          ,IFNULL(VENDOR_POOL_USE_FLAG, TRUE)
		          ,VENDOR_POOL_DESC
		          ,VENDOR_POOL_HISTORY_DESC
		    FROM   :I_MST
		    WHERE  TENANT_ID = MST.TENANT_ID
            AND    COMPANY_CODE = MST.COMPANY_CODE
            AND    ORG_TYPE_CODE = MST.ORG_TYPE_CODE
            AND    ORG_CODE = MST.ORG_CODE
            AND    VENDOR_POOL_CODE = MST.VENDOR_POOL_CODE)
		   ,LOCAL_UPDATE_DTM = NOW()
		   ,UPDATE_USER_ID = I_USER_ID
		   ,SYSTEM_UPDATE_DTM = NOW()
    WHERE  EXISTS (SELECT 1
                   FROM   :I_MST
                   WHERE  TENANT_ID = MST.TENANT_ID
		           AND    COMPANY_CODE = MST.COMPANY_CODE
		           AND    ORG_TYPE_CODE = MST.ORG_TYPE_CODE
		           AND    ORG_CODE = MST.ORG_CODE
		           AND    VENDOR_POOL_CODE = MST.VENDOR_POOL_CODE
		           AND    (VENDOR_POOL_LOCAL_NAME <> MST.VENDOR_POOL_LOCAL_NAME  OR
		                   VENDOR_POOL_ENGLISH_NAME <> MST.VENDOR_POOL_ENGLISH_NAME OR
		                   REPR_DEPARTMENT_CODE <> MST.REPR_DEPARTMENT_CODE OR
				           OPERATION_UNIT_CODE <> MST.OPERATION_UNIT_CODE OR
				           INP_TYPE_CODE <> MST.INP_TYPE_CODE OR
				           MTLMOB_BASE_CODE <> MST.MTLMOB_BASE_CODE OR
				           REGULAR_EVALUATION_FLAG <> MST.REGULAR_EVALUATION_FLAG OR
				           INDUSTRY_CLASS_CODE <> MST.INDUSTRY_CLASS_CODE OR
				           SD_EXCEPTION_FLAG <> MST.SD_EXCEPTION_FLAG OR
				           VENDOR_POOL_APPLY_EXCEPTION_FLAG <> MST.VENDOR_POOL_APPLY_EXCEPTION_FLAG OR
				           DOMESTIC_NET_PRICE_DIFF_RATE <> MST.DOMESTIC_NET_PRICE_DIFF_RATE OR 
				           DOM_OVERSEA_NETPRICE_DIFF_RATE <> MST.DOM_OVERSEA_NETPRICE_DIFF_RATE OR
				           EQUIPMENT_GRADE_CODE <> MST.EQUIPMENT_GRADE_CODE OR
				           EQUIPMENT_TYPE_CODE <> MST.EQUIPMENT_TYPE_CODE OR
				           IFNULL(VENDOR_POOL_USE_FLAG, TRUE) <> IFNULL(MST.VENDOR_POOL_USE_FLAG, TRUE) OR
				           VENDOR_POOL_DESC <> MST.VENDOR_POOL_DESC OR
				           VENDOR_POOL_HISTORY_DESC <> MST.VENDOR_POOL_HISTORY_DESC OR
				           PARENT_VENDOR_POOL_CODE <> MST.PARENT_VENDOR_POOL_CODE))
    ;
    
    SELECT COUNT(1)
    INTO   V_SUPPLIER_CNT 
    FROM   DUMMY
    WHERE  EXISTS (SELECT SUPPLIER_CODE,
                          SUPPLIER_BASE_PORTION_RATE
    	           FROM   :I_SUP
    	           MINUS
    	           SELECT SUPPLIER_CODE,
    	                  SUPPLIER_BASE_PORTION_RATE
    	           FROM   PG_VP_VENDOR_POOL_SUPPLIER_DTL
    	           WHERE  TENANT_ID = :V_TENANT_ID
    	           AND    COMPANY_CODE = :V_COMPANY_CODE
    	           AND    ORG_TYPE_CODE = :V_ORG_TYPE_CODE
    	           AND    ORG_CODE = :V_ORG_CODE
    	           AND    VENDOR_POOL_CODE = :V_VENDOR_POOL_CODE
    	           UNION ALL
    	           SELECT SUPPLIER_CODE,
    	                  SUPPLIER_BASE_PORTION_RATE
    	           FROM   PG_VP_VENDOR_POOL_SUPPLIER_DTL
    	           WHERE  TENANT_ID = :V_TENANT_ID
    	           AND    COMPANY_CODE = :V_COMPANY_CODE
    	           AND    ORG_TYPE_CODE = :V_ORG_TYPE_CODE
    	           AND    ORG_CODE = :V_ORG_CODE
    	           AND    VENDOR_POOL_CODE = :V_VENDOR_POOL_CODE
    	           MINUS
    	           SELECT SUPPLIER_CODE,
                          SUPPLIER_BASE_PORTION_RATE
    	           FROM   :I_SUP)
    ;

    IF :V_SUPPLIER_CNT > 0 THEN
        INSERT INTO PG_VP_VENDOR_POOL_SUPPLIER_TMP
            (TENANT_ID
            ,COMPANY_CODE
            ,ORG_TYPE_CODE
            ,ORG_CODE
            ,VENDOR_POOL_CODE
            ,SUPPLIER_CODE
            ,CHANGER_EMPNO
            ,BEFORE_SUPPLIER_CODE
            ,SUPEVAL_TARGET_FLAG
            ,SUPPLIER_OP_PLAN_REVIEW_FLAG
            ,SUPEVAL_CONTROL_FLAG
            ,SUPEVAL_CONTROL_START_DATE
            ,SUPEVAL_CONTROL_END_DATE
            ,SUPEVAL_RESTRICT_START_DATE
            ,SUPEVAL_RESTRICT_END_DATE
            ,INP_CODE
            ,SUPPLIER_RM_CONTROL_FLAG
            ,SUPPLIER_BASE_PORTION_RATE
            ,APPROVAL_NUMBER
            ,LOCAL_CREATE_DTM
            ,LOCAL_UPDATE_DTM
            ,CREATE_USER_ID
            ,UPDATE_USER_ID
            ,SYSTEM_CREATE_DTM
            ,SYSTEM_UPDATE_DTM)
        SELECT TENANT_ID
              ,COMPANY_CODE
              ,ORG_TYPE_CODE
              ,ORG_CODE
              ,VENDOR_POOL_CODE
              ,SUPPLIER_CODE
              ,I_USER_NO CHANGER_EMPNO
              ,NULL BEFORE_SUPPLIER_CODE
              ,SUPEVAL_TARGET_FLAG
              ,SUPPLIER_OP_PLAN_REVIEW_FLAG
              ,SUPEVAL_CONTROL_FLAG
              ,SUPEVAL_CONTROL_START_DATE
              ,SUPEVAL_CONTROL_END_DATE
              ,SUPEVAL_RESTRICT_START_DATE
              ,SUPEVAL_RESTRICT_END_DATE
              ,INP_CODE
              ,SUPPLIER_RM_CONTROL_FLAG
              ,SUPPLIER_BASE_PORTION_RATE
              ,NULL APPROVAL_NUMBER
              ,NOW() LOCAL_CREATE_DTM
              ,NOW() LOCAL_UPDATE_DTM
              ,I_USER_ID CREATE_USER_ID
              ,I_USER_ID UPDATE_USER_ID
              ,NOW() SYSTEM_CREATE_DTM
              ,NOW() SYSTEM_UPDATE_DTM
        FROM   :I_SUP
        ;
  
    END IF;
    
    MERGE INTO PG_VP_VENDOR_POOL_ITEM_DTL AS ITM
	USING :I_ITM AS ITM1
	ON	  ITM.TENANT_ID = ITM1.TENANT_ID
	AND   ITM.COMPANY_CODE = ITM1.COMPANY_CODE
	AND   ITM.ORG_TYPE_CODE = ITM1.ORG_TYPE_CODE
	AND   ITM.ORG_CODE = ITM1.ORG_CODE
	AND   ITM.VENDOR_POOL_CODE = ITM1.VENDOR_POOL_CODE
	AND   ITM.MATERIAL_CODE = ITM1.MATERIAL_CODE
	WHEN NOT MATCHED THEN
		INSERT
		    (TENANT_ID,
		     COMPANY_CODE,
		     ORG_TYPE_CODE,
		     ORG_CODE,
		     VENDOR_POOL_CODE,
		     MATERIAL_CODE,
		     VENDOR_POOL_MAPPING_USE_FLAG,
		     REGISTER_REASON,
		     APPROVAL_NUMBER,
		     LOCAL_CREATE_DTM,
		     LOCAL_UPDATE_DTM,
		     CREATE_USER_ID,
		     UPDATE_USER_ID,
		     SYSTEM_CREATE_DTM,
		     SYSTEM_UPDATE_DTM)
		VALUES
		    (ITM1.TENANT_ID,
			 ITM1.COMPANY_CODE,
			 ITM1.ORG_TYPE_CODE,
			 ITM1.ORG_CODE,
			 ITM1.VENDOR_POOL_CODE,
			 ITM1.MATERIAL_CODE,
			 TRUE,
			 'Register',
			 NULL,
			 NOW(),
			 NOW(),
			 I_USER_ID,
			 I_USER_ID,
			 NOW(),
			 NOW())
	;
	
	UPDATE PG_VP_VENDOR_POOL_ITEM_DTL ITM
	SET    VENDOR_POOL_MAPPING_USE_FLAG = FALSE,
	       LOCAL_UPDATE_DTM = NOW(),
	       UPDATE_USER_ID = I_USER_ID,
	       SYSTEM_UPDATE_DTM = NOW()
	WHERE  NOT EXISTS (SELECT 1
		               FROM   :I_SUP
		               WHERE  TENANT_ID = ITM.TENANT_ID
		               AND    COMPANY_CODE = ITM.COMPANY_CODE
		               AND    ORG_TYPE_CODE = ITM.ORG_TYPE_CODE
		               AND    ORG_CODE = ITM.ORG_CODE
		               AND    VENDOR_POOL_CODE = ITM.VENDOR_POOL_CODE
		               AND    MATERIAL_CODE = ITM.MATERIAL_CODE)
    ;
    
    MERGE INTO PG_VP_VENDOR_POOL_MANAGER_DTL AS MAN
	USING :I_MAN AS MAN1
	ON	  MAN.TENANT_ID = MAN1.TENANT_ID
	AND   MAN.COMPANY_CODE = MAN1.COMPANY_CODE
	AND   MAN.ORG_TYPE_CODE = MAN1.ORG_TYPE_CODE
	AND   MAN.ORG_CODE = MAN1.ORG_CODE
	AND   MAN.VENDOR_POOL_CODE = MAN1.VENDOR_POOL_CODE
	AND   MAN.VENDOR_POOL_PERSON_EMPNO = MAN1.VENDOR_POOL_PERSON_EMPNO
	WHEN NOT MATCHED THEN
		INSERT
		    (TENANT_ID,
		     COMPANY_CODE,
		     ORG_TYPE_CODE,
		     ORG_CODE,
		     VENDOR_POOL_CODE,
		     VENDOR_POOL_PERSON_EMPNO,
		     VENDOR_POOL_PERSON_ROLE_TEXT,
		     VENDOR_POOL_MAPPING_USE_FLAG,
		     REGISTER_REASON,
		     APPROVAL_NUMBER,
		     LOCAL_CREATE_DTM,
		     LOCAL_UPDATE_DTM,
		     CREATE_USER_ID,
		     UPDATE_USER_ID,
		     SYSTEM_CREATE_DTM,
		     SYSTEM_UPDATE_DTM)
		VALUES
		    (MAN1.TENANT_ID,
			 MAN1.COMPANY_CODE,
			 MAN1.ORG_TYPE_CODE,
			 MAN1.ORG_CODE,
			 MAN1.VENDOR_POOL_CODE,
			 MAN1.VENDOR_POOL_PERSON_EMPNO,
			 MAN1.VENDOR_POOL_PERSON_ROLE_TEXT,
			 TRUE,
			 'Register',
			 NULL,
			 NOW(),
			 NOW(),
			 I_USER_ID,
			 I_USER_ID,
			 NOW(),
			 NOW())
	;
	
	UPDATE PG_VP_VENDOR_POOL_MANAGER_DTL MAN
	SET    VENDOR_POOL_PERSON_ROLE_TEXT = (SELECT VENDOR_POOL_PERSON_ROLE_TEXT
		                                   FROM   :I_MAN
		                                   WHERE  TENANT_ID = MAN.TENANT_ID
		                                   AND    COMPANY_CODE = MAN.COMPANY_CODE
		                                   AND    ORG_TYPE_CODE = MAN.ORG_TYPE_CODE
		                                   AND    ORG_CODE = MAN.ORG_CODE
		                                   AND    VENDOR_POOL_CODE = MAN.VENDOR_POOL_CODE
		                                   AND    VENDOR_POOL_PERSON_EMPNO = MAN.VENDOR_POOL_PERSON_EMPNO),
		   LOCAL_UPDATE_DTM = NOW(),
	       UPDATE_USER_ID = I_USER_ID,
	       SYSTEM_UPDATE_DTM = NOW()
    WHERE  EXISTS (SELECT 1
    	           FROM   :I_MAN
    	           WHERE  TENANT_ID = MAN.TENANT_ID
		           AND    COMPANY_CODE = MAN.COMPANY_CODE
		           AND    ORG_TYPE_CODE = MAN.ORG_TYPE_CODE
		           AND    ORG_CODE = MAN.ORG_CODE
		           AND    VENDOR_POOL_CODE = MAN.VENDOR_POOL_CODE
		           AND    VENDOR_POOL_PERSON_EMPNO = MAN.VENDOR_POOL_PERSON_EMPNO
		           AND    VENDOR_POOL_PERSON_ROLE_TEXT <> MAN.VENDOR_POOL_PERSON_ROLE_TEXT)
	;
	
	UPDATE PG_VP_VENDOR_POOL_MANAGER_DTL MAN
	SET    VENDOR_POOL_MAPPING_USE_FLAG = FALSE,
	       LOCAL_UPDATE_DTM = NOW(),
	       UPDATE_USER_ID = I_USER_ID,
	       SYSTEM_UPDATE_DTM = NOW()
	WHERE  NOT EXISTS (SELECT 1
		               FROM   :I_MAN
		               WHERE  TENANT_ID = MAN.TENANT_ID
		               AND    COMPANY_CODE = MAN.COMPANY_CODE
		               AND    ORG_TYPE_CODE = MAN.ORG_TYPE_CODE
		               AND    ORG_CODE = MAN.ORG_CODE
		               AND    VENDOR_POOL_CODE = MAN.VENDOR_POOL_CODE
		               AND    VENDOR_POOL_PERSON_EMPNO = MAN.VENDOR_POOL_PERSON_EMPNO)
    ;
    
    EXEC (:var_commit);
    O_MSG = SELECT 'OK' RETURN_CODE, 'Successfully Saved.' RETURN_MSG FROM DUMMY;
END;