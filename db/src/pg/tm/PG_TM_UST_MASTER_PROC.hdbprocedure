procedure pg_tm_ust_master_proc (
    in  i_tenant_id             nvarchar(5),
    in  i_table_master			table (
										tenant_id						nvarchar(5),
										scenario_number					bigint,
										monitoring_type_code			nvarchar(30),
										activate_flag					boolean,
										monitoring_purpose				blob,
										scenario_desc					blob,
										source_system_desc				blob,
										local_create_dtm				timestamp,
										local_update_dtm				timestamp,
										create_user_id					nvarchar(255),
										update_user_id					nvarchar(255),
										system_create_dtm				timestamp,
										system_update_dtm				timestamp
                                ),
	in	i_table_scenario		table (
										tenant_id						nvarchar(5),
										scenario_number					bigint,
										language_code					nvarchar(10),
										scenario_name					nvarchar(240),
										local_create_dtm				timestamp,
										local_update_dtm				timestamp,
										create_user_id					nvarchar(255),
										update_user_id					nvarchar(255),
										system_create_dtm				timestamp,
										system_update_dtm				timestamp
								),
    in	i_table_company			table (
										tenant_id						nvarchar(5),
										scenario_number					bigint,
										company_code					nvarchar(10),
										local_create_dtm				timestamp,
										local_update_dtm				timestamp,
										create_user_id					nvarchar(255),
										update_user_id					nvarchar(255),
										system_create_dtm				timestamp,
										system_update_dtm				timestamp
								),
	in	i_table_bizunit			table (
										tenant_id						nvarchar(5),
										scenario_number					bigint,
										bizunit_code					nvarchar(10),
										local_create_dtm				timestamp,
										local_update_dtm				timestamp,
										create_user_id					nvarchar(255),
										update_user_id					nvarchar(255),
										system_create_dtm				timestamp,
										system_update_dtm				timestamp
                                ),
	in	i_table_purchasing_type	table (
										tenant_id						nvarchar(5),
										scenario_number					bigint,
										monitoring_purchasing_type_code	nvarchar(30),
										language_code					nvarchar(10),
										monitoring_purchasing_type_name	nvarchar(240),
										local_create_dtm				timestamp,
										local_update_dtm				timestamp,
										create_user_id					nvarchar(255),
										update_user_id					nvarchar(255),
										system_create_dtm				timestamp,
										system_update_dtm				timestamp
								),
	in	i_table_type			table (
										tenant_id						nvarchar(5),
										scenario_number					bigint,
										monitoring_type_code			nvarchar(30),
										language_code					nvarchar(10),
										monitoring_type_name			nvarchar(240),
										local_create_dtm				timestamp,
										local_update_dtm				timestamp,
										create_user_id					nvarchar(255),
										update_user_id					nvarchar(255),
										system_create_dtm				timestamp,
										system_update_dtm				timestamp
								),
	in	i_table_manager			table (
										tenant_id						nvarchar(5),
										scenario_number					bigint,
										monitoring_manager_empno		nvarchar(30),
										monitoring_super_authority_flag	boolean,
										local_create_dtm				timestamp,
										local_update_dtm				timestamp,
										create_user_id					nvarchar(255),
										update_user_id					nvarchar(255),
										system_create_dtm				timestamp,
										system_update_dtm				timestamp
								),
	in	i_table_operation		table (
										tenant_id						nvarchar(5),
										scenario_number					bigint,
										monitoring_operation_mode_code	nvarchar(30),
										language_code					nvarchar(10),
										monitoring_operation_mode_name	nvarchar(240),
										local_create_dtm				timestamp,
										local_update_dtm				timestamp,
										create_user_id					nvarchar(255),
										update_user_id					nvarchar(255),
										system_create_dtm				timestamp,
										system_update_dtm				timestamp
								),
	out o_table_message			pg_tm_proc_out_type
)
language sqlscript
sql security invoker

as
begin

    declare lv_max_seq                      integer default 0;

    declare lv_sourcemaster_count           integer default 0;
    declare lv_sourcescenario_count         integer default 0;
    declare lv_sourcecompany_count          integer default 0;
    declare lv_sourcebizunit_count          integer default 0;
    declare lv_sourcepurchasingtype_count   integer default 0;
    declare lv_sourcetypecode_count         integer default 0;
    declare lv_sourcemanager_count          integer default 0;
    declare lv_sourceoperation_count        integer default 0;

    declare lv_tenant_id                    nvarchar(5) default '';
    declare lv_scenario_number              integer default 0;

    declare lv_loop_table_scenario          integer default 0;
    declare lv_loop_table_company           integer default 0;
    declare lv_loop_table_bizunit           integer default 0;
    declare lv_loop_table_purchasing_type   integer default 0;
    declare lv_loop_table_type              integer default 0;
    declare lv_loop_table_manager           integer default 0;
    declare lv_loop_table_operation         integer default 0;

-- rollback message
	declare exit handler for sqlexception
		begin
			rollback;
			o_table_message = select 'NG' as returncode, ::sql_error_code||'-'||::sql_error_message as returnmessage from dummy;
        end;

-- Max Sequence
    select  ifnull(max(scenario_number), 0) + 1 as max_scenario_number
    into    lv_max_seq
    from    pg_tm_master
    where   tenant_id = :i_tenant_id
    ;

-- tenant_id
    select  tenant_id
    into    lv_tenant_id
    from    :i_table_master
    ;

-- scenario_number
    select  ifnull(scenario_number, 0) as scenario_number
    into    lv_scenario_number
    from    :i_table_master
    ;

-- master table
	o_table_master =
		select
                ifnull(master.tenant_id, '')				as tenant_id,
				ifnull(master.scenario_number, lv_max_seq)	as scenario_number,
				ifnull(master.monitoring_type_code, '')		as monitoring_type_code,
				ifnull(master.activate_flag, true)			as activate_flag,
				ifnull(master.monitoring_purpose, '')		as monitoring_purpose,
				ifnull(master.scenario_desc, '')			as scenario_desc,
				ifnull(master.source_system_desc, '')		as source_system_desc,
				ifnull(master.local_create_dtm, '')			as local_create_dtm,
				ifnull(master.local_update_dtm, '')			as local_update_dtm,
				ifnull(master.create_user_id, '')			as create_user_id,
				ifnull(master.update_user_id, '')			as update_user_id,
				ifnull(master.system_create_dtm, '')		as system_create_dtm,
				ifnull(master.system_update_dtm, '')		as system_update_dtm
        from	:i_table_master master
    ;

    select  count(tenant_id)
    into    lv_sourcemaster_count
    from    :i_table_master
    where   tenant_id is not null
    ;

    if :lv_sourcemaster_count <= 0 then
        rollback;
	else
		merge into	pg_tm_master	as t_master_tab
			using	:o_table_master	as s_master_tab
			on		t_master_tab.tenant_id			= s_master_tab.tenant_id
			and		t_master_tab.scenario_number	= s_master_tab.scenario_number

		when matched then
			update set
				t_master_tab.monitoring_type_code	= s_master_tab.monitoring_type_code,
				t_master_tab.activate_flag			= s_master_tab.activate_flag,
				t_master_tab.monitoring_purpose		= s_master_tab.monitoring_purpose,
				t_master_tab.scenario_desc			= s_master_tab.scenario_desc,
				t_master_tab.source_system_desc		= s_master_tab.source_system_desc,
				t_master_tab.local_update_dtm		= current_timestamp,
				t_master_tab.update_user_id			= trim(session_context('APPLICATIONUSER')),
				t_master_tab.system_update_dtm		= current_timestamp

		when not matched then
			insert
			(
				tenant_id,
				scenario_number,
				monitoring_type_code,
				activate_flag,
				monitoring_purpose,
				scenario_desc,
				source_system_desc,
				local_create_dtm,
				local_update_dtm,
				create_user_id,
				update_user_id,
				system_create_dtm,
				system_update_dtm
			)
			values
			(
				s_master_tab.tenant_id,
				s_master_tab.scenario_number,
				s_master_tab.monitoring_type_code,
				s_master_tab.activate_flag,
				s_master_tab.monitoring_purpose,
				s_master_tab.scenario_desc,
				s_master_tab.source_system_desc,
				current_timestamp,
				current_timestamp,
				trim(session_context('APPLICATIONUSER')),
				trim(session_context('APPLICATIONUSER')),
				current_timestamp,
				current_timestamp
            )
        ;
	end if;

-- scenario table
	o_table_scenario =
		select
                ifnull(scenario.tenant_id, '')					as tenant_id,
				ifnull(scenario.scenario_number, lv_max_seq)	as scenario_number,
				ifnull(scenario.language_code, '')				as language_code,
				ifnull(scenario.scenario_name, '')				as scenario_name,
				ifnull(scenario.local_create_dtm, '')			as local_create_dtm,
				ifnull(scenario.local_update_dtm, '')			as local_update_dtm,
				ifnull(scenario.create_user_id, '')				as create_user_id,
				ifnull(scenario.update_user_id, '')				as update_user_id,
				ifnull(scenario.system_create_dtm, '')			as system_create_dtm,
				ifnull(scenario.system_update_dtm, '')			as system_update_dtm
		from	:i_table_scenario scenario
    ;

    t_table_scenario =
        select
                tenant_id,
                scenario_number,
                language_code
        from    pg_tm_scenario_number_lng
        where   tenant_id       = :lv_tenant_id
        and     scenario_number = :lv_scenario_number
    ;

    v_table_scenario =
        select
                row_number() over(order by t.tenant_id, t.scenario_number, t.language_code) as row_num,
                t.tenant_id,
                t.scenario_number,
                t.language_code
        from    :t_table_scenario as t
        left outer join :o_table_scenario as o
        on      t.tenant_id = o.tenant_id
        and     t.scenario_number = o.scenario_number
        and     t.language_code = o.language_code
        where   o.language_code is null
        order by
                t.tenant_id,
                t.scenario_number,
                t.language_code
    ;

    select  count(tenant_id)
    into    lv_sourcescenario_count
    from    :i_table_scenario
    where   tenant_id is not null
    ;

    if :lv_sourcescenario_count <= 0 then
        rollback;
    else

        if record_count(:v_table_scenario) <> 0 then

            for lv_loop_table_scenario in 1..record_count(:v_table_scenario) do

                delete from pg_tm_scenario_number_lng
		        where       tenant_id       = (select distinct tenant_id from :v_table_scenario)
		        and         scenario_number = (select distinct scenario_number from :v_table_scenario)
		        and         language_code   = (select language_code from :v_table_scenario where row_num = :lv_loop_table_scenario)
			    ;

            end for;

		end if;

		merge into	pg_tm_scenario_number_lng	as t_scenario_tab
			using	:o_table_scenario			as s_scenario_tab
			on		t_scenario_tab.tenant_id		= s_scenario_tab.tenant_id
            and		t_scenario_tab.scenario_number	= s_scenario_tab.scenario_number
            and     t_scenario_tab.language_code    = s_scenario_tab.language_code

		when matched then
			update set
				t_scenario_tab.scenario_name		= s_scenario_tab.scenario_name,
				t_scenario_tab.local_update_dtm		= current_timestamp,
				t_scenario_tab.update_user_id		= trim(session_context('APPLICATIONUSER')),
				t_scenario_tab.system_update_dtm	= current_timestamp

		when not matched then
			insert
			(
				tenant_id,
				scenario_number,
				language_code,
				scenario_name,
				local_create_dtm,
				local_update_dtm,
				create_user_id,
				update_user_id,
				system_create_dtm,
				system_update_dtm
			)
			values
			(
				s_scenario_tab.tenant_id,
				s_scenario_tab.scenario_number,
				s_scenario_tab.language_code,
				s_scenario_tab.scenario_name,
				current_timestamp,
				current_timestamp,
				trim(session_context('APPLICATIONUSER')),
				trim(session_context('APPLICATIONUSER')),
				current_timestamp,
				current_timestamp
            )
        ;
	end if;

-- company code	table
	o_table_company =
		select
                ifnull(company.tenant_id, '')				as tenant_id,
				ifnull(company.scenario_number, lv_max_seq)	as scenario_number,
				ifnull(company.company_code, '')			as company_code,
				ifnull(company.local_create_dtm, '')		as local_create_dtm,
				ifnull(company.local_update_dtm, '')		as local_update_dtm,
				ifnull(company.create_user_id, '')			as create_user_id,
				ifnull(company.update_user_id, '')			as update_user_id,
				ifnull(company.system_create_dtm, '')		as system_create_dtm,
				ifnull(company.system_update_dtm, '')		as system_update_dtm
		from	:i_table_company company
    ;

    t_table_company =
        select
                tenant_id,
                scenario_number,
                company_code
        from    pg_tm_comp_code
        where   tenant_id       = :lv_tenant_id
        and     scenario_number = :lv_scenario_number
    ;

    v_table_company =
        select
				row_number() over(order by t.tenant_id, t.scenario_number, t.company_code) as row_num,
                t.tenant_id,
                t.scenario_number,
                t.company_code
        from    :t_table_company as t
        left outer join :o_table_company as o
        on      t.tenant_id = o.tenant_id
        and     t.scenario_number = o.scenario_number
        and     t.company_code = o.company_code
        where   o.company_code is null
        order by
                t.tenant_id,
                t.scenario_number,
                t.company_code
    ;

    select  count(tenant_id)
    into    lv_sourcecompany_count
    from    :i_table_company
    where   tenant_id is not null
    ;

    if :lv_sourcecompany_count <= 0 then
        rollback;
    else

        if record_count(:v_table_company) <> 0 then

			for lv_loop_table_company in 1..record_count(:v_table_company) do

				delete from pg_tm_comp_code
				where       tenant_id           = (select distinct tenant_id from :v_table_company)
				and         scenario_number     = (select distinct scenario_number from :v_table_company)
				and         trim(company_code)  = (select company_code from :v_table_company where row_num = :lv_loop_table_company)
				;

			end for;

		end if;

		merge into	pg_tm_comp_code		as t_company_tab
			using	:o_table_company	as s_company_tab
			on		t_company_tab.tenant_id			= s_company_tab.tenant_id
            and		t_company_tab.scenario_number	= s_company_tab.scenario_number
            and     t_company_tab.company_code		= s_company_tab.company_code

		when matched then
			update set
				t_company_tab.local_update_dtm	= current_timestamp,
				t_company_tab.update_user_id	= trim(session_context('APPLICATIONUSER')),
				t_company_tab.system_update_dtm	= current_timestamp

		when not matched then
			insert
			(
				tenant_id,
				scenario_number,
				company_code,
				local_create_dtm,
				local_update_dtm,
				create_user_id,
				update_user_id,
				system_create_dtm,
				system_update_dtm
			)
			values
			(
				s_company_tab.tenant_id,
				s_company_tab.scenario_number,
				s_company_tab.company_code,
				current_timestamp,
				current_timestamp,
				trim(session_context('APPLICATIONUSER')),
				trim(session_context('APPLICATIONUSER')),
				current_timestamp,
				current_timestamp
            )
        ;
	end if;

-- bizunit code	table
	o_table_bizunit =
		select
                ifnull(bizunit.tenant_id, '')				as tenant_id,
				ifnull(bizunit.scenario_number, lv_max_seq)	as scenario_number,
				ifnull(bizunit.bizunit_code, '')			as bizunit_code,
				ifnull(bizunit.local_create_dtm, '')		as local_create_dtm,
				ifnull(bizunit.local_update_dtm, '')		as local_update_dtm,
				ifnull(bizunit.create_user_id, '')			as create_user_id,
				ifnull(bizunit.update_user_id, '')			as update_user_id,
				ifnull(bizunit.system_create_dtm, '')		as system_create_dtm,
				ifnull(bizunit.system_update_dtm, '')		as system_update_dtm
		from	:i_table_bizunit bizunit
    ;

    t_table_bizunit =
        select
                tenant_id,
                scenario_number,
                bizunit_code
        from    pg_tm_bizunit_code
        where   tenant_id       = :lv_tenant_id
        and     scenario_number = :lv_scenario_number
    ;

    v_table_bizunit =
        select
				row_number() over(order by t.tenant_id, t.scenario_number, t.bizunit_code) as row_num,
                t.tenant_id,
                t.scenario_number,
                t.bizunit_code
        from    :t_table_bizunit as t
        left outer join :o_table_bizunit as o
        on      t.tenant_id = o.tenant_id
        and     t.scenario_number = o.scenario_number
        and     t.bizunit_code = o.bizunit_code
        where   o.bizunit_code is null
        order by
                t.tenant_id,
                t.scenario_number,
                t.bizunit_code
    ;

    select  count(tenant_id)
    into    lv_sourcebizunit_count
    from    :i_table_bizunit
    where   tenant_id is not null
    ;

    if :lv_sourcebizunit_count <= 0 then
        rollback;
    else

        if record_count(:v_table_bizunit) <> 0 then

			for lv_loop_table_bizunit in 1..record_count(:v_table_bizunit) do

				delete from pg_tm_bizunit_code
				where       tenant_id           = (select distinct tenant_id from :v_table_bizunit)
				and         scenario_number     = (select distinct scenario_number from :v_table_bizunit)
				and         trim(bizunit_code)  = (select bizunit_code from :v_table_bizunit where row_num = :lv_loop_table_bizunit)
				;

			end for;

		end if;

		merge into	pg_tm_bizunit_code	as t_bizunit_tab
			using	:o_table_bizunit	as s_bizunit_tab
			on		t_bizunit_tab.tenant_id			= s_bizunit_tab.tenant_id
            and		t_bizunit_tab.scenario_number	= s_bizunit_tab.scenario_number
            and     t_bizunit_tab.bizunit_code		= s_bizunit_tab.bizunit_code

		when matched then
			update set
				t_bizunit_tab.local_update_dtm	= current_timestamp,
				t_bizunit_tab.update_user_id	= trim(session_context('APPLICATIONUSER')),
				t_bizunit_tab.system_update_dtm	= current_timestamp

		when not matched then
			insert
			(
				tenant_id,
				scenario_number,
				bizunit_code,
				local_create_dtm,
				local_update_dtm,
				create_user_id,
				update_user_id,
				system_create_dtm,
				system_update_dtm
			)
			values
			(
				s_bizunit_tab.tenant_id,
				s_bizunit_tab.scenario_number,
				s_bizunit_tab.bizunit_code,
				current_timestamp,
				current_timestamp,
				trim(session_context('APPLICATIONUSER')),
				trim(session_context('APPLICATIONUSER')),
				current_timestamp,
				current_timestamp
            )
        ;
	end if;

-- purchasing type table
	o_table_purchasing_type =
		select
                ifnull(purchasing.tenant_id, '')						as tenant_id,
				ifnull(purchasing.scenario_number, lv_max_seq)			as scenario_number,
				ifnull(purchasing.monitoring_purchasing_type_code, '')	as monitoring_purchasing_type_code,
				ifnull(purchasing.language_code, '')					as language_code,
				ifnull(purchasing.monitoring_purchasing_type_name, '')	as monitoring_purchasing_type_name,
				ifnull(purchasing.local_create_dtm, '')					as local_create_dtm,
				ifnull(purchasing.local_update_dtm, '')					as local_update_dtm,
				ifnull(purchasing.create_user_id, '')					as create_user_id,
				ifnull(purchasing.update_user_id, '')					as update_user_id,
				ifnull(purchasing.system_create_dtm, '')				as system_create_dtm,
				ifnull(purchasing.system_update_dtm, '')				as system_update_dtm
		from	:i_table_purchasing_type purchasing
    ;

    t_table_purchasing_type =
        select
                tenant_id,
                scenario_number,
                monitoring_purchasing_type_code,
                language_code
        from    pg_tm_purchasing_type_code_lng
        where   tenant_id       = :lv_tenant_id
        and     scenario_number = :lv_scenario_number
    ;

    v_table_purchasing_type =
        select
				row_number() over(order by t.tenant_id, t.scenario_number, t.monitoring_purchasing_type_code, t.language_code) as row_num,
                t.tenant_id,
                t.scenario_number,
                t.monitoring_purchasing_type_code,
                t.language_code
        from    :t_table_purchasing_type as t
        left outer join :o_table_purchasing_type as o
        on      t.tenant_id = o.tenant_id
        and     t.scenario_number = o.scenario_number
        and     t.monitoring_purchasing_type_code = o.monitoring_purchasing_type_code
        and     t.language_code = o.language_code
        where   o.language_code is null
        order by
                t.tenant_id,
                t.scenario_number,
				t.monitoring_purchasing_type_code,
                t.language_code
		;

    select  count(tenant_id)
    into    lv_sourcepurchasingtype_count
    from    :i_table_purchasing_type
    where   tenant_id is not null
    ;

    if :lv_sourcepurchasingtype_count <= 0 then
        rollback;
    else

        if record_count(:v_table_purchasing_type) <> 0 then

			for lv_loop_table_purchasing_type in 1..record_count(:v_table_purchasing_type) do

				delete from pg_tm_purchasing_type_code_lng
				where       tenant_id       				        = (select distinct tenant_id from :v_table_purchasing_type)
				and         scenario_number 				        = (select distinct scenario_number from :v_table_purchasing_type)
				and         trim(monitoring_purchasing_type_code)	= (select monitoring_purchasing_type_code from :v_table_purchasing_type where row_num = :lv_loop_table_purchasing_type)
				;

			end for;

		end if;

		merge into	pg_tm_purchasing_type_code_lng	as t_purchasing_tab
			using	:o_table_purchasing_type		as s_purchasing_tab
			on		t_purchasing_tab.tenant_id			                = s_purchasing_tab.tenant_id
            and		t_purchasing_tab.scenario_number	                = s_purchasing_tab.scenario_number
            and     t_purchasing_tab.monitoring_purchasing_type_code    = s_purchasing_tab.monitoring_purchasing_type_code
            and     t_purchasing_tab.language_code						= s_purchasing_tab.language_code

		when matched then
			update set
				t_purchasing_tab.monitoring_purchasing_type_name	= s_purchasing_tab.monitoring_purchasing_type_name,
				t_purchasing_tab.local_update_dtm					= current_timestamp,
				t_purchasing_tab.update_user_id						= trim(session_context('APPLICATIONUSER')),
				t_purchasing_tab.system_update_dtm					= current_timestamp

		when not matched then
			insert
			(
				tenant_id,
				scenario_number,
				monitoring_purchasing_type_code,
				language_code,
				monitoring_purchasing_type_name,
				local_create_dtm,
				local_update_dtm,
				create_user_id,
				update_user_id,
				system_create_dtm,
				system_update_dtm
			)
			values
			(
				s_purchasing_tab.tenant_id,
				s_purchasing_tab.scenario_number,
				s_purchasing_tab.monitoring_purchasing_type_code,
				s_purchasing_tab.language_code,
				s_purchasing_tab.monitoring_purchasing_type_name,
				current_timestamp,
				current_timestamp,
				trim(session_context('APPLICATIONUSER')),
				trim(session_context('APPLICATIONUSER')),
				current_timestamp,
				current_timestamp
            )
        ;
	end if;

-- type table
	o_table_type =
		select
                ifnull(type.tenant_id, '')					as tenant_id,
				ifnull(type.scenario_number, lv_max_seq)	as scenario_number,
				ifnull(type.monitoring_type_code, '')		as monitoring_type_code,
				ifnull(type.language_code, '')				as language_code,
				ifnull(type.monitoring_type_name, '')		as monitoring_type_name,
				ifnull(type.local_create_dtm, '')			as local_create_dtm,
				ifnull(type.local_update_dtm, '')			as local_update_dtm,
				ifnull(type.create_user_id, '')				as create_user_id,
				ifnull(type.update_user_id, '')				as update_user_id,
				ifnull(type.system_create_dtm, '')			as system_create_dtm,
				ifnull(type.system_update_dtm, '')			as system_update_dtm
		from	:i_table_type type
    ;

    t_table_type =
        select
                tenant_id,
                scenario_number,
                monitoring_type_code,
                language_code
        from    pg_tm_type_code_lng
        where   tenant_id       = :lv_tenant_id
        and     scenario_number = :lv_scenario_number
    ;

    v_table_type =
        select
				row_number() over(order by t.tenant_id, t.scenario_number, t.monitoring_type_code, t.language_code) as row_num,
                t.tenant_id,
                t.scenario_number,
                t.monitoring_type_code,
                t.language_code
        from    :t_table_type as t
        left outer join :o_table_type as o
        on      t.tenant_id = o.tenant_id
        and     t.scenario_number = o.scenario_number
        and     t.monitoring_type_code = o.monitoring_type_code
        and     t.language_code = o.language_code
        where   o.language_code is null
    ;

    select  count(tenant_id)
    into    lv_sourcetypecode_count
    from    :i_table_type
    where   tenant_id is not null
    ;

    if :lv_sourcetypecode_count <= 0 then
        rollback;
    else

        if record_count(:v_table_type) <> 0 then

			for lv_loop_table_type in 1..record_count(:v_table_type) do

				delete from pg_tm_type_code_lng
				where       tenant_id       		    = (select distinct tenant_id from :v_table_type)
				and         scenario_number 		    = (select distinct scenario_number from :v_table_type)
				and         trim(monitoring_type_code)  = (select monitoring_type_code from :v_table_type where row_num = :lv_loop_table_type)
				;

			end for;

		end if;

		merge into	pg_tm_type_code_lng	as t_type_tab
			using	:o_table_type		as s_type_tab
			on		t_type_tab.tenant_id		    = s_type_tab.tenant_id
            and		t_type_tab.scenario_number	    = s_type_tab.scenario_number
            and     t_type_tab.monitoring_type_code	= s_type_tab.monitoring_type_code
            and     t_type_tab.language_code		= s_type_tab.language_code

		when matched then
			update set
				t_type_tab.monitoring_type_name	= s_type_tab.monitoring_type_name,
				t_type_tab.local_update_dtm		= current_timestamp,
				t_type_tab.update_user_id		= trim(session_context('APPLICATIONUSER')),
				t_type_tab.system_update_dtm	= current_timestamp

		when not matched then
			insert
			(
				tenant_id,
				scenario_number,
				monitoring_type_code,
				language_code,
				monitoring_type_name,
				local_create_dtm,
				local_update_dtm,
				create_user_id,
				update_user_id,
				system_create_dtm,
				system_update_dtm
			)
			values
			(
				s_type_tab.tenant_id,
				s_type_tab.scenario_number,
				s_type_tab.monitoring_type_code,
				s_type_tab.language_code,
				s_type_tab.monitoring_type_name,
				current_timestamp,
				current_timestamp,
				trim(session_context('APPLICATIONUSER')),
				trim(session_context('APPLICATIONUSER')),
				current_timestamp,
				current_timestamp
            )
        ;
	end if;

-- manager table
	o_table_manager =
		select
                ifnull(manager.tenant_id, '')						    as tenant_id,
				ifnull(manager.scenario_number, lv_max_seq)			    as scenario_number,
				ifnull(manager.monitoring_manager_empno, '')		    as monitoring_manager_empno,
				ifnull(manager.monitoring_super_authority_flag, false)  as monitoring_super_authority_flag,
				ifnull(manager.local_create_dtm, '')				    as local_create_dtm,
				ifnull(manager.local_update_dtm, '')				    as local_update_dtm,
				ifnull(manager.create_user_id, '')					    as create_user_id,
				ifnull(manager.update_user_id, '')					    as update_user_id,
				ifnull(manager.system_create_dtm, '')				    as system_create_dtm,
				ifnull(manager.system_update_dtm, '')				    as system_update_dtm
		from	:i_table_manager manager
    ;

    t_table_manager =
        select
                tenant_id,
                scenario_number,
                monitoring_manager_empno
        from    pg_tm_manager_dtl
        where   tenant_id       = :lv_tenant_id
        and     scenario_number = :lv_scenario_number
    ;

    v_table_manager =
        select
				row_number() over(order by t.tenant_id, t.scenario_number, t.monitoring_manager_empno) as row_num,
                t.tenant_id,
                t.scenario_number,
                t.monitoring_manager_empno
        from    :t_table_manager as t
        left outer join :o_table_manager as o
        on      t.tenant_id = o.tenant_id
        and     t.scenario_number = o.scenario_number
        and     t.monitoring_manager_empno = o.monitoring_manager_empno
        where   o.monitoring_manager_empno is null
        order by
                t.tenant_id,
                t.scenario_number,
                t.monitoring_manager_empno
	;

    select  count(tenant_id)
    into    lv_sourcemanager_count
    from    :i_table_manager
    where   tenant_id is not null
    ;

    if record_count(:i_table_manager) = 0 then

        delete from pg_tm_manager_dtl
        where       tenant_id       = :lv_tenant_id
        and         scenario_number = :lv_scenario_number
        ;

    elseif :lv_sourcemanager_count <= 0 then
    else

        if record_count(:v_table_manager) <> 0 then

			for lv_loop_table_manager in 1..record_count(:v_table_manager) do

				delete from pg_tm_manager_dtl
				where       tenant_id       		        = (select distinct tenant_id from :v_table_manager)
				and         scenario_number 		        = (select distinct scenario_number from :v_table_manager)
				and         trim(monitoring_manager_empno)  = (select monitoring_manager_empno from :v_table_manager where row_num = :lv_loop_table_manager)
				;

			end for;

		end if;

		merge into	pg_tm_manager_dtl	as t_manager_tab
			using	:o_table_manager	as s_manager_tab
			on		t_manager_tab.tenant_id			        = s_manager_tab.tenant_id
            and		t_manager_tab.scenario_number	        = s_manager_tab.scenario_number
            and     t_manager_tab.monitoring_manager_empno  = s_manager_tab.monitoring_manager_empno

		when matched then
			update set
				t_manager_tab.monitoring_super_authority_flag	= s_manager_tab.monitoring_super_authority_flag,
				t_manager_tab.local_update_dtm					= current_timestamp,
				t_manager_tab.update_user_id					= trim(session_context('APPLICATIONUSER')),
				t_manager_tab.system_update_dtm					= current_timestamp

		when not matched then
			insert
			(
				tenant_id,
				scenario_number,
				monitoring_manager_empno,
				monitoring_super_authority_flag,
				local_create_dtm,
				local_update_dtm,
				create_user_id,
				update_user_id,
				system_create_dtm,
				system_update_dtm
			)
			values
			(
				s_manager_tab.tenant_id,
				s_manager_tab.scenario_number,
				s_manager_tab.monitoring_manager_empno,
				s_manager_tab.monitoring_super_authority_flag,
				current_timestamp,
				current_timestamp,
				trim(session_context('APPLICATIONUSER')),
				trim(session_context('APPLICATIONUSER')),
				current_timestamp,
				current_timestamp
            )
        ;
	end if
    ;

-- operation mode table
	o_table_operation =
		select
                ifnull(operation.tenant_id, '')							as tenant_id,
				ifnull(operation.scenario_number, lv_max_seq)			as scenario_number,
				ifnull(operation.monitoring_operation_mode_code, '')	as monitoring_operation_mode_code,
				ifnull(operation.language_code, '')						as language_code,
				ifnull(operation.monitoring_operation_mode_name, '')	as monitoring_operation_mode_name,
				ifnull(operation.local_create_dtm, '')					as local_create_dtm,
				ifnull(operation.local_update_dtm, '')					as local_update_dtm,
				ifnull(operation.create_user_id, '')					as create_user_id,
				ifnull(operation.update_user_id, '')					as update_user_id,
				ifnull(operation.system_create_dtm, '')					as system_create_dtm,
				ifnull(operation.system_update_dtm, '')					as system_update_dtm
		from	:i_table_operation operation
    ;

    t_table_operation =
        select
                tenant_id,
                scenario_number,
                monitoring_operation_mode_code,
                language_code
        from    pg_tm_operation_mode_code_lng
        where   tenant_id       = :lv_tenant_id
        and     scenario_number = :lv_scenario_number
    ;

    v_table_operation =
        select
				row_number() over(order by t.tenant_id, t.scenario_number, t.monitoring_operation_mode_code, t.language_code) as row_num,
                t.tenant_id,
                t.scenario_number,
                t.monitoring_operation_mode_code,
                t.language_code
        from    :t_table_operation as t
        left outer join :o_table_operation as o
        on      t.tenant_id = o.tenant_id
        and     t.scenario_number = o.scenario_number
        and     t.monitoring_operation_mode_code = o.monitoring_operation_mode_code
        and     t.language_code = o.language_code
        where   o.language_code is null
        order by
                t.tenant_id,
                t.scenario_number,
				t.monitoring_operation_mode_code,
                t.language_code
    ;

    select  count(tenant_id)
    into    lv_sourceoperation_count
    from    :i_table_operation
    where   tenant_id is not null
    ;

    if record_count(:i_table_operation) = 0 then

        delete from pg_tm_operation_mode_code_lng
        where       tenant_id       = :lv_tenant_id
        and         scenario_number = :lv_scenario_number
        ;

    elseif :lv_sourceoperation_count <= 0 then
    else

        if	record_count(:v_table_operation) <> 0 then

			for lv_loop_table_operation in 1..record_count(:v_table_operation) do

				delete from pg_tm_operation_mode_code_lng
				where       tenant_id       				        = (select distinct tenant_id from :v_table_operation)
				and         scenario_number 				        = (select distinct scenario_number from :v_table_operation)
				and         trim(monitoring_operation_mode_code)    = (select monitoring_operation_mode_code from :v_table_operation where row_num = :lv_loop_table_operation)
				;

			end for;

		end if;

		merge into	pg_tm_operation_mode_code_lng	as t_operation_tab
			using	:o_table_operation				as s_operation_tab
			on		t_operation_tab.tenant_id		                = s_operation_tab.tenant_id
            and		t_operation_tab.scenario_number	                = s_operation_tab.scenario_number
            and     t_operation_tab.monitoring_operation_mode_code	= s_operation_tab.monitoring_operation_mode_code
            and     t_operation_tab.language_code					= s_operation_tab.language_code

		when matched then
			update set
				t_operation_tab.monitoring_operation_mode_name	= s_operation_tab.monitoring_operation_mode_name,
				t_operation_tab.local_update_dtm				= current_timestamp,
				t_operation_tab.update_user_id					= trim(session_context('APPLICATIONUSER')),
				t_operation_tab.system_update_dtm				= current_timestamp

		when not matched then
			insert
			(
				tenant_id,
				scenario_number,
				monitoring_operation_mode_code,
				language_code,
				monitoring_operation_mode_name,
				local_create_dtm,
				local_update_dtm,
				create_user_id,
				update_user_id,
				system_create_dtm,
				system_update_dtm
			)
			values
			(
				s_operation_tab.tenant_id,
				s_operation_tab.scenario_number,
				s_operation_tab.monitoring_operation_mode_code,
				s_operation_tab.language_code,
				s_operation_tab.monitoring_operation_mode_name,
				current_timestamp,
				current_timestamp,
				trim(session_context('APPLICATIONUSER')),
				trim(session_context('APPLICATIONUSER')),
				current_timestamp,
				current_timestamp
            )
        ;
	end if;

-- commit message
	commit;
	o_table_message =  select 'OK' as returncode, 'Success Saved!' as returnmessage from dummy;

end;