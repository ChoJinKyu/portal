/************************************************
  1. namespace
  - 모듈코드 소문자로 작성
  - 소모듈 존재시 대모듈.소모듈 로 작성
  2. entity
  - 대문자로 작성
  - 테이블명 생성을 고려하여 '_' 추가
  3. 컬럼(속성)
  - 소문자로 작성
  4. .hdbview, .hdbfunction 등으로 이미 생성된 DB Object 사용시 entity 위에 @cds.persistence.exists 명시    
  5. namespace : pg
  6. entity : MI_Material_Price_Management_Procedure
  7. entity description : 시황자재 가격관리 Merge Procedure
  8. history
  -. 2020.11.19 : 디포커스 차재근 최초작성
  -. 2020.11.20 : 디포커스 차재근 수정 (Source Table변경으로 Merge Logic 수정)
*************************************************/
PROCEDURE PG_MI_MATERIAL_PRICE_MANAGEMENT_PROC (
	 IN I_TABLE PG_MI_MATERIAL_PRICE_MANAGEMENT_PTYPE
	,OUT O_MSG NVARCHAR(5000)
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 

AS
BEGIN

	DECLARE  var_commit  NVARCHAR(100) := 'COMMIT';
	
	DECLARE var_rollback NVARCHAR(100) := 'ROLLBACK';
		
	DECLARE EXIT HANDLER FOR SQLEXCEPTION

		BEGIN
		
		EXEC (:var_rollback);
		
			SELECT  ::SQL_ERROR_CODE||'-'||::SQL_ERROR_MESSAGE  INTO  O_MSG  FROM  DUMMY;
		
		END;

    I_O_TABLE =
		SELECT
				A.TENANT_ID,
				A.COMPANY_CODE,
				A.ORG_TYPE_CODE,
				A.ORG_CODE,
				A.MI_MATERIAL_CODE,
				A.MI_MATERIAL_NAME,
				A.CATEGORY_CODE,
				A.CATEGORY_NAME,
				A.USE_FLAG,
				A.EXCHANGE,
				A.CURRENCY_UNIT,
				A.QUANTITY_UNIT,
				A.EXCHANGE_UNIT,
				A.TERMSDELV,
				A.SOURCING_GROUP_CODE,
				A.DELIVERY_MM,
				A.MI_DATE,
				A.AMOUNT
		  FROM	:I_TABLE A
	;

	MERGE INTO
			PG_MI_MATERIAL_PRICE_MANAGEMENT AS T_TAB
		USING
			:I_O_TABLE AS S_TAB
		ON	T_TAB.TENANT_ID			=  S_TAB.TENANT_ID
		AND	T_TAB.COMPANY_CODE		=  S_TAB.COMPANY_CODE
		AND	T_TAB.ORG_TYPE_CODE		=  S_TAB.ORG_TYPE_CODE
		AND	T_TAB.ORG_CODE			=  S_TAB.ORG_CODE
		AND	T_TAB.MI_MATERIAL_CODE	=  S_TAB.MI_MATERIAL_CODE
		AND	T_TAB.CATEGORY_CODE		=  S_TAB.CATEGORY_CODE
		AND T_TAB.EXCHANGE	        =  S_TAB.EXCHANGE
		AND T_TAB.CURRENCY_UNIT	    =  S_TAB.CURRENCY_UNIT
		AND T_TAB.QUANTITY_UNIT	    =  S_TAB.QUANTITY_UNIT
		AND	T_TAB.TERMSDELV			=  S_TAB.TERMSDELV
		AND T_TAB.MI_DATE	        =  S_TAB.MI_DATE

	WHEN MATCHED THEN
		UPDATE SET	 
			T_TAB.MI_MATERIAL_NAME	    =  S_TAB.MI_MATERIAL_NAME,
			T_TAB.CATEGORY_NAME			=  S_TAB.CATEGORY_NAME,
			T_TAB.USE_FLAG				=  S_TAB.USE_FLAG,
			T_TAB.EXCHANGE_UNIT			=  S_TAB.EXCHANGE_UNIT,
			T_TAB.SOURCING_GROUP_CODE	=  S_TAB.SOURCING_GROUP_CODE,
			T_TAB.DELIVERY_MM			=  S_TAB.DELIVERY_MM,
			T_TAB.AMOUNT				=  S_TAB.AMOUNT,
			T_TAB.LOCAL_UPDATE_DTM		=  CURRENT_TIMESTAMP,
			T_TAB.UPDATE_USER_ID		=  CURRENT_USER,
			T_TAB.SYSTEM_UPDATE_DTM		=  CURRENT_TIMESTAMP

	WHEN NOT MATCHED THEN
		INSERT
		(
			TENANT_ID,
			COMPANY_CODE,
			ORG_TYPE_CODE,
			ORG_CODE,
			MI_MATERIAL_CODE,
			MI_MATERIAL_NAME,
			CATEGORY_CODE,
			CATEGORY_NAME,
			USE_FLAG,
			EXCHANGE,
			CURRENCY_UNIT,
			QUANTITY_UNIT,
			EXCHANGE_UNIT,
			TERMSDELV,
			SOURCING_GROUP_CODE,
			DELIVERY_MM,
			MI_DATE,
			AMOUNT,
			LOCAL_CREATE_DTM,
			LOCAL_UPDATE_DTM,
			CREATE_USER_ID,
			UPDATE_USER_ID,
			SYSTEM_CREATE_DTM,
			SYSTEM_UPDATE_DTM
		)
		VALUES
		(
			S_TAB.TENANT_ID,
			S_TAB.COMPANY_CODE,
			S_TAB.ORG_TYPE_CODE,
			S_TAB.ORG_CODE,
			S_TAB.MI_MATERIAL_CODE,
			S_TAB.MI_MATERIAL_NAME,
			S_TAB.CATEGORY_CODE,
			S_TAB.CATEGORY_NAME,
			S_TAB.USE_FLAG,
			S_TAB.EXCHANGE,
			S_TAB.CURRENCY_UNIT,
			S_TAB.QUANTITY_UNIT,
			S_TAB.EXCHANGE_UNIT,
			S_TAB.TERMSDELV,
			S_TAB.SOURCING_GROUP_CODE,
			S_TAB.DELIVERY_MM,
			S_TAB.MI_DATE,
			S_TAB.AMOUNT,
			CURRENT_TIMESTAMP,
			CURRENT_TIMESTAMP,
			CURRENT_USER,
			CURRENT_USER,
			CURRENT_TIMESTAMP,
			CURRENT_TIMESTAMP
			)
	;

	EXEC (:var_commit);
	
	O_MSG  :=  'SUCCESS~!';
	
END
;