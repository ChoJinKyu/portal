PROCEDURE SP_NP_APPR_APPROVED_PROC (
/*
    단가품의 승인에 따른 추가 작업
    - 단가Master에 데이터 등록 및 수정
    
        I.단가 등록 (NET_PRICE_DOCUMENT_TYPE_CODE = 'I')
          0. 해당 기간에 포함되는 건이 2건 이상이면, Exception 발생
          0. 신규건의 시작일자보다 이후 인 건이 존재하면, Exception 발생
          1. 동일한 시작일자가 존재하면, Update
          2. 동일한 시작일자가 아닌, 기간에 포함되는 건이면, 종료일자를 시작일자 하루 전으로 Update, 신규 Insert

        C.단가 무조건 Insert (NET_PRICE_DOCUMENT_TYPE_CODE = 'C')
          - 순번은 Max + 1

*/
     IN   I_TENANT_ID                      NVARCHAR(20)
    ,IN   I_APPROVAL_NUMBER                NVARCHAR(20)
    ,IN   I_NET_PRICE_DOCUMENT_TYPE_CODE   NVARCHAR(10)
    ,IN   I_USER_ID                        NVARCHAR(255)
    ,OUT  O_RETURN_CODE                    NVARCHAR(5)
    ,OUT  O_RETURN_MSG                     NVARCHAR(1000)
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
AS
BEGIN

    /*******************************************************************************
    *********** 변수 선언 **********************************************************
    *******************************************************************************/

    /* Net Price Master에 적용 대상 (품의 정보를 이용) */
    DECLARE CURSOR c_Datas FOR
    SELECT
          NAD.TENANT_ID
        , NAD.COMPANY_CODE
        , NAD.ORG_TYPE_CODE
        , NAD.ORG_CODE
        , NAM.NET_PRICE_DOCUMENT_TYPE_CODE
        , NAM.NET_PRICE_SOURCE_CODE
        , 1 as NET_PRICE_SEQUENCE   /*I이면, 무조건 1, C이면 MAX+1*/
        , NAD.SUPPLIER_CODE
        , NAD.MATERIAL_CODE
        , NAD.MARKET_CODE
        , NAD.CURRENCY_CODE
        , TO_VARCHAR(NAD.EFFECTIVE_START_DATE,'YYYYMMDD') AS EFFECTIVE_START_DATE
        , TO_VARCHAR(NAD.EFFECTIVE_END_DATE,'YYYYMMDD')   AS EFFECTIVE_END_DATE
        , NAD.PAYTERMS_CODE
        , NAD.INCOTERMS
        , NAM.BUYER_EMPNO
        , CASE WHEN NAD.NET_PRICE_TYPE_CODE = 'T' THEN true
               WHEN NAD.NET_PRICE_TYPE_CODE = 'N' THEN false
               ELSE false
          END AS TENTPRC_FLAG
        , NAD.EXRATE_TYPE_CODE
        , NAD.EXRATE_DATE
        , NAD.EXRATE
        , NAM.APPROVAL_EXCL_FLAG
        , NAD.QUOTATION_NUMBER
        , NAM.QUOTATION_SEQUENCE
        , NAD.QUOTATION_ITEM_NUMBER
        , NAD.BIDDING_NUMBER
        , NAD.BIDDING_ITEM_NUMBER
        , NAD.LINE_TYPE_CODE
        , NAD.MATERIAL_DESC
        , NAD.UOM_CODE
        -- , SURROGATE_FLAG   /* SURROGATE_TYPE_CODE 있지만, 확인 필요 */
        , NAD.NET_PRICE
        , NAD.PURCHASING_QUANTITY
        , NAD.PURCHASING_AMOUNT
        , NAD.VENDOR_POOL_CODE
        , NAD.MAKER_CODE
        -- , AGENT_NAME        /* AGENT_CODE가 있지만, 확인 필요 */
        , NAD.NET_PRICE_AGREEMENT_SIGN_FLAG
        , NAD.NET_PRICE_AGREEMENT_STATUS_CODE
        , NAD.PYEAR_JULY_BASE_CURRENCY_CODE
        , NAD.PYEAR_JULY_BASE_PRICE
        , NAD.PYEAR_JULY_CI_RATE
        , NAD.PYEAR_DEC_BASE_CURRENCY_CODE
        , NAD.PYEAR_DEC_BASE_PRICE
        , NAD.PYEAR_DEC_CI_RATE
        , NAD.QUARTER_BASE_CURRENCY_CODE
        , NAD.QUARTER_BASE_PRICE
        , NAD.QUARTER_CI_RATE
        , NAD.BASE_PRICE_TYPE_CODE
        , NAD.QUALITY_CERTI_FLAG
        , NAD.PR_NUMBER
        , NAD.PR_ITEM_NUMBER
        , NAD.MATERIAL_CLASS_CODE
        , NAD.PO_UNIT
        , NAD.MATERIAL_PRICE_UNIT
        , NAD.CONVERSION_NET_PRICE
        , NAD.TAX_CODE
        , NAD.OVERDLV_TOLERANCE
        , NAD.HS_CODE
        , NAD.FTA_CODE

      FROM CM_APPROVAL_MST  CAM
     INNER JOIN SP_NP_NET_PRICE_APPROVAL_MST  NAM
        ON NAM.TENANT_ID          = CAM.TENANT_ID
       AND NAM.APPROVAL_NUMBER    = CAM.APPROVAL_NUMBER

     INNER JOIN SP_NP_NET_PRICE_APPROVAL_DTL  NAD
        ON NAD.TENANT_ID          = NAM.TENANT_ID
       AND NAD.APPROVAL_NUMBER    = NAM.APPROVAL_NUMBER

     WHERE CAM.TENANT_ID          = :I_TENANT_ID
       AND CAM.APPROVAL_NUMBER    = :I_APPROVAL_NUMBER
    ;

	DECLARE V_COUNT_EQUAL_START_DT  INT;    /* 시작일자가 동일한 건수 */
	DECLARE V_COUNT_OVER_START_DT   INT;    /* 시작일자가 이후 인 건수 */
	DECLARE V_COUNT_INCLUDE_PERIOD  INT;    /* 시작일자가 포함되는 건수  */

    /*******************************************************************************
    *********** Exception 정의 *****************************************************
    *******************************************************************************/

    /* 사용자 정의 Exception */
    DECLARE V_USER_EXCEPTION CONDITION FOR SQL_ERROR_CODE 19999;

    /* 사용자 정의 Exception시, 종료 처리 : 이전 Exception Catch 부분에서 결과 메시지 등록 됨. */
    DECLARE EXIT HANDLER FOR V_USER_EXCEPTION
    BEGIN
        -- 아무것도 하지 않습니다.
    END;

    /* 사용자 정의 이외 Exception 발생시 처리 : 발생될 가능성 낮음. */
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        O_RETURN_CODE = 'NG999';
        O_RETURN_MSG  = '정의되지 않은 오류 (' || ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE || ')';
    END;
    


    /*******************************************************************************
    *********** 처리 로직 **********************************************************
    *******************************************************************************/


    BEGIN


        -- 단가마스터, 단가품의 마스터 저장
        FOR c_item as c_Datas DO

            IF I_NET_PRICE_DOCUMENT_TYPE_CODE = 'I' THEN
                
                BEGIN
                    DECLARE EXIT HANDLER FOR SQLEXCEPTION
                    BEGIN
                        O_RETURN_CODE = 'NG010';
                        O_RETURN_MSG  = '단가 마스터 포함건수 조회시 오류 (' || ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE || ')';
                        SIGNAL V_USER_EXCEPTION;
                    END;
                    
                    SELECT COUNT(CASE WHEN S.EFFECTIVE_START_DATE = c_item.EFFECTIVE_START_DATE THEN 1 END) AS COUNT_EQUAL_START_DT
                         , COUNT(CASE WHEN S.EFFECTIVE_START_DATE > c_item.EFFECTIVE_START_DATE THEN 1 END) AS COUNT_OVER_START_DT
                         , COUNT(CASE WHEN c_item.EFFECTIVE_START_DATE BETWEEN S.EFFECTIVE_START_DATE AND S.EFFECTIVE_END_DATE THEN 1 END) AS COUNT_INCLUDE_PERIOD
                      INTO V_COUNT_EQUAL_START_DT
                         , V_COUNT_OVER_START_DT
                         , V_COUNT_INCLUDE_PERIOD
                      FROM SP_NP_NET_PRICE_MST  S
                     WHERE S.TENANT_ID                       = c_item.TENANT_ID
                       AND S.COMPANY_CODE                    = c_item.COMPANY_CODE
                       AND S.ORG_TYPE_CODE                   = c_item.ORG_TYPE_CODE
                       AND S.ORG_CODE                        = c_item.ORG_CODE
                       AND S.NET_PRICE_DOCUMENT_TYPE_CODE    = c_item.NET_PRICE_DOCUMENT_TYPE_CODE
                       AND S.NET_PRICE_SOURCE_CODE           = c_item.NET_PRICE_SOURCE_CODE
                       AND S.SUPPLIER_CODE                   = c_item.SUPPLIER_CODE
                       AND S.MATERIAL_CODE                   = c_item.MATERIAL_CODE
                       AND S.MARKET_CODE                     = c_item.MARKET_CODE
                       AND S.CURRENCY_CODE                   = c_item.CURRENCY_CODE
                    ;
                END;


                -- 1. 해당 기간에 포함되는 건이 2건 이상이면, Exception 발생
    			IF V_COUNT_INCLUDE_PERIOD > 1 THEN 
		            O_RETURN_CODE = 'NG010';
		            O_RETURN_MSG  = '신규 등록하려는 건의 시작일자에 포함되는 건이 여러 건 입니다.';
		            SIGNAL V_USER_EXCEPTION;

                    
    			ELSEIF V_COUNT_OVER_START_DT > 1 THEN 
		            O_RETURN_CODE = 'NG010';
		            O_RETURN_MSG  = '신규 등록하려는 건의 시작일자보다 이후 인 건이 존재합니다.(시작일자가 이후 인건)';
		            SIGNAL V_USER_EXCEPTION;

    			
    			-- 2. 동일한 시작일자가 존재하면, Update
    			ELSEIF V_COUNT_EQUAL_START_DT = 1 THEN
                    UPDATE SP_NP_NET_PRICE_MST   SET
                           EFFECTIVE_END_DATE                = c_item.EFFECTIVE_END_DATE
                         , PAYTERMS_CODE                     = c_item.PAYTERMS_CODE
                         , INCOTERMS                         = c_item.INCOTERMS
                         , BUYER_EMPNO                       = c_item.BUYER_EMPNO
                         , TENTPRC_FLAG                      = c_item.TENTPRC_FLAG
                         , EXRATE_TYPE_CODE                  = c_item.EXRATE_TYPE_CODE
                         , EXRATE_DATE                       = c_item.EXRATE_DATE
                         , EXRATE                            = c_item.EXRATE
                         , APPROVAL_EXCL_FLAG                = c_item.APPROVAL_EXCL_FLAG
                         , QUOTATION_NUMBER                  = c_item.QUOTATION_NUMBER
                         , QUOTATION_SEQUENCE                = c_item.QUOTATION_SEQUENCE
                         , QUOTATION_ITEM_NUMBER             = c_item.QUOTATION_ITEM_NUMBER
                         , BIDDING_NUMBER                    = c_item.BIDDING_NUMBER
                         , BIDDING_ITEM_NUMBER               = c_item.BIDDING_ITEM_NUMBER
                         , LINE_TYPE_CODE                    = c_item.LINE_TYPE_CODE
                         , MATERIAL_DESC                     = c_item.MATERIAL_DESC
                         , UOM_CODE                          = c_item.UOM_CODE
                         -- , SURROGATE_FLAG                 =  , SURROGATE_FLAG   /* SURROGATE_TYPE_CODE 있지만, 확인 필요 */
                         , NET_PRICE                         = c_item.NET_PRICE
                         , PURCHASING_QUANTITY               = c_item.PURCHASING_QUANTITY
                         , PURCHASING_AMOUNT                 = c_item.PURCHASING_AMOUNT
                         , VENDOR_POOL_CODE                  = c_item.VENDOR_POOL_CODE
                         , MAKER_CODE                        = c_item.MAKER_CODE
                         -- , AGENT_NAME                     =  , AGENT_NAME        /* AGENT_CODE가 있지만, 확인 필요 */
                         , NET_PRICE_AGREEMENT_SIGN_FLAG     = c_item.NET_PRICE_AGREEMENT_SIGN_FLAG
                         , NET_PRICE_AGREEMENT_STATUS_CODE   = c_item.NET_PRICE_AGREEMENT_STATUS_CODE
                         , PYEAR_JULY_BASE_CURRENCY_CODE     = c_item.PYEAR_JULY_BASE_CURRENCY_CODE
                         , PYEAR_JULY_BASE_PRICE             = c_item.PYEAR_JULY_BASE_PRICE
                         , PYEAR_JULY_CI_RATE                = c_item.PYEAR_JULY_CI_RATE
                         , PYEAR_DEC_BASE_CURRENCY_CODE      = c_item.PYEAR_DEC_BASE_CURRENCY_CODE
                         , PYEAR_DEC_BASE_PRICE              = c_item.PYEAR_DEC_BASE_PRICE
                         , PYEAR_DEC_CI_RATE                 = c_item.PYEAR_DEC_CI_RATE
                         , QUARTER_BASE_CURRENCY_CODE        = c_item.QUARTER_BASE_CURRENCY_CODE
                         , QUARTER_BASE_PRICE                = c_item.QUARTER_BASE_PRICE
                         , QUARTER_CI_RATE                   = c_item.QUARTER_CI_RATE
                         , BASE_PRICE_TYPE_CODE              = c_item.BASE_PRICE_TYPE_CODE
                         , QUALITY_CERTI_FLAG                = c_item.QUALITY_CERTI_FLAG
                         , PR_NUMBER                         = c_item.PR_NUMBER
                         , PR_ITEM_NUMBER                    = c_item.PR_ITEM_NUMBER
                         , MATERIAL_CLASS_CODE               = c_item.MATERIAL_CLASS_CODE
                         , PO_UNIT                           = c_item.PO_UNIT
                         , MATERIAL_PRICE_UNIT               = c_item.MATERIAL_PRICE_UNIT
                         , CONVERSION_NET_PRICE              = c_item.CONVERSION_NET_PRICE
                         , TAX_CODE                          = c_item.TAX_CODE
                         , OVERDLV_TOLERANCE                 = c_item.OVERDLV_TOLERANCE
                         , HS_CODE                           = c_item.HS_CODE
                         , FTA_CODE                          = c_item.FTA_CODE
				    	 
                         , LOCAL_UPDATE_DTM                  = NOW()
                         , UPDATE_USER_ID                    = :I_USER_ID
                         , SYSTEM_UPDATE_DTM                 = NOW()
				    	 
				     WHERE TENANT_ID                         = c_item.TENANT_ID
                       AND COMPANY_CODE                      = c_item.COMPANY_CODE
                       AND ORG_TYPE_CODE                     = c_item.ORG_TYPE_CODE
                       AND ORG_CODE                          = c_item.ORG_CODE
                       AND NET_PRICE_DOCUMENT_TYPE_CODE      = c_item.NET_PRICE_DOCUMENT_TYPE_CODE
                       AND NET_PRICE_SOURCE_CODE             = c_item.NET_PRICE_SOURCE_CODE
                    --   AND NET_PRICE_SEQUENCE                = c_item.NET_PRICE_SEQUENCE
                       AND SUPPLIER_CODE                     = c_item.SUPPLIER_CODE
                       AND MATERIAL_CODE                     = c_item.MATERIAL_CODE
                       AND MARKET_CODE                       = c_item.MARKET_CODE
                       AND CURRENCY_CODE                     = c_item.CURRENCY_CODE
                       AND EFFECTIVE_START_DATE              = c_item.EFFECTIVE_START_DATE
    			    ;
    			    
    			    IF ::ROWCOUNT = 0 THEN
			            O_RETURN_CODE = 'NG010';
			            O_RETURN_MSG  = '단가마스터에 수정된 건이 없습니다.';
			            SIGNAL V_USER_EXCEPTION;
			            
    			    ELSEIF ::ROWCOUNT > 1 THEN
			            O_RETURN_CODE = 'NG010';
			            O_RETURN_MSG  = '단가마스터에 1건 이상 수정 되었습니다.';
			            SIGNAL V_USER_EXCEPTION;
    			    
    			    END IF;
    			
    			
    			-- 3. 동일한 시작일자가 아닌, 기간에 포함되는 건이 1건 이거나, 0건이면, ..
    			ELSEIF V_COUNT_INCLUDE_PERIOD <= 1  THEN


    			    -- 기간에 포함되는 건이 1건 이면, 종료일을 신규건의 시작일 하루전으로 Update
                    IF V_COUNT_INCLUDE_PERIOD = 1  THEN
                    
    				    --  종료일을 신규건의 시작일 하루전으로 Update
                        UPDATE SP_NP_NET_PRICE_MST   SET
                               EFFECTIVE_END_DATE                = TO_VARCHAR(ADD_DAYS(TO_DATE(c_item.EFFECTIVE_START_DATE, 'YYYYMMDD'), -1), 'YYYYMMDD') 
				        	 
                             , LOCAL_UPDATE_DTM                  = NOW()
                             , UPDATE_USER_ID                    = :I_USER_ID
                             , SYSTEM_UPDATE_DTM                 = NOW()
				        	 
				         WHERE TENANT_ID                         = c_item.TENANT_ID
                           AND COMPANY_CODE                      = c_item.COMPANY_CODE
                           AND ORG_TYPE_CODE                     = c_item.ORG_TYPE_CODE
                           AND ORG_CODE                          = c_item.ORG_CODE
                           AND NET_PRICE_DOCUMENT_TYPE_CODE      = c_item.NET_PRICE_DOCUMENT_TYPE_CODE
                           AND NET_PRICE_SOURCE_CODE             = c_item.NET_PRICE_SOURCE_CODE
                        /*   AND NET_PRICE_SEQUENCE                = c_item.NET_PRICE_SEQUENCE    : 순번을 제외하고, 나머지 Key가 동일 한 건 */
                           AND SUPPLIER_CODE                     = c_item.SUPPLIER_CODE
                           AND MATERIAL_CODE                     = c_item.MATERIAL_CODE
                           AND MARKET_CODE                       = c_item.MARKET_CODE
                           AND CURRENCY_CODE                     = c_item.CURRENCY_CODE
                           AND c_item.EFFECTIVE_START_DATE BETWEEN EFFECTIVE_START_DATE /* 기간에 포함 되는 건 */
                                                               AND EFFECTIVE_END_DATE
    			        ;
    			        
    			        IF ::ROWCOUNT = 0 THEN
			                O_RETURN_CODE = 'NG010';
			                O_RETURN_MSG  = '단가마스터에 수정된 건이 없습니다.';
			                SIGNAL V_USER_EXCEPTION;
			                
    			        ELSEIF ::ROWCOUNT > 1 THEN
			                O_RETURN_CODE = 'NG010';
			                O_RETURN_MSG  = '단가마스터에 1건 이상 수정 되었습니다.';
			                SIGNAL V_USER_EXCEPTION;
    			        
    			        END IF;

                    END IF;
    			
                    -- 신규건 Insert
                    INSERT INTO SP_NP_NET_PRICE_MST (
                           TENANT_ID
                         , COMPANY_CODE
                         , ORG_TYPE_CODE
                         , ORG_CODE
                         , NET_PRICE_DOCUMENT_TYPE_CODE
                         , NET_PRICE_SOURCE_CODE
                         , NET_PRICE_SEQUENCE
                         , SUPPLIER_CODE
                         , MATERIAL_CODE
                         , MARKET_CODE
                         , CURRENCY_CODE
                         , EFFECTIVE_START_DATE
                         , EFFECTIVE_END_DATE
                         , PAYTERMS_CODE
                         , INCOTERMS
                         , BUYER_EMPNO
                         , TENTPRC_FLAG
                         , EXRATE_TYPE_CODE
                         , EXRATE_DATE
                         , EXRATE
                         , APPROVAL_EXCL_FLAG
                         , QUOTATION_NUMBER
                         , QUOTATION_SEQUENCE
                         , QUOTATION_ITEM_NUMBER
                         , BIDDING_NUMBER
                         , BIDDING_ITEM_NUMBER
                         , LINE_TYPE_CODE
                         , MATERIAL_DESC
                         , UOM_CODE
                         -- , SURROGATE_FLAG
                         , NET_PRICE
                         , PURCHASING_QUANTITY
                         , PURCHASING_AMOUNT
                         , VENDOR_POOL_CODE
                         , MAKER_CODE
                         -- , AGENT_NAME
                         , NET_PRICE_AGREEMENT_SIGN_FLAG
                         , NET_PRICE_AGREEMENT_STATUS_CODE
                         , PYEAR_JULY_BASE_CURRENCY_CODE
                         , PYEAR_JULY_BASE_PRICE
                         , PYEAR_JULY_CI_RATE
                         , PYEAR_DEC_BASE_CURRENCY_CODE
                         , PYEAR_DEC_BASE_PRICE
                         , PYEAR_DEC_CI_RATE
                         , QUARTER_BASE_CURRENCY_CODE
                         , QUARTER_BASE_PRICE
                         , QUARTER_CI_RATE
                         , BASE_PRICE_TYPE_CODE
                         , QUALITY_CERTI_FLAG
                         , PR_NUMBER
                         , PR_ITEM_NUMBER
                         , MATERIAL_CLASS_CODE
                         , PO_UNIT
                         , MATERIAL_PRICE_UNIT
                         , CONVERSION_NET_PRICE
                         , TAX_CODE
                         , OVERDLV_TOLERANCE
                         , HS_CODE
                         , FTA_CODE
                         
                         , LOCAL_CREATE_DTM
                         , LOCAL_UPDATE_DTM
                         , CREATE_USER_ID
                         , UPDATE_USER_ID
                         , SYSTEM_CREATE_DTM
                         , SYSTEM_UPDATE_DTM
                    ) VALUES (
                           c_item.TENANT_ID
                         , c_item.COMPANY_CODE
                         , c_item.ORG_TYPE_CODE
                         , c_item.ORG_CODE
                         , c_item.NET_PRICE_DOCUMENT_TYPE_CODE
                         , c_item.NET_PRICE_SOURCE_CODE
                         , 1
                         , c_item.SUPPLIER_CODE
                         , c_item.MATERIAL_CODE
                         , c_item.MARKET_CODE
                         , c_item.CURRENCY_CODE
                         , c_item.EFFECTIVE_START_DATE
                         , c_item.EFFECTIVE_END_DATE
                         , c_item.PAYTERMS_CODE
                         , c_item.INCOTERMS
                         , c_item.BUYER_EMPNO
                         , c_item.TENTPRC_FLAG
                         , c_item.EXRATE_TYPE_CODE
                         , c_item.EXRATE_DATE
                         , c_item.EXRATE
                         , c_item.APPROVAL_EXCL_FLAG
                         , c_item.QUOTATION_NUMBER
                         , c_item.QUOTATION_SEQUENCE
                         , c_item.QUOTATION_ITEM_NUMBER
                         , c_item.BIDDING_NUMBER
                         , c_item.BIDDING_ITEM_NUMBER
                         , c_item.LINE_TYPE_CODE
                         , c_item.MATERIAL_DESC
                         , c_item.UOM_CODE
                         -- , SURROGATE_FLAG   /* SURROGATE_TYPE_CODE 있지만, 확인 필요 */
                         , c_item.NET_PRICE
                         , c_item.PURCHASING_QUANTITY
                         , c_item.PURCHASING_AMOUNT
                         , c_item.VENDOR_POOL_CODE
                         , c_item.MAKER_CODE
                         -- , AGENT_NAME        /* AGENT_CODE가 있지만, 확인 필요 */
                         , c_item.NET_PRICE_AGREEMENT_SIGN_FLAG
                         , c_item.NET_PRICE_AGREEMENT_STATUS_CODE
                         , c_item.PYEAR_JULY_BASE_CURRENCY_CODE
                         , c_item.PYEAR_JULY_BASE_PRICE
                         , c_item.PYEAR_JULY_CI_RATE
                         , c_item.PYEAR_DEC_BASE_CURRENCY_CODE
                         , c_item.PYEAR_DEC_BASE_PRICE
                         , c_item.PYEAR_DEC_CI_RATE
                         , c_item.QUARTER_BASE_CURRENCY_CODE
                         , c_item.QUARTER_BASE_PRICE
                         , c_item.QUARTER_CI_RATE
                         , c_item.BASE_PRICE_TYPE_CODE
                         , c_item.QUALITY_CERTI_FLAG
                         , c_item.PR_NUMBER
                         , c_item.PR_ITEM_NUMBER
                         , c_item.MATERIAL_CLASS_CODE
                         , c_item.PO_UNIT
                         , c_item.MATERIAL_PRICE_UNIT
                         , c_item.CONVERSION_NET_PRICE
                         , c_item.TAX_CODE
                         , c_item.OVERDLV_TOLERANCE
                         , c_item.HS_CODE
                         , c_item.FTA_CODE
                         
                         , NOW()
                         , NOW()
                         , :I_USER_ID
                         , :I_USER_ID
                         , NOW()
                         , NOW()
                    );
                    
    			    IF ::ROWCOUNT = 0 THEN
			            O_RETURN_CODE = 'NG010';
			            O_RETURN_MSG  = '단가마스터에 등록된 건이 없습니다.';
			            SIGNAL V_USER_EXCEPTION;
			            
    			    END IF;
    			
    			ELSE
		            O_RETURN_CODE = 'NG099';
		            O_RETURN_MSG  = '예상치 못한 데이터 입니다. 확인이 필요 합니다. 시스템 담당자에게 문의 하여주십시오.';
		            SIGNAL V_USER_EXCEPTION;
    			
    			END IF;

    
            ELSEIF I_NET_PRICE_DOCUMENT_TYPE_CODE = 'C' THEN
                /* 단가 무조건 Insert */
                INSERT INTO SP_NP_NET_PRICE_MST (
                       TENANT_ID
                     , COMPANY_CODE
                     , ORG_TYPE_CODE
                     , ORG_CODE
                     , NET_PRICE_DOCUMENT_TYPE_CODE
                     , NET_PRICE_SOURCE_CODE
                     , NET_PRICE_SEQUENCE
                     , SUPPLIER_CODE
                     , MATERIAL_CODE
                     , MARKET_CODE
                     , CURRENCY_CODE
                     , EFFECTIVE_START_DATE
                     , EFFECTIVE_END_DATE
                     , PAYTERMS_CODE
                     , INCOTERMS
                     , BUYER_EMPNO
                     , TENTPRC_FLAG
                     , EXRATE_TYPE_CODE
                     , EXRATE_DATE
                     , EXRATE
                     , APPROVAL_EXCL_FLAG
                     , QUOTATION_NUMBER
                     , QUOTATION_SEQUENCE
                     , QUOTATION_ITEM_NUMBER
                     , BIDDING_NUMBER
                     , BIDDING_ITEM_NUMBER
                     , LINE_TYPE_CODE
                     , MATERIAL_DESC
                     , UOM_CODE
                     -- , SURROGATE_FLAG
                     , NET_PRICE
                     , PURCHASING_QUANTITY
                     , PURCHASING_AMOUNT
                     , VENDOR_POOL_CODE
                     , MAKER_CODE
                     -- , AGENT_NAME
                     , NET_PRICE_AGREEMENT_SIGN_FLAG
                     , NET_PRICE_AGREEMENT_STATUS_CODE
                     , PYEAR_JULY_BASE_CURRENCY_CODE
                     , PYEAR_JULY_BASE_PRICE
                     , PYEAR_JULY_CI_RATE
                     , PYEAR_DEC_BASE_CURRENCY_CODE
                     , PYEAR_DEC_BASE_PRICE
                     , PYEAR_DEC_CI_RATE
                     , QUARTER_BASE_CURRENCY_CODE
                     , QUARTER_BASE_PRICE
                     , QUARTER_CI_RATE
                     , BASE_PRICE_TYPE_CODE
                     , QUALITY_CERTI_FLAG
                     , PR_NUMBER
                     , PR_ITEM_NUMBER
                     , MATERIAL_CLASS_CODE
                     , PO_UNIT
                     , MATERIAL_PRICE_UNIT
                     , CONVERSION_NET_PRICE
                     , TAX_CODE
                     , OVERDLV_TOLERANCE
                     , HS_CODE
                     , FTA_CODE
                     
                     , LOCAL_CREATE_DTM
                     , LOCAL_UPDATE_DTM
                     , CREATE_USER_ID
                     , UPDATE_USER_ID
                     , SYSTEM_CREATE_DTM
                     , SYSTEM_UPDATE_DTM
                ) VALUES (
                       c_item.TENANT_ID
                     , c_item.COMPANY_CODE
                     , c_item.ORG_TYPE_CODE
                     , c_item.ORG_CODE
                     , c_item.NET_PRICE_DOCUMENT_TYPE_CODE
                     , c_item.NET_PRICE_SOURCE_CODE
                     , (SELECT IFNULL(MAX(S.NET_PRICE_SEQUENCE), 0) + 1
                          FROM SP_NP_NET_PRICE_MST  S
                         WHERE S.TENANT_ID              = c_item.TENANT_ID
                           AND S.COMPANY_CODE           = c_item.COMPANY_CODE
                           AND S.ORG_TYPE_CODE          = c_item.ORG_TYPE_CODE
                           AND S.ORG_CODE               = c_item.ORG_CODE
                           AND S.NET_PRICE_DOCUMENT_TYPE_CODE = c_item.NET_PRICE_DOCUMENT_TYPE_CODE
                           AND S.NET_PRICE_SOURCE_CODE  = c_item.NET_PRICE_SOURCE_CODE
                           AND S.SUPPLIER_CODE          = c_item.SUPPLIER_CODE
                           AND S.MATERIAL_CODE          = c_item.MATERIAL_CODE
                           AND S.MARKET_CODE            = c_item.MARKET_CODE
                           AND S.CURRENCY_CODE          = c_item.CURRENCY_CODE
                           AND S.EFFECTIVE_START_DATE   = c_item.EFFECTIVE_START_DATE
                       )
                     , c_item.SUPPLIER_CODE
                     , c_item.MATERIAL_CODE
                     , c_item.MARKET_CODE
                     , c_item.CURRENCY_CODE
                     , c_item.EFFECTIVE_START_DATE
                     , c_item.EFFECTIVE_END_DATE
                     , c_item.PAYTERMS_CODE
                     , c_item.INCOTERMS
                     , c_item.BUYER_EMPNO
                     , c_item.TENTPRC_FLAG
                     , c_item.EXRATE_TYPE_CODE
                     , c_item.EXRATE_DATE
                     , c_item.EXRATE
                     , c_item.APPROVAL_EXCL_FLAG
                     , c_item.QUOTATION_NUMBER
                     , c_item.QUOTATION_SEQUENCE
                     , c_item.QUOTATION_ITEM_NUMBER
                     , c_item.BIDDING_NUMBER
                     , c_item.BIDDING_ITEM_NUMBER
                     , c_item.LINE_TYPE_CODE
                     , c_item.MATERIAL_DESC
                     , c_item.UOM_CODE
                     -- , SURROGATE_FLAG   /* SURROGATE_TYPE_CODE 있지만, 확인 필요 */
                     , c_item.NET_PRICE
                     , c_item.PURCHASING_QUANTITY
                     , c_item.PURCHASING_AMOUNT
                     , c_item.VENDOR_POOL_CODE
                     , c_item.MAKER_CODE
                     -- , AGENT_NAME        /* AGENT_CODE가 있지만, 확인 필요 */
                     , c_item.NET_PRICE_AGREEMENT_SIGN_FLAG
                     , c_item.NET_PRICE_AGREEMENT_STATUS_CODE
                     , c_item.PYEAR_JULY_BASE_CURRENCY_CODE
                     , c_item.PYEAR_JULY_BASE_PRICE
                     , c_item.PYEAR_JULY_CI_RATE
                     , c_item.PYEAR_DEC_BASE_CURRENCY_CODE
                     , c_item.PYEAR_DEC_BASE_PRICE
                     , c_item.PYEAR_DEC_CI_RATE
                     , c_item.QUARTER_BASE_CURRENCY_CODE
                     , c_item.QUARTER_BASE_PRICE
                     , c_item.QUARTER_CI_RATE
                     , c_item.BASE_PRICE_TYPE_CODE
                     , c_item.QUALITY_CERTI_FLAG
                     , c_item.PR_NUMBER
                     , c_item.PR_ITEM_NUMBER
                     , c_item.MATERIAL_CLASS_CODE
                     , c_item.PO_UNIT
                     , c_item.MATERIAL_PRICE_UNIT
                     , c_item.CONVERSION_NET_PRICE
                     , c_item.TAX_CODE
                     , c_item.OVERDLV_TOLERANCE
                     , c_item.HS_CODE
                     , c_item.FTA_CODE
                     
                     , NOW()
                     , NOW()
                     , :I_USER_ID
                     , :I_USER_ID
                     , NOW()
                     , NOW()
                );
            END IF;
            
        END FOR;

    END;


    O_RETURN_CODE = 'OK';
    O_RETURN_MSG  = 'Success';  -- 처리 완료
                                                
END;