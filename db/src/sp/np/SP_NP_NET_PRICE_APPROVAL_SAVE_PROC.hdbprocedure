PROCEDURE SP_NP_NET_PRICE_APPROVAL_SAVE_PROC (
/*
    단가품의 저장처리
      1. 기본값 체크 및 데이터 정합성 체크
      2. Approval Master 데이터 저장 처리
        - Approval Number가 없으면, 신규 Approval Number 신규 체번 후, Master데이터 Inster
        - Approval Number가 존재하면, Update
      3. Approval Detail 데이터 저장 처리
        - row_state에 따라, CUD 처리
*/
     IN   I_TENANT_ID                      NVARCHAR(20)
    ,IN   I_COMPANY_CODE                   NVARCHAR(10)
    ,IN   I_APPROVAL_NUMBER                NVARCHAR(20)

    ,IN   I_APPROVAL_TITLE                 NVARCHAR(300)
    ,IN   I_APPROVAL_CONTENTS              NCLOB
    ,IN   I_ATTCH_GROUP_NUMBER             NVARCHAR(100)

    ,IN   I_NET_PRICE_DOCUMENT_TYPE_CODE   NVARCHAR(30)
    ,IN   I_NET_PRICE_SOURCE_CODE          NVARCHAR(30)
    ,IN   I_BUYER_EMPNO                    NVARCHAR(30)
    ,IN   I_OUTCOME_CODE                   NVARCHAR(30)

    ,IN   I_DETAILS                           TABLE (
                                               ITEM_SEQUENCE                      NVARCHAR(20)

                                              ,ORG_CODE                           NVARCHAR(10)
                                              ,LINE_TYPE_CODE                     NVARCHAR(30)
                                              ,MATERIAL_CODE                      NVARCHAR(40)
                                              ,PAYTERMS_CODE                      NVARCHAR(30)
                                              ,SUPPLIER_CODE                      NVARCHAR(10)
                                              ,EFFECTIVE_START_DATE               NVARCHAR(10)
                                              ,EFFECTIVE_END_DATE                 NVARCHAR(10)
                                            --  ,SURROGATE_TYPE_CODE                NVARCHAR(30)
                                              ,CURRENCY_CODE                      NVARCHAR(3)
                                              ,NET_PRICE                          DECIMAL(34,10)
                                              ,VENDOR_POOL_CODE                   NVARCHAR(20)
                                              ,MARKET_CODE                        NVARCHAR(30)
                                              ,NET_PRICE_APPROVAL_REASON_CODE     NVARCHAR(30)
                                              ,NET_PRICE_TYPE_CODE                NVARCHAR(30)
                                              ,MAKER_CODE                         NVARCHAR(10)
                                              ,INCOTERMS                          NVARCHAR(3)

                                              ,_ROW_STATE_                        NVARCHAR(3)
                                           )

    ,IN   I_APPROVERS                         TABLE (
                                               APPROVE_SEQUENCE                   NVARCHAR(20)
                                              ,APPROVER_EMPNO                     NVARCHAR(30)
                                              ,APPROVER_TYPE_CODE                 NVARCHAR(30)
                                              ,_ROW_STATE_                        NVARCHAR(3)   /* 현재 사용하지 않음. : 전체 삭제 후 다시 Insert */
                                           )

    ,IN   I_REFERERS                          TABLE (
                                               REFERER_EMPNO                      NVARCHAR(30)
                                           )
    ,IN   I_USER_ID                        NVARCHAR(255)
    ,OUT  O_RETURN_CODE                    NVARCHAR(5)
    ,OUT  O_RETURN_MSG                     NVARCHAR(1000)
    ,OUT  O_DB_ERROR_MSG                   NVARCHAR(1000)
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
AS
BEGIN

    /*******************************************************************************
    *********** 변수 선언 **********************************************************
    *******************************************************************************/

    /* Parameter I_DETAILS 유효성 체크 위한 Cursor */
    DECLARE CURSOR c_Details  FOR
    SELECT
           DTL.ORG_CODE
          ,DTL.MATERIAL_CODE
          ,(SELECT S.MATERIAL_CODE
              FROM DP_MM_MATERIAL_MST S
             WHERE S.TENANT_ID       = I_TENANT_ID
               AND S.MATERIAL_CODE   = DTL.MATERIAL_CODE
           ) AS DB_MATERIAL_CODE
           
          ,DTL.PAYTERMS_CODE
          ,(SELECT S.CODE
              FROM CM_CODE_DTL S
             WHERE S.TENANT_ID  = I_TENANT_ID
               AND S.GROUP_CODE = 'PAYMENT_TERMS'   
               AND S.CODE       = DTL.PAYTERMS_CODE
           ) AS DB_PAYTERMS_CODE    -- 지불조건코드
           
          ,DTL.SUPPLIER_CODE
          ,(SELECT S.SUPPLIER_CODE
              FROM SP_SM_SUPPLIER_MST S
             WHERE S.TENANT_ID       = I_TENANT_ID
               AND S.SUPPLIER_CODE   = DTL.SUPPLIER_CODE
           ) AS DB_SUPPLIER_CODE    -- 공급업체코드
          ,DTL.EFFECTIVE_START_DATE -- YYYYMMDD
          ,DTL.EFFECTIVE_END_DATE   -- YYYYMMDD
          ,DTL.NET_PRICE
          ,DTL.CURRENCY_CODE
          ,(SELECT S.CURRENCY_CODE
              FROM CM_CURRENCY S
             WHERE S.TENANT_ID       = I_TENANT_ID
               AND S.CURRENCY_CODE   = DTL.CURRENCY_CODE
               AND S.USE_FLAG        = true
           ) AS DB_CURRENCY_CODE    -- 공급업체코드
          
          ,DTL.VENDOR_POOL_CODE
          ,(SELECT S.VENDOR_POOL_CODE
              FROM PG_VP_VENDOR_POOL_MST S
             WHERE S.TENANT_ID       = I_TENANT_ID
            /* AND org_code   ::  일단 무시 Vendor Pool에서 Org의 의미 확인 필요 */
               AND S.VENDOR_POOL_CODE   = DTL.VENDOR_POOL_CODE
           ) AS DB_VENDOR_POOL_CODE    -- 협력사풀코드
          
          ,DTL.MARKET_CODE
          ,(SELECT S.CODE
              FROM CM_CODE_DTL S
             WHERE S.TENANT_ID  = I_TENANT_ID
               AND S.GROUP_CODE = 'DP_VI_MARKET_CODE'   
               AND S.CODE       = DTL.MARKET_CODE
           ) AS DB_MARKET_CODE      -- 납선코드
          
          ,DTL.NET_PRICE_APPROVAL_REASON_CODE AS APPROVAL_REASON_CODE
          ,(SELECT S.CODE
              FROM CM_CODE_DTL S
             WHERE S.TENANT_ID  = I_TENANT_ID
               AND S.GROUP_CODE = 'SP_NET_PRICE_REASON_CODE'   
               AND S.CODE       = DTL.NET_PRICE_APPROVAL_REASON_CODE
           ) AS DB_APPROVAL_REASON_CODE      -- 단가품의사유코드
           
          ,DTL.NET_PRICE_TYPE_CODE
          ,(SELECT S.CODE
              FROM CM_CODE_DTL S
             WHERE S.TENANT_ID  = I_TENANT_ID
               AND S.GROUP_CODE = 'SP_NET_PRICE_TYPE'   
               AND S.CODE       = DTL.NET_PRICE_TYPE_CODE
           ) AS DB_NET_PRICE_TYPE_CODE      -- 단가유형코드
           
          ,DTL.MAKER_CODE
          ,(SELECT S.MAKER_CODE
              FROM SP_SM_MAKER_CAL_VIEW S
             WHERE S.TENANT_ID       = I_TENANT_ID
            /* AND org_code   ::  일단 무시 Vendor Pool에서 Org의 의미 확인 필요 */
               AND S.MAKER_CODE   = DTL.MAKER_CODE
           ) AS DB_MAKER_CODE    -- 협력사풀코드
          
          ,DTL.INCOTERMS
          ,(SELECT S.CODE
              FROM CM_CODE_DTL S
             WHERE S.TENANT_ID  = I_TENANT_ID
               AND S.GROUP_CODE = 'OP_INCOTERMS'   
               AND S.CODE       = DTL.INCOTERMS
           ) AS DB_INCOTERMS      -- 단가유형코드
      
      FROM :I_DETAILS   DTL
     WHERE DTL._ROW_STATE_     in ('C','U') /* 신규 및 수정 만 체크 */
    ;



    DECLARE V_APPROVAL_NUMBER NVARCHAR(20) = I_APPROVAL_NUMBER;
    DECLARE V_CURRENT_STATUS_CODE           NVARCHAR(30);

    DECLARE V_TENANT_ID                     NVARCHAR(20);
    DECLARE V_COMPANY_CODE                  NVARCHAR(10);
    DECLARE V_NET_PRICE_DOCUMENT_TYPE_CODE  NVARCHAR(30);
    DECLARE V_NET_PRICE_SOURCE_CODE         NVARCHAR(30);
    DECLARE V_OUTCOME_CODE                  NVARCHAR(30);


    /*******************************************************************************
    *********** Exception 정의 *****************************************************
    *******************************************************************************/

    /* 사용자 정의 Exception */
    DECLARE V_USER_EXCEPTION CONDITION FOR SQL_ERROR_CODE 19999;

    /* 사용자 정의 Exception시, 종료 처리 : 이전 Exception Catch 부분에서 결과 메시지 등록 됨. */
    DECLARE EXIT HANDLER FOR V_USER_EXCEPTION
    BEGIN
        O_RETURN_CODE = 'NG';
        O_DB_ERROR_MSG = ::SQL_ERROR_MESSAGE;
    END;

    /* 사용자 정의 이외 Exception 발생시 처리 : 발생될 가능성 낮음. */
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        O_RETURN_CODE = 'NG';
        O_RETURN_MSG  = '정의되지 않은 오류';
        O_DB_ERROR_MSG = ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE;
    END;
    


    /*******************************************************************************
    *********** 처리 로직 **********************************************************
    *******************************************************************************/

    /* 수정이면(Approval Number 존재하면), 기존 상태 체크 */
    IF I_APPROVAL_NUMBER IS NOT NULL AND I_APPROVAL_NUMBER != '' THEN
        BEGIN
            /* 해당 Block에서 Exception 발생시, 사용자 정의 Exception 발생 시킴. */
            DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1299 
            BEGIN
                O_RETURN_MSG  = '존재하지 않는 품의 정보 입니다.';
                SIGNAL V_USER_EXCEPTION;
            END;
    
            DECLARE EXIT HANDLER FOR SQLEXCEPTION
            BEGIN
                O_RETURN_MSG  = '단가품의 상태 조회시 오류';
                SIGNAL V_USER_EXCEPTION SET MESSAGE_TEXT = ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE;
            END;
    
            SELECT APPROVE_STATUS_CODE
              INTO V_CURRENT_STATUS_CODE
              FROM CM_APPROVAL_MST 
             WHERE TENANT_ID          = :I_TENANT_ID
               AND APPROVAL_NUMBER    = :I_APPROVAL_NUMBER
            ;
        END;
    
        IF V_CURRENT_STATUS_CODE IS NULL OR V_CURRENT_STATUS_CODE NOT IN ('DR') THEN
            O_RETURN_MSG  = 'Draft 상태가 아니면, 수정이 불가능 합니다.';
            SIGNAL V_USER_EXCEPTION;
        END IF;

    END IF;


    /* 입력값 필수 체크 */
    IF I_TENANT_ID IS NULL OR TRIM(I_TENANT_ID) = '' THEN
        O_RETURN_MSG  = 'Tenant Id 는 필수 입니다.';
        SIGNAL V_USER_EXCEPTION;
    /*
    ELSEIF I_COMPANY_CODE IS NULL OR TRIM(I_COMPANY_CODE) = '' THEN
        O_RETURN_MSG  = 'Company Code 는 필수 입니다.';
        SIGNAL V_USER_EXCEPTION;
    */
    ELSEIF I_APPROVAL_TITLE IS NULL OR TRIM(I_APPROVAL_TITLE) = '' THEN
        O_RETURN_MSG  = '품의 제목은 필수 입니다.';
        SIGNAL V_USER_EXCEPTION;

    ELSEIF I_NET_PRICE_DOCUMENT_TYPE_CODE IS NULL OR TRIM(I_NET_PRICE_DOCUMENT_TYPE_CODE) = '' THEN
        O_RETURN_MSG  = '단가문서유형코드는 필수 입니다.';
        SIGNAL V_USER_EXCEPTION;
    
    ELSEIF I_NET_PRICE_SOURCE_CODE IS NULL OR TRIM(I_NET_PRICE_SOURCE_CODE) = '' THEN
        O_RETURN_MSG  = '단가출처코드는 필수 입니다.';
        SIGNAL V_USER_EXCEPTION;

    END IF;

    /* 입력값 유효성 체크 */
    BEGIN
        /* 해당 Block에서 Exception 발생시, 사용자 정의 Exception 발생 시킴. */
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            O_RETURN_MSG  = '단가품의 마스터 데이터 체크 중 오류 발생';
            SIGNAL V_USER_EXCEPTION SET MESSAGE_TEXT = ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE;
        END;
    
        SELECT (SELECT S.TENANT_ID
                  FROM CM_ORG_TENANT S
                 WHERE S.TENANT_ID    = I_TENANT_ID
               ) AS TENANT_ID

              ,(SELECT S.COMPANY_CODE
                  FROM CM_ORG_COMPANY S
                 WHERE S.TENANT_ID    = I_TENANT_ID
                   AND S.COMPANY_CODE = I_COMPANY_CODE
               ) AS COMPANY_CODE

              ,(SELECT S.CODE
                  FROM CM_CODE_DTL S
                 WHERE S.TENANT_ID    = I_TENANT_ID
                   AND S.GROUP_CODE   = 'SP_DOCUMENT_TYPE'
                   AND S.CODE         = I_NET_PRICE_DOCUMENT_TYPE_CODE
               ) AS NET_PRICE_DOCUMENT_TYPE_CODE

              ,(SELECT S.CODE
                  FROM CM_CODE_DTL S
                 WHERE S.TENANT_ID    = I_TENANT_ID
                   AND S.GROUP_CODE   = 'NET_PRICE_SOURCE_CODE'   
                   AND S.CODE         = I_NET_PRICE_SOURCE_CODE
               ) AS NET_PRICE_SOURCE_CODE
                   
              ,(SELECT S.CODE
                  FROM CM_CODE_DTL S
                 WHERE S.TENANT_ID  = I_TENANT_ID
                   AND S.GROUP_CODE = 'SP_SC_OUTCOME'   
                   AND S.CODE       = I_OUTCOME_CODE
               ) AS OUTCOME_CODE
        
          INTO V_TENANT_ID
              ,V_COMPANY_CODE
              ,V_NET_PRICE_DOCUMENT_TYPE_CODE
              ,V_NET_PRICE_SOURCE_CODE
              ,V_OUTCOME_CODE
            
          FROM DUMMY
        ;

    END;

    -- 단가문서유형코드가 존재하는데, DB 공통코드에 존재하지 않는 코드 이면, 오류
    IF I_TENANT_ID IS NOT NULL AND TRIM(I_TENANT_ID) != '' AND (V_TENANT_ID IS NULL OR TRIM(V_TENANT_ID) = '') THEN
        O_RETURN_MSG  = 'Tenant Id 가 유효하지 않습니다.';
        SIGNAL V_USER_EXCEPTION;
    /*
    -- 단가문서유형코드가 존재하는데, DB 공통코드에 존재하지 않는 코드 이면, 오류
    ELSEIF I_COMPANY_CODE IS NOT NULL AND TRIM(I_COMPANY_CODE) != '' AND (V_COMPANY_CODE IS NULL OR TRIM(V_COMPANY_CODE) = '') THEN
        O_RETURN_MSG  = 'Company Code 가 유효하지 않습니다.';
        SIGNAL V_USER_EXCEPTION;
    */
    -- 단가문서유형코드가 존재하는데, DB 공통코드에 존재하지 않는 코드 이면, 오류
    ELSEIF I_NET_PRICE_DOCUMENT_TYPE_CODE IS NOT NULL AND TRIM(I_NET_PRICE_DOCUMENT_TYPE_CODE) != '' AND (V_NET_PRICE_DOCUMENT_TYPE_CODE IS NULL OR TRIM(V_NET_PRICE_DOCUMENT_TYPE_CODE) = '') THEN
        O_RETURN_MSG  = 'Netprice Document Type Code 가 유효하지 않습니다.';
        SIGNAL V_USER_EXCEPTION;
    
    -- 단가출처코드가 존재하는데, DB 공통코드에 존재하지 않는 코드 이면, 오류
    ELSEIF I_NET_PRICE_SOURCE_CODE IS NOT NULL AND TRIM(I_NET_PRICE_SOURCE_CODE) != '' AND (V_NET_PRICE_SOURCE_CODE IS NULL OR TRIM(V_NET_PRICE_SOURCE_CODE) = '') THEN
        O_RETURN_MSG  = 'Netprice Source Code 가 유효하지 않습니다.';
        SIGNAL V_USER_EXCEPTION;
    
    -- OutCome코드가 존재하는데, DB 공통코드에 존재하지 않는 코드 이면, 오류
    ELSEIF I_OUTCOME_CODE IS NOT NULL AND TRIM(I_OUTCOME_CODE) != '' AND (V_OUTCOME_CODE IS NULL OR TRIM(V_OUTCOME_CODE) = '') THEN
        O_RETURN_MSG  = 'Outcome Code 가 유효하지 않습니다.';
        SIGNAL V_USER_EXCEPTION;
    END IF;




    /* 입력값 유효성 체크(Detail) */
    FOR c_item as c_Details DO
    
        -- Material Code
        IF c_item.MATERIAL_CODE IS NULL OR TRIM(c_item.MATERIAL_CODE) = '' THEN
            O_RETURN_MSG  = '자재코드는 필수 입니다.';
            SIGNAL V_USER_EXCEPTION;
    
        ELSEIF c_item.DB_MATERIAL_CODE IS NULL OR TRIM(c_item.DB_MATERIAL_CODE) = '' THEN
            O_RETURN_MSG  = '유효하지 않은 자재코드가 존재합니다.';
            SIGNAL V_USER_EXCEPTION;
    

        -- Payterms Code
        ELSEIF c_item.PAYTERMS_CODE IS NOT NULL AND TRIM(c_item.PAYTERMS_CODE) != '' AND (c_item.DB_PAYTERMS_CODE IS NULL OR TRIM(c_item.DB_PAYTERMS_CODE) = '') THEN
            O_RETURN_MSG  = '유효하지 않은 Payterms Code 가 존재합니다.';
            SIGNAL V_USER_EXCEPTION;


        -- Supplier Code
        ELSEIF c_item.SUPPLIER_CODE IS NULL OR TRIM(c_item.SUPPLIER_CODE) = '' THEN
            O_RETURN_MSG  = '공급업체코드는 필수 입니다.';
            SIGNAL V_USER_EXCEPTION;

        ELSEIF c_item.DB_SUPPLIER_CODE IS NULL OR TRIM(c_item.DB_SUPPLIER_CODE) = '' THEN
            O_RETURN_MSG  = '유효하지 않은  공급업체코드가 존재합니다.';
            SIGNAL V_USER_EXCEPTION;
        
            
        -- 유효시작일자
        ELSEIF c_item.EFFECTIVE_START_DATE IS NULL OR TRIM(c_item.EFFECTIVE_START_DATE) = '' THEN
            O_RETURN_MSG  = '유효시작일자는 필수 입니다.';
            SIGNAL V_USER_EXCEPTION;


        -- 유효종료일자
        ELSEIF c_item.EFFECTIVE_END_DATE IS NULL OR TRIM(c_item.EFFECTIVE_END_DATE) = '' THEN
            O_RETURN_MSG  = '유효종료일자는 필수 입니다.';
            SIGNAL V_USER_EXCEPTION;


        -- 단가 코드
        ELSEIF c_item.NET_PRICE IS NULL THEN
            O_RETURN_MSG  = '단가는 필수 입니다.';
            SIGNAL V_USER_EXCEPTION;


        -- 통화 코드
        ELSEIF c_item.CURRENCY_CODE IS NULL OR TRIM(c_item.CURRENCY_CODE) = '' THEN
            O_RETURN_MSG  = '통화 코드는 필수 입니다.';
            SIGNAL V_USER_EXCEPTION;

        ELSEIF c_item.DB_CURRENCY_CODE IS NULL OR TRIM(c_item.DB_CURRENCY_CODE) = '' THEN
            O_RETURN_MSG  = '유효하지 않은 통화 코드 가 존재합니다.';
            SIGNAL V_USER_EXCEPTION;


        -- Vendor Pool Code
        ELSEIF c_item.VENDOR_POOL_CODE IS NOT NULL AND TRIM(c_item.VENDOR_POOL_CODE) != '' AND (c_item.DB_VENDOR_POOL_CODE IS NULL OR TRIM(c_item.DB_VENDOR_POOL_CODE) = '') THEN
            O_RETURN_MSG  = '유효하지 않은 협력사풀코드가 존재합니다.';
            SIGNAL V_USER_EXCEPTION;
        /*
        ELSEIF c_item.VENDOR_POOL_CODE IS NULL OR TRIM(c_item.VENDOR_POOL_CODE) = '' THEN
            O_RETURN_MSG  = 'Vendor Pool Code는 필수 입니다.';
            SIGNAL V_USER_EXCEPTION;
        
        ELSEIF c_item.DB_VENDOR_POOL_CODE IS NULL OR TRIM(c_item.DB_VENDOR_POOL_CODE) = '' THEN
            O_RETURN_MSG  = '유효하지 않은 Vendor Pool Code 가 존재합니다.';
            SIGNAL V_USER_EXCEPTION;
        */

        -- Market Code (납선코드)
        ELSEIF c_item.MARKET_CODE IS NULL OR TRIM(c_item.MARKET_CODE) = '' THEN
            O_RETURN_MSG  = '납선코드는 필수 입니다.';
            SIGNAL V_USER_EXCEPTION;
        
        ELSEIF c_item.DB_MARKET_CODE IS NULL OR TRIM(c_item.DB_MARKET_CODE) = '' THEN
            O_RETURN_MSG  = '유효하지 않은 납선코드가 존재합니다.';
            SIGNAL V_USER_EXCEPTION;


        -- Net Price Approval Reason Code
        ELSEIF c_item.APPROVAL_REASON_CODE IS NOT NULL AND TRIM(c_item.APPROVAL_REASON_CODE) != '' AND (c_item.DB_APPROVAL_REASON_CODE IS NULL OR TRIM(c_item.DB_APPROVAL_REASON_CODE) = '') THEN
            O_RETURN_MSG  = '유효하지 않은 사유코드가 존재합니다.';
            SIGNAL V_USER_EXCEPTION;

        /*
        -- Net Price Type Code
        ELSEIF c_item.NET_PRICE_TYPE_CODE IS NULL OR TRIM(c_item.NET_PRICE_TYPE_CODE) = '' THEN
            O_RETURN_MSG  = 'Net Price Type Code는 필수 입니다.';
            SIGNAL V_USER_EXCEPTION;
        
        ELSEIF c_item.DB_NET_PRICE_TYPE_CODE IS NULL OR TRIM(c_item.DB_NET_PRICE_TYPE_CODE) = '' THEN
            O_RETURN_MSG  = '유효하지 않은 Net Price Type Code 가 존재합니다.';
            SIGNAL V_USER_EXCEPTION;
        */

        -- Maker Code
        ELSEIF c_item.MAKER_CODE IS NOT NULL AND TRIM(c_item.MAKER_CODE) != '' AND (c_item.DB_MAKER_CODE IS NULL OR TRIM(c_item.DB_MAKER_CODE) = '') THEN
            O_RETURN_MSG  = '유효하지 않은 제조사코드가 존재합니다.';
            SIGNAL V_USER_EXCEPTION;


        -- Maker Code
        ELSEIF c_item.INCOTERMS IS NOT NULL AND TRIM(c_item.INCOTERMS) != '' AND (c_item.DB_INCOTERMS IS NULL OR TRIM(c_item.DB_INCOTERMS) = '') THEN
            O_RETURN_MSG  = '유효하지 않은 Incoterms 가 존재합니다.';
            SIGNAL V_USER_EXCEPTION;

        END IF;

    END FOR;



    /* Approval Number가 없으면, Master 신규 등록 */
    IF V_APPROVAL_NUMBER IS NULL OR V_APPROVAL_NUMBER = '' THEN

        BEGIN
            /* 해당 Block에서 Exception 발생시, 사용자 정의 Exception 발생 시킴. */
            DECLARE EXIT HANDLER FOR SQLEXCEPTION
            BEGIN
                O_RETURN_MSG  = '단가품의 번호 채번시 오류';
                SIGNAL V_USER_EXCEPTION SET MESSAGE_TEXT = ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE;
            END;
        
            SELECT 'N' || TO_CHAR(NOW(), 'YYYYMMDD') || IFNULL(LPAD(RIGHT(MAX(APPROVAL_NUMBER), 4) + 1, 4, 0), '0001')
              INTO V_APPROVAL_NUMBER
              FROM CM_APPROVAL_MST 
             WHERE TENANT_ID          = :I_TENANT_ID
               AND APPROVAL_NUMBER LIKE 'N' || TO_CHAR(NOW(), 'YYYYMMDD') || '%'
            ;
        END;
        
        BEGIN
            /* 해당 Block에서 Exception 발생시, 사용자 정의 Exception 발생 시킴. */
            DECLARE EXIT HANDLER FOR SQLEXCEPTION
            BEGIN
                O_RETURN_MSG  = '단가품의 저장 오류';
                SIGNAL V_USER_EXCEPTION SET MESSAGE_TEXT = ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE;
            END;
        
            INSERT INTO CM_APPROVAL_MST (
                  TENANT_ID
                , APPROVAL_NUMBER
                , LEGACY_APPROVAL_NUMBER
                , COMPANY_CODE
                , ORG_TYPE_CODE
                , ORG_CODE
                , CHAIN_CODE
                , APPROVAL_TYPE_CODE
                , APPROVAL_TITLE
                , APPROVAL_CONTENTS
                , APPROVE_STATUS_CODE
                , REQUESTOR_EMPNO
                , REQUEST_DATE
                , ATTCH_GROUP_NUMBER
                , LOCAL_CREATE_DTM
                , LOCAL_UPDATE_DTM
                , CREATE_USER_ID
                , UPDATE_USER_ID
                , SYSTEM_CREATE_DTM
                , SYSTEM_UPDATE_DTM
            ) VALUES (
                  I_TENANT_ID                -- TENANT_ID
                , V_APPROVAL_NUMBER          -- APPROVAL_NUMBER
                , NULL                       -- LEGACY_APPROVAL_NUMBER
                , 'LGCKR'      --I_COMPANY_CODE             -- COMPANY_CODE
                , NULL                       -- ORG_TYPE_CODE
                , NULL                       -- ORG_CODE
                , 'SP'                       -- CHAIN_CODE
                
                , 'NPA01'                    -- APPROVAL_TYPE_CODE
                
                , I_APPROVAL_TITLE           -- APPROVAL_TITLE
                , I_APPROVAL_CONTENTS        -- APPROVAL_CONTENTS
                , 'DR'                       -- APPROVE_STATUS_CODE
                , :I_USER_ID                 -- REQUESTOR_EMPNO
                , TO_CHAR(NOW(),'YYYYMMDD')  -- REQUEST_DATE
                , I_ATTCH_GROUP_NUMBER       -- ATTCH_GROUP_NUMBER
                , NOW()
                , NOW()
                , :I_USER_ID
                , :I_USER_ID
                , NOW()
                , NOW()
            );
        END;
        
        BEGIN
        
            DECLARE EXIT HANDLER FOR SQLEXCEPTION
            BEGIN
                O_RETURN_MSG  = '단가품의 마스터 등록 오류';
                SIGNAL V_USER_EXCEPTION SET MESSAGE_TEXT = ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE;
            END;
        
            INSERT INTO SP_NP_NET_PRICE_APPROVAL_MST (
                   TENANT_ID
                 , APPROVAL_NUMBER
                 -- APPROVE_STATUS_CODE  상태 코드 추가 되어야 함.
                 , NET_PRICE_DOCUMENT_TYPE_CODE
                 , NET_PRICE_SOURCE_CODE
                 , QUOTATION_NUMBER
                 , QUOTATION_SEQUENCE
                 , BIDDING_TYPE_CODE
                 , BUYER_EMPNO
                 , EFFECTIVE_START_DATE
                 , EFFECTIVE_END_DATE
                 , OUTCOME_CODE
                 , BASE_PRICE_INPUT_FLAG
                 , APPROVAL_EXCL_FLAG
                 , LOCAL_CREATE_DTM
                 , LOCAL_UPDATE_DTM
                 , CREATE_USER_ID
                 , UPDATE_USER_ID
                 , SYSTEM_CREATE_DTM
                 , SYSTEM_UPDATE_DTM
            ) VALUES (
                   I_TENANT_ID                       -- TENANT_ID
                 , V_APPROVAL_NUMBER                 -- APPROVAL_NUMBER
                 , I_NET_PRICE_DOCUMENT_TYPE_CODE    -- NET_PRICE_DOCUMENT_TYPE_CODE
                 , I_NET_PRICE_SOURCE_CODE           -- NET_PRICE_SOURCE_CODE
                 , NULL                              -- QUOTATION_NUMBER
                 , NULL                              -- QUOTATION_SEQUENCE
                 , NULL                              -- BIDDING_TYPE_CODE
                 , I_BUYER_EMPNO                     -- BUYER_EMPNO
                 , NULL                              -- EFFECTIVE_START_DATE
                 , NULL                              -- EFFECTIVE_END_DATE
                 , I_OUTCOME_CODE                    -- OUTCOME_CODE
                 , false                             -- BASE_PRICE_INPUT_FLAG 하위 데이터 
                 , NULL                              -- APPROVAL_EXCL_FLAG
                 , NOW()
                 , NOW()
                 , :I_USER_ID
                 , :I_USER_ID
                 , NOW()
                 , NOW()
            );
        END;
        
        
    ELSE 
    
        BEGIN
            /* 해당 Block에서 Exception 발생시, 사용자 정의 Exception 발생 시킴. */
            DECLARE EXIT HANDLER FOR SQLEXCEPTION
            BEGIN
                O_RETURN_MSG  = '단가품의 저장 오류';
                SIGNAL V_USER_EXCEPTION SET MESSAGE_TEXT = ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE;
            END;
        
            UPDATE CM_APPROVAL_MST SET
                   APPROVAL_TITLE        = I_APPROVAL_TITLE
                 , APPROVAL_CONTENTS     = I_APPROVAL_CONTENTS
                 , LOCAL_UPDATE_DTM      = NOW()
                 , UPDATE_USER_ID        = :I_USER_ID
                 , SYSTEM_UPDATE_DTM     = NOW()
             WHERE TENANT_ID             = I_TENANT_ID
               AND APPROVAL_NUMBER       = V_APPROVAL_NUMBER
            ;
        END;
        
        BEGIN
        
            DECLARE EXIT HANDLER FOR SQLEXCEPTION
            BEGIN
                O_RETURN_MSG  = '단가품의 마스터 수정 오류';
                SIGNAL V_USER_EXCEPTION SET MESSAGE_TEXT = ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE;
            END;
        
            UPDATE SP_NP_NET_PRICE_APPROVAL_MST SET
                   NET_PRICE_DOCUMENT_TYPE_CODE   = I_NET_PRICE_DOCUMENT_TYPE_CODE
                 , NET_PRICE_SOURCE_CODE          = I_NET_PRICE_SOURCE_CODE
                 , BUYER_EMPNO                    = I_BUYER_EMPNO
                 , OUTCOME_CODE                   = I_OUTCOME_CODE
                 , LOCAL_UPDATE_DTM               = NOW()
                 , UPDATE_USER_ID                 = :I_USER_ID
                 , SYSTEM_UPDATE_DTM              = NOW()
                 
             WHERE TENANT_ID           = I_TENANT_ID
               AND APPROVAL_NUMBER     = V_APPROVAL_NUMBER
            ;
        END;
    
    END IF;


    BEGIN

        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            O_RETURN_MSG  = '단가품의 상세 삭제 오류';
            SIGNAL V_USER_EXCEPTION SET MESSAGE_TEXT = ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE;
        END;
       
        DELETE FROM SP_NP_NET_PRICE_APPROVAL_DTL 
         WHERE (TENANT_ID
               ,APPROVAL_NUMBER
               ,ITEM_SEQUENCE ) IN (SELECT 
                                           I_TENANT_ID
                                         , V_APPROVAL_NUMBER
                                         , DTL.ITEM_SEQUENCE
                                      FROM :I_DETAILS   DTL
                                     WHERE DTL._ROW_STATE_ = 'D'
                                   )
        ;
    END;
    
    BEGIN

        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            O_RETURN_MSG  = '단가품의 상세 등록 오류';
            SIGNAL V_USER_EXCEPTION SET MESSAGE_TEXT = ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE;
        END;
       
        INSERT INTO SP_NP_NET_PRICE_APPROVAL_DTL (
               TENANT_ID

             , COMPANY_CODE
             , ORG_TYPE_CODE

             , ORG_CODE
             , APPROVAL_NUMBER
             , ITEM_SEQUENCE

             , LINE_TYPE_CODE
             , MATERIAL_CODE
             , MATERIAL_DESC
             , UOM_CODE
             , PAYTERMS_CODE
             , SUPPLIER_CODE
             , EFFECTIVE_START_DATE
             , EFFECTIVE_END_DATE
           --  , SURROGATE_TYPE_CODE
             , CURRENCY_CODE
             , NET_PRICE
             , VENDOR_POOL_CODE
             , MARKET_CODE
             , NET_PRICE_APPROVAL_REASON_CODE
             , NET_PRICE_TYPE_CODE
             , MAKER_CODE
             , INCOTERMS

             , LOCAL_CREATE_DTM
             , LOCAL_UPDATE_DTM
             , CREATE_USER_ID
             , UPDATE_USER_ID
             , SYSTEM_CREATE_DTM
             , SYSTEM_UPDATE_DTM
        )
        SELECT 
               I_TENANT_ID

             , (SELECT MAX(COMPANY_CODE)
                  FROM CM_PUR_OPERATION_ORG T
                 WHERE T.TENANT_ID  = I_TENANT_ID
                   AND T.ORG_CODE   = DTL.ORG_CODE
                 -- AND USE_FLAG    = true
               ) AS COMPANY_CODE

             , (SELECT MAX(ORG_TYPE_CODE)
                  FROM CM_PUR_ORG_TYPE_MAPPING T
                 WHERE T.TENANT_ID         = I_TENANT_ID
                   AND T.PROCESS_TYPE_CODE = 'SP02'  /* 단가 품의 */
                   AND T.USE_FLAG          = true
               ) AS ORG_TYPE_CODE

             , DTL.ORG_CODE
             , V_APPROVAL_NUMBER
             , SEQ.MAX_ITEM_SEQUENCE + ROW_NUMBER()OVER(PARTITION BY SEQ.MAX_ITEM_SEQUENCE ORDER BY SEQ.MAX_ITEM_SEQUENCE)

             , DTL.LINE_TYPE_CODE
             , DTL.MATERIAL_CODE
             , MTM.MATERIAL_DESC
             , MTM.BASE_UOM_CODE
             , DTL.PAYTERMS_CODE
             , DTL.SUPPLIER_CODE
             , TO_DATE(DTL.EFFECTIVE_START_DATE, 'YYYYMMDD')
             , TO_DATE(DTL.EFFECTIVE_END_DATE, 'YYYYMMDD')
           --  , DTL.SURROGATE_TYPE_CODE
             , DTL.CURRENCY_CODE
             , DTL.NET_PRICE
             , DTL.VENDOR_POOL_CODE
             , DTL.MARKET_CODE
             , DTL.NET_PRICE_APPROVAL_REASON_CODE
             , DTL.NET_PRICE_TYPE_CODE
             , DTL.MAKER_CODE
             , DTL.INCOTERMS

             , NOW()
             , NOW()
             , :I_USER_ID
             , :I_USER_ID
             , NOW()
             , NOW()
          FROM :I_DETAILS   DTL
          CROSS JOIN (SELECT IFNULL(MAX(ITEM_SEQUENCE), 0) AS MAX_ITEM_SEQUENCE
                        FROM SP_NP_NET_PRICE_APPROVAL_DTL
                       WHERE TENANT_ID        = I_TENANT_ID
                         AND APPROVAL_NUMBER  = V_APPROVAL_NUMBER
                     ) SEQ

          LEFT JOIN DP_MM_MATERIAL_MST   MTM
            ON MTM.TENANT_ID       = I_TENANT_ID
           AND MTM.MATERIAL_CODE   = DTL.MATERIAL_CODE

         WHERE DTL._ROW_STATE_     = 'C'
        ;
        
    END;

    BEGIN
	
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            O_RETURN_MSG  = '단가품의 상세 수정 오류';
            SIGNAL V_USER_EXCEPTION SET MESSAGE_TEXT = ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE;
        END;
       
         --Update Item
         MERGE INTO SP_NP_NET_PRICE_APPROVAL_DTL  T
         USING (SELECT ITEM_SEQUENCE

                     ,(SELECT MAX(COMPANY_CODE)
                         FROM CM_PUR_OPERATION_ORG T
                        WHERE T.TENANT_ID  = I_TENANT_ID
                          AND T.ORG_CODE   = DTL.ORG_CODE
                        -- AND USE_FLAG    = true
                      ) AS COMPANY_CODE
                     
                     ,(SELECT MAX(ORG_TYPE_CODE)
                         FROM CM_PUR_ORG_TYPE_MAPPING T
                        WHERE T.TENANT_ID         = I_TENANT_ID
                          AND T.PROCESS_TYPE_CODE = 'SP02'  /* 단가 품의 */
                          AND T.USE_FLAG          = true
                      ) AS ORG_TYPE_CODE
                     
                     , DTL.ORG_CODE
                     , DTL.LINE_TYPE_CODE
                     , DTL.MATERIAL_CODE
                     , MTM.MATERIAL_DESC
                     , MTM.BASE_UOM_CODE   AS UOM_CODE
                     , DTL.PAYTERMS_CODE
                     , DTL.SUPPLIER_CODE
                     , DTL.EFFECTIVE_START_DATE
                     , DTL.EFFECTIVE_END_DATE
                   --  ,SURROGATE_TYPE_CODE
                     , DTL.CURRENCY_CODE
                     , DTL.NET_PRICE
                     , DTL.VENDOR_POOL_CODE
                     , DTL.MARKET_CODE
                     , DTL.NET_PRICE_APPROVAL_REASON_CODE
                     , DTL.NET_PRICE_TYPE_CODE
                     , DTL.MAKER_CODE
                     , DTL.INCOTERMS
                 FROM :I_DETAILS   DTL

                 LEFT JOIN DP_MM_MATERIAL_MST   MTM
                   ON MTM.TENANT_ID       = I_TENANT_ID
                  AND MTM.MATERIAL_CODE   = DTL.MATERIAL_CODE

                WHERE IFNULL( _ROW_STATE_ ,'U') NOT IN ('C','D')
               ) I
         ON (    T.TENANT_ID          = I_TENANT_ID
             AND T.APPROVAL_NUMBER    = V_APPROVAL_NUMBER
             AND T.ITEM_SEQUENCE      = I.ITEM_SEQUENCE
            )
         WHEN MATCHED THEN
             UPDATE
             SET    T.COMPANY_CODE                     = I.COMPANY_CODE
                   ,T.ORG_TYPE_CODE                    = I.ORG_TYPE_CODE
                   ,T.ORG_CODE                         = I.ORG_CODE
                   ,T.LINE_TYPE_CODE                   = I.LINE_TYPE_CODE
                   ,T.MATERIAL_CODE                    = I.MATERIAL_CODE
                   ,T.MATERIAL_DESC                    = I.MATERIAL_DESC
                   ,T.UOM_CODE                         = I.UOM_CODE
                   ,T.PAYTERMS_CODE                    = I.PAYTERMS_CODE
                   ,T.SUPPLIER_CODE                    = I.SUPPLIER_CODE
                   ,T.EFFECTIVE_START_DATE             = TO_DATE(I.EFFECTIVE_START_DATE, 'YYYYMMDD')
                   ,T.EFFECTIVE_END_DATE               = TO_DATE(I.EFFECTIVE_END_DATE, 'YYYYMMDD')
                --   ,T.SURROGATE_TYPE_CODE              = I.SURROGATE_TYPE_CODE
                   ,T.CURRENCY_CODE                    = I.CURRENCY_CODE
                   ,T.NET_PRICE                        = I.NET_PRICE
                   ,T.VENDOR_POOL_CODE                 = I.VENDOR_POOL_CODE
                   ,T.MARKET_CODE                      = I.MARKET_CODE
                   ,T.NET_PRICE_APPROVAL_REASON_CODE   = I.NET_PRICE_APPROVAL_REASON_CODE
                   ,T.NET_PRICE_TYPE_CODE              = I.NET_PRICE_TYPE_CODE
                   ,T.MAKER_CODE                       = I.MAKER_CODE
                   ,T.INCOTERMS                        = I.INCOTERMS
                   
                   ,T.LOCAL_UPDATE_DTM                 = NOW()
                   ,T.UPDATE_USER_ID                   = :I_USER_ID
                   ,T.SYSTEM_UPDATE_DTM                = NOW()
         ;
    END;

    /* 결재자 등록 : 전체 삭제 후, 재 등록 */
    BEGIN

        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            O_RETURN_MSG  = '품의 결재라인 등록 오류';
            SIGNAL V_USER_EXCEPTION SET MESSAGE_TEXT = ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE;
        END;
       
        DELETE FROM CM_APPROVER
         WHERE TENANT_ID        = I_TENANT_ID
           AND APPROVAL_NUMBER  = V_APPROVAL_NUMBER
        ;


        INSERT INTO CM_APPROVER (
               TENANT_ID
             , APPROVAL_NUMBER
             , APPROVE_SEQUENCE
             , APPROVER_EMPNO
             , APPROVER_TYPE_CODE
             , APPROVE_STATUS_CODE
             , APPROVE_COMMENT
             , APPROVE_DATE_TIME

             , LOCAL_CREATE_DTM
             , LOCAL_UPDATE_DTM
             , CREATE_USER_ID
             , UPDATE_USER_ID
             , SYSTEM_CREATE_DTM
             , SYSTEM_UPDATE_DTM
        )
        SELECT 
               I_TENANT_ID
             , V_APPROVAL_NUMBER
             , I.APPROVE_SEQUENCE
             , I.APPROVER_EMPNO
             , I.APPROVER_TYPE_CODE
             , ''                    -- APPROVE_STATUS_CODE
             , NULL                  -- APPROVE_COMMENT
             , NULL                  -- APPROVE_DATE_TIME

             , NOW()
             , NOW()
             , :I_USER_ID
             , :I_USER_ID
             , NOW()
             , NOW()
          FROM :I_APPROVERS  I
        ;
        
    END;

    
    /* 결재자 등록 : 전체 삭제 후, 재 등록 */
    BEGIN

        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            O_RETURN_MSG  = '품의 결재라인 등록 오류';
            SIGNAL V_USER_EXCEPTION SET MESSAGE_TEXT = ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE;
        END;
       
        DELETE FROM CM_REFERER
         WHERE TENANT_ID        = I_TENANT_ID
           AND APPROVAL_NUMBER  = V_APPROVAL_NUMBER
        ;


        INSERT INTO CM_REFERER (
               TENANT_ID
             , APPROVAL_NUMBER
             , REFERER_EMPNO

             , LOCAL_CREATE_DTM
             , LOCAL_UPDATE_DTM
             , CREATE_USER_ID
             , UPDATE_USER_ID
             , SYSTEM_CREATE_DTM
             , SYSTEM_UPDATE_DTM
        )
        SELECT 
               I_TENANT_ID
             , V_APPROVAL_NUMBER
             , I.REFERER_EMPNO

             , NOW()
             , NOW()
             , :I_USER_ID
             , :I_USER_ID
             , NOW()
             , NOW()
          FROM :I_REFERERS  I
        ;
        
    END;


    O_RETURN_CODE = 'OK';
    O_RETURN_MSG  = V_APPROVAL_NUMBER;  -- 처리 완료
                                                
END;