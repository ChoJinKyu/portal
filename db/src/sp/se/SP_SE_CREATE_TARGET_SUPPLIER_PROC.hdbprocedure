PROCEDURE SP_SE_CREATE_TARGET_SUPPLIER_PROC(
	IN I_TENANT_ID NVARCHAR(5),
	IN I_COMPANY_CODE NVARCHAR(10),
	IN I_ORG_TYPE_CODE NVARCHAR(2),
	IN I_ORG_CODE NVARCHAR(10),
	IN I_OPERATION_UNIT_CODE NVARCHAR(30),
	IN I_EVALUATION_TYPE_CODE NVARCHAR(30),
	IN I_REGULAR_EVALUATION_ID NVARCHAR(100),
	IN I_USER_ID NVARCHAR(255),
    OUT O_MSG TABLE(RETURN_CODE NVARCHAR(2),
                    RETURN_MSG NVARCHAR(1000))
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
AS
BEGIN
    DECLARE V_ACTUAL_START_DATE NVARCHAR(8);
    DECLARE V_ACTUAL_END_DATE NVARCHAR(8);
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION ROLLBACK;
    
    --1. VP -> SUPPLIER : 대상 Supplier정보 생성
    BEGIN
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            :O_MSG.INSERT(('NG', 'Target Supplier Create Error. (' || ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE  || ')'), 1);
            RESIGNAL;
        END;
        
	    DELETE  FROM SP_SE_EVAL_TARGET_SUPPLIER
	    WHERE   TENANT_ID = :I_TENANT_ID
	    AND     COMPANY_CODE = :I_COMPANY_CODE
	    AND     ORG_TYPE_CODE = :I_ORG_TYPE_CODE
	    AND     ORG_CODE = :I_ORG_CODE
	    AND     EVALUATION_OPERATION_UNIT_CODE = :I_OPERATION_UNIT_CODE
	    AND     EVALUATION_TYPE_CODE = :I_EVALUATION_TYPE_CODE
	    AND     REGULAR_EVALUATION_ID = :I_REGULAR_EVALUATION_ID
	    ;
	    
	    INSERT INTO SP_SE_EVAL_TARGET_SUPPLIER
		    (TENANT_ID
			,COMPANY_CODE
			,ORG_TYPE_CODE
			,ORG_CODE
			,EVALUATION_OPERATION_UNIT_CODE
			,EVALUATION_TYPE_CODE
			,REGULAR_EVALUATION_ID
			,SUPPLIER_GROUP_CODE
			--,SUPPLIER_TYPE_CODE
			--,PURCHASING_AMOUNT
			--,DELIVERY_QUANTITY
			,PERSON_CONFIRM_FLAG
			,EVALUATION_EXCL_FLAG
			--,EVALUATION_EXCL_REASON
			,VENDOR_POOL_CODE
			,VENDOR_POOL_PATH_NAME
			,LOCAL_CREATE_DTM
			,LOCAL_UPDATE_DTM
			,CREATE_USER_ID
			,UPDATE_USER_ID
			,SYSTEM_CREATE_DTM
			,SYSTEM_UPDATE_DTM)
		SELECT DISTINCT
		       ESV.TENANT_ID,
		       ESV.COMPANY_CODE,
		       ESV.ORG_TYPE_CODE,
		       ESV.ORG_CODE,
		       ESV.EVALUATION_OPERATION_UNIT_CODE,
		       ESV.EVALUATION_TYPE_CODE,
		       ESV.REGULAR_EVALUATION_ID,
		       IFNULL(ES.SUPPLIER_GROUP_CODE, ES.SUPPLIER_CODE) SUPPLIER_GROUP_CODE,
		       FALSE PERSON_CONFIRM_FLAG,
		       FALSE EVALUATION_EXCL_FLAG,
		       ESV.VENDOR_POOL_CODE,
		       VPM.HIGHER_LEVEL_PATH_NAME,
		       NOW() LOCAL_CREATE_DTM,
		       NOW() LOCAL_UPDATE_DTM,
		       :I_USER_ID CREATE_USER_ID,
		       :I_USER_ID UPDATE_USER_ID,
		       NOW() SYSTEM_CREATE_DTM,
		       NOW() SYSTEM_UPDATE_DTM
		FROM   SP_SE_EVAL_SHEET_VP ESV,
		       SP_SE_OPERATION_UNIT_MST EOM,
		       PG_VP_VENDOR_POOL_EXPORT_MST_VIEW VPM,
		       PG_VP_VENDOR_POOL_SUPPLIER_DTL VPS,
		       SP_SE_EVAL_SUPPLIER ES
		WHERE  ESV.TENANT_ID = EOM.TENANT_ID
		AND    ESV.COMPANY_CODE = EOM.COMPANY_CODE
		AND    ESV.ORG_CODE = EOM.ORG_CODE
		AND    ESV.EVALUATION_OPERATION_UNIT_CODE = EOM.EVALUATION_OPERATION_UNIT_CODE
		AND    ESV.TENANT_ID = VPM.TENANT_ID
		AND    CASE WHEN EOM.EVAL_APPLY_VENDOR_POOL_LVL_NO = 1 THEN VPM.VENDOR_POOL_LEVEL1_CODE
		            WHEN EOM.EVAL_APPLY_VENDOR_POOL_LVL_NO = 2 THEN VPM.VENDOR_POOL_LEVEL2_CODE
		            WHEN EOM.EVAL_APPLY_VENDOR_POOL_LVL_NO = 3 THEN VPM.VENDOR_POOL_LEVEL3_CODE
		            WHEN EOM.EVAL_APPLY_VENDOR_POOL_LVL_NO = 4 THEN VPM.VENDOR_POOL_LEVEL4_CODE
		            ELSE VPM.VENDOR_POOL_LEVEL5_CODE
		       END = ESV.VENDOR_POOL_CODE
		AND    VPM.TENANT_ID = VPS.TENANT_ID
		AND    VPM.VENDOR_POOL_CODE = VPS.VENDOR_POOL_CODE
		AND    VPS.TENANT_ID = ES.TENANT_ID
		AND    VPS.COMPANY_CODE = ES.COMPANY_CODE
		AND    VPS.ORG_TYPE_CODE = ES.ORG_TYPE_CODE
		AND    VPS.ORG_CODE = ES.ORG_CODE
		AND    VPS.SUPPLIER_CODE = ES.SUPPLIER_CODE
		AND    ESV.TENANT_ID = :I_TENANT_ID
		AND    ESV.COMPANY_CODE = :I_COMPANY_CODE
		AND    ESV.ORG_CODE = :I_ORG_CODE
		AND    ESV.EVALUATION_OPERATION_UNIT_CODE = :I_OPERATION_UNIT_CODE
		AND    ESV.EVALUATION_TYPE_CODE = :I_EVALUATION_TYPE_CODE
		AND    ESV.REGULAR_EVALUATION_ID = :I_REGULAR_EVALUATION_ID
		;
	END;
	
	--2. 평가 항목에서 정량항목 식별
	BEGIN
	    DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            :O_MSG.INSERT(('NG', 'Quantitative Item Create Error. (' || ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE  || ')'), 1);
            RESIGNAL;
        END;
        
		DELETE FROM SP_SE_EVAL_TARGET_SUPPLIER_ACTUAL
		WHERE  TENANT_ID = :I_TENANT_ID
		AND    COMPANY_CODE = :I_COMPANY_CODE
		AND    ORG_TYPE_CODE = :I_ORG_TYPE_CODE
		AND    ORG_CODE = :I_ORG_CODE
		AND    EVALUATION_OPERATION_UNIT_CODE = :I_OPERATION_UNIT_CODE
		AND    EVALUATION_TYPE_CODE = :I_EVALUATION_TYPE_CODE
		AND    REGULAR_EVALUATION_ID = :I_REGULAR_EVALUATION_ID
		;
		
		INSERT INTO SP_SE_EVAL_TARGET_SUPPLIER_ACTUAL
		    (TENANT_ID
			,COMPANY_CODE
			,ORG_TYPE_CODE
			,ORG_CODE
			,EVALUATION_OPERATION_UNIT_CODE
			,EVALUATION_TYPE_CODE
			,REGULAR_EVALUATION_ID
			,SUPPLIER_GROUP_CODE
			,QTTIVE_ITEM_CODE
			,QTTIVE_ITEM_NAME
			,QTTIVE_ITEM_UOM_CODE
			,QTTIVE_ITEM_ACTUAL_VALUE
			,LOCAL_CREATE_DTM
			,LOCAL_UPDATE_DTM
			,CREATE_USER_ID
			,UPDATE_USER_ID
			,SYSTEM_CREATE_DTM
			,SYSTEM_UPDATE_DTM)
	    SELECT QI.TENANT_ID,
	           QI.COMPANY_CODE,
	           QI.ORG_TYPE_CODE,
	           QI.ORG_CODE,
	           QI.EVALUATION_OPERATION_UNIT_CODE,
	           SEI.EVALUATION_TYPE_CODE,
	           SEI.REGULAR_EVALUATION_ID,
	           ETS.SUPPLIER_GROUP_CODE,
	           QI.QTTIVE_ITEM_CODE,
	           QI.QTTIVE_ITEM_NAME,
	           QI.QTTIVE_ITEM_UOM_CODE,
	           NULL QTTIVE_ITEM_ACTUAL_VALUE,
	           NOW() LOCAL_CREATE_DTM,
	           NOW() LOCAL_UPDATE_DTM,
	           :I_USER_ID CREATE_USER_ID,
	           :I_USER_ID UPDATE_USER_ID,
	           NOW() SYSTEM_CREATE_DTM,
	           NOW() SYSTEM_UPDATE_DTM
		FROM   SP_SE_EVAL_SHEET_EVAL_ITEM SEI,
		       SP_SE_QUANTITATIVE_ITEM QI,
		       SP_SE_EVAL_TARGET_SUPPLIER ETS
		WHERE  SEI.TENANT_ID = QI.TENANT_ID
		AND    SEI.COMPANY_CODE = QI.COMPANY_CODE
		AND    SEI.ORG_TYPE_CODE = QI.ORG_TYPE_CODE
		AND    SEI.ORG_CODE = QI.ORG_CODE
		AND    SEI.EVALUATION_OPERATION_UNIT_CODE = QI.EVALUATION_OPERATION_UNIT_CODE
		AND    INSTR(SEI.QTTIVE_EVAL_ARTICLE_CALC_FORMULA, QI.QTTIVE_ITEM_CODE) > 0
		AND    SEI.TENANT_ID = ETS.TENANT_ID
		AND    SEI.COMPANY_CODE = ETS.COMPANY_CODE
		AND    SEI.ORG_TYPE_CODE = ETS.ORG_TYPE_CODE
		AND    SEI.ORG_CODE = ETS.ORG_CODE
		AND    SEI.EVALUATION_OPERATION_UNIT_CODE = ETS.EVALUATION_OPERATION_UNIT_CODE
		AND    SEI.EVALUATION_TYPE_CODE = ETS.EVALUATION_TYPE_CODE
		AND    SEI.REGULAR_EVALUATION_ID = ETS.REGULAR_EVALUATION_ID
		AND    SEI.QTTIVE_EVAL_ARTICLE_CALC_FORMULA IS NOT NULL
		AND    SEI.QTTIVE_EVAL_ARTICLE_CALC_FORMULA <> ''
		AND    SEI.TENANT_ID = :I_TENANT_ID
		AND    SEI.COMPANY_CODE = :I_COMPANY_CODE
		AND    SEI.ORG_CODE = :I_ORG_CODE
		AND    SEI.EVALUATION_OPERATION_UNIT_CODE = :I_OPERATION_UNIT_CODE
		AND    SEI.EVALUATION_TYPE_CODE = :I_EVALUATION_TYPE_CODE
		AND    SEI.REGULAR_EVALUATION_ID = :I_REGULAR_EVALUATION_ID;
    END;
	
    --3. SUPPLIER별 실적 (?) - 구매실적, 정량항목실적
    --SP_SE_QUANTITATIVE_ITEM_RESULT : 정량항목 일자별 집계 테이블 ->  SP_SE_EVAL_TARGET_SUPPLIER_ACTUAL(집계일자범위내 실적을 집계)
    BEGIN
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            :O_MSG.INSERT(('NG', 'Quantitative Item Actual Create Error. (' || ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE  || ')'), 1);
            RESIGNAL;
        END;
        
	    SELECT ACTUAL_AGGREGATE_START_DATE,
	           ACTUAL_AGGREGATE_END_DATE
	    INTO   V_ACTUAL_START_DATE,
	           V_ACTUAL_END_DATE
	    FROM   SP_SE_REGULAR_EVAL_SUM
	    WHERE  TENANT_ID = :I_TENANT_ID
	    AND    COMPANY_CODE = :I_COMPANY_CODE
	    AND    ORG_TYPE_CODE = :I_ORG_TYPE_CODE
	    AND    ORG_CODE = :I_ORG_CODE
	    AND    EVALUATION_OPERATION_UNIT_CODE = :I_OPERATION_UNIT_CODE
	    AND    EVALUATION_TYPE_CODE = :I_EVALUATION_TYPE_CODE
	    AND    REGULAR_EVALUATION_ID = :I_REGULAR_EVALUATION_ID
	    ;
	    
	    UPDATE SP_SE_EVAL_TARGET_SUPPLIER_ACTUAL SA
	    SET    QTTIVE_ITEM_ACTUAL_VALUE = (SELECT CASE WHEN QIA.QTTIVE_ITEM_TYPE_VALUE = 'SUM' THEN SUM(TO_DECIMAL(QIA.QTTIVE_ITEM_ACTUAL_VALUE, 15,2)) 
	                                                   WHEN QIA.QTTIVE_ITEM_TYPE_VALUE = 'MAX' THEN MAX(QIA.QTTIVE_ITEM_ACTUAL_VALUE)
	                                                   WHEN QIA.QTTIVE_ITEM_TYPE_VALUE = 'MIN' THEN MIN(QIA.QTTIVE_ITEM_ACTUAL_VALUE)
	                                                   ELSE NULL
	                                              END
	    	                               FROM   SP_SE_EVAL_TARGET_SUPPLIER ETS,
	    	                                      SP_SE_QUANTITATIVE_ITEM_ACTUAL QIA,
	    	                                      SP_SE_EVAL_SUPPLIER ES
	    	                               WHERE  ETS.TENANT_ID = SA.TENANT_ID
	    	                               AND    ETS.COMPANY_CODE = SA.COMPANY_CODE
	    	                               AND    ETS.ORG_TYPE_CODE = SA.ORG_TYPE_CODE
	    	                               AND    ETS.ORG_CODE = SA.ORG_CODE
	    	                               AND    ETS.EVALUATION_OPERATION_UNIT_CODE = SA.EVALUATION_OPERATION_UNIT_CODE
	    	                               AND    ETS.EVALUATION_TYPE_CODE = SA.EVALUATION_TYPE_CODE
	    	                               AND    ETS.REGULAR_EVALUATION_ID = SA.REGULAR_EVALUATION_ID
	    	                               AND    ETS.TENANT_ID = ES.TENANT_ID
	    	                               AND    ETS.SUPPLIER_GROUP_CODE = IFNULL(NULLIF(ES.SUPPLIER_GROUP_CODE, ''), ES.SUPPLIER_CODE)
	    	                               AND    ETS.TENANT_ID = QIA.TENANT_ID
	    	                               AND    ETS.COMPANY_CODE = QIA.COMPANY_CODE
	    	                               AND    ETS.ORG_TYPE_CODE = QIA.ORG_TYPE_CODE
	    	                               AND    ETS.ORG_CODE = QIA.ORG_CODE
	    	                               AND    QIA.SUPPLIER_CODE = ES.SUPPLIER_CODE
	    	                               AND    QIA.QTTIVE_ITEM_CODE = SA.QTTIVE_ITEM_CODE
	    	                               AND    QIA.QTTIVE_ITEM_CREATE_DATE BETWEEN :V_ACTUAL_START_DATE AND :V_ACTUAL_END_DATE
	    	                               GROUP BY QIA.QTTIVE_ITEM_TYPE_VALUE)
	    WHERE  TENANT_ID = :I_TENANT_ID
	    AND    COMPANY_CODE = :I_COMPANY_CODE
	    AND    ORG_TYPE_CODE = :I_ORG_TYPE_CODE
	    AND    ORG_CODE = :I_ORG_CODE
	    AND    EVALUATION_OPERATION_UNIT_CODE = :I_OPERATION_UNIT_CODE
	    AND    EVALUATION_TYPE_CODE = :I_EVALUATION_TYPE_CODE
	    AND    REGULAR_EVALUATION_ID = :I_REGULAR_EVALUATION_ID
	    ;
	END;
    
    --SP_SE_QUANTITATIVE_ITEM_RESULT : 정량항목 일자별 집계 테이블 ->  SP_SE_EVAL_TARGET_SUPPLIER(평가업체 구매금액,납품수량 집계)
    --구매금액 정량항목코드 : EVALAMT  납품수량 정량항목코드 : EVALQTY
    BEGIN
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            :O_MSG.INSERT(('NG', 'Purchasing Amount and Delivery Quantity Create Error. (' || ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE  || ')'), 1);
            RESIGNAL;
        END;
        
	    UPDATE SP_SE_EVAL_TARGET_SUPPLIER ETS
	    SET    (PURCHASING_AMOUNT,
	    	    DELIVERY_QUANTITY) = (SELECT SUM(MAP(QIA.QTTIVE_ITEM_CODE, 'EVALAMT', TO_DECIMAL(QIA.QTTIVE_ITEM_ACTUAL_VALUE, 15,2), 0)) PURCHASING_AMOUNT,
	                                         SUM(MAP(QIA.QTTIVE_ITEM_CODE, 'EVALQTY', TO_DECIMAL(QIA.QTTIVE_ITEM_ACTUAL_VALUE, 15,2), 0)) DELIVERY_QUANTITY
	    	                          FROM   SP_SE_QUANTITATIVE_ITEM_ACTUAL QIA,
	    	                                 SP_SE_EVAL_SUPPLIER ES
	    	                          WHERE  ETS.TENANT_ID = ES.TENANT_ID
	    	                          AND    ETS.SUPPLIER_GROUP_CODE = IFNULL(NULLIF(ES.SUPPLIER_GROUP_CODE, ''), ES.SUPPLIER_CODE)
	    	                          AND    ETS.TENANT_ID = QIA.TENANT_ID
	    	                          AND    ETS.COMPANY_CODE = QIA.COMPANY_CODE
	    	                          AND    ETS.ORG_TYPE_CODE = QIA.ORG_TYPE_CODE
	    	                          AND    ETS.ORG_CODE = QIA.ORG_CODE
	    	                          AND    QIA.SUPPLIER_CODE = ES.SUPPLIER_CODE
	    	                          AND    QIA.QTTIVE_ITEM_CODE IN ('EVALAMT', 'EVALQTY')
	    	                          AND    QIA.QTTIVE_ITEM_CREATE_DATE BETWEEN :V_ACTUAL_START_DATE AND :V_ACTUAL_END_DATE)
	    WHERE  TENANT_ID = :I_TENANT_ID
	    AND    COMPANY_CODE = :I_COMPANY_CODE
	    AND    ORG_TYPE_CODE = :I_ORG_TYPE_CODE
	    AND    ORG_CODE = :I_ORG_CODE
	    AND    EVALUATION_OPERATION_UNIT_CODE = :I_OPERATION_UNIT_CODE
	    AND    EVALUATION_TYPE_CODE = :I_EVALUATION_TYPE_CODE
	    AND    REGULAR_EVALUATION_ID = :I_REGULAR_EVALUATION_ID
	    ;
    END;
    
    -- 4.평가진행 PROGRESS CODE 변경 : 30
    UPDATE SP_SE_REGULAR_EVAL_SUM
    SET    REGULAR_EVAL_PROG_STATUS_CD = '30'
          ,LOCAL_UPDATE_DTM = NOW()
          ,UPDATE_USER_ID = :I_USER_ID
          ,SYSTEM_UPDATE_DTM = NOW()
    WHERE  TENANT_ID = :I_TENANT_ID
    AND    COMPANY_CODE = :I_COMPANY_CODE
    AND    ORG_TYPE_CODE = :I_ORG_TYPE_CODE
    AND    ORG_CODE = :I_ORG_CODE
    AND    EVALUATION_OPERATION_UNIT_CODE = :I_OPERATION_UNIT_CODE
    AND    EVALUATION_TYPE_CODE = :I_EVALUATION_TYPE_CODE
    AND    REGULAR_EVALUATION_ID = :I_REGULAR_EVALUATION_ID
    ;
    
    COMMIT;
    O_MSG = SELECT 'OK' RETURN_CODE, 'Successfully Created.' RETURN_MSG FROM DUMMY;
    
END