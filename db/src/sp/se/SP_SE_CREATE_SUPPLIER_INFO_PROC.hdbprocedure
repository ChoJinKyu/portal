PROCEDURE SP_SE_CREATE_SUPPLIER_INFO_PROC(IN I_TENANT_ID NVARCHAR(5),
                                          IN I_USER_ID NVARCHAR(255),
                                          OUT O_MSG TABLE(RETURN_CODE NVARCHAR(10), RETURN_MSG NVARCHAR(1000)))
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
AS
BEGIN
   
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        :O_MSG.INSERT(('NG', ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE), 1);
    END;

    DELETE FROM SP_SE_EVAL_SUPPLIER
    WHERE  (TENANT_ID,
            COMPANY_CODE,
            ORG_TYPE_CODE,
            ORG_CODE,
    	    SUPPLIER_CODE) IN (SELECT SD.TENANT_ID,
                                      SD.COMPANY_CODE,
                                      SD.ORG_TYPE_CODE,
                                      SD.ORG_CODE,
							          SD.SUPPLIER_CODE
							   FROM   PG_VP_VENDOR_POOL_SUPPLIER_DTL SD,
							          PG_VP_VENDOR_POOL_MST VP,
							 	      PG_VP_SUPPLIER_MST_VIEW SM
							   WHERE  SD.TENANT_ID = VP.TENANT_ID
							   --AND    SD.COMPANY_CODE = VP.COMPANY_CODE
							   --AND    SD.ORG_TYPE_CODE = VP.ORG_TYPE_CODE
							   --AND    SD.ORG_CODE = VP.ORG_CODE
							   AND    SD.VENDOR_POOL_CODE = VP.VENDOR_POOL_CODE
                               AND    SD.TENANT_ID = SM.TENANT_ID
                               AND    SD.COMPANY_CODE = SM.COMPANY_CODE
							   AND    SD.ORG_CODE = SM.ORG_CODE
							   AND    SD.SUPPLIER_CODE = SM.SUPPLIER_CODE
							   AND    SM.LANGUAGE_CD = 'KO'
							   AND   (VP.REGULAR_EVALUATION_FLAG = FALSE
								 OR   VP.VENDOR_POOL_USE_FLAG = FALSE
								 OR   SD.VENDOR_POOL_MAPPING_USE_FLAG = FALSE
                                 OR   SM.INACTIVE_STATUS_CODE <> 'A')
                               AND    SD.TENANT_ID = :I_TENANT_ID
							   AND    EXISTS (SELECT 1
									          FROM   SP_SE_EVAL_SUPPLIER
									          WHERE  TENANT_ID = SD.TENANT_ID
                                              AND    COMPANY_CODE = SD.COMPANY_CODE
                                              AND    ORG_TYPE_CODE = SD.ORG_TYPE_CODE
                                              AND    ORG_CODE = SD.ORG_CODE
									          AND    SUPPLIER_CODE = SD.SUPPLIER_CODE))
	;
    
    INSERT INTO SP_SE_EVAL_SUPPLIER
        (TENANT_ID,
         COMPANY_CODE,
         ORG_TYPE_CODE,
         ORG_CODE,
         SUPPLIER_CODE,
         SUPPLIER_GROUP_CODE,
         SUPPLIER_GROUP_NAME,
         REPR_SUPPLIER_FLAG,
         LOCAL_CREATE_DTM,
         LOCAL_UPDATE_DTM,
         CREATE_USER_ID,
         UPDATE_USER_ID,
         SYSTEM_CREATE_DTM,
         SYSTEM_UPDATE_DTM)
    SELECT SD.TENANT_ID,
           SD.COMPANY_CODE,
           SD.ORG_TYPE_CODE,
           SD.ORG_CODE,
	       SD.SUPPLIER_CODE,
	       NULL SUPPLIER_GROUP_CODE,
	       NULL SUPPLIER_GROUP_NAME,
	       FALSE REPR_SUPPLIER_FLAG,
	       NOW() LOCAL_CREATE_DTM,
	       NOW() LOCAL_UPDATE_DTM,
	       :I_USER_ID CREATE_USER_ID,
	       :I_USER_ID UPDATE_USER_ID,
	       NOW() SYSTEM_CREATE_DTM,
	       NOW() SYSTEM_UPDATE_DTM
	FROM   PG_VP_VENDOR_POOL_SUPPLIER_DTL SD,
	       PG_VP_VENDOR_POOL_MST VP,
	       PG_VP_SUPPLIER_MST_VIEW SM
	WHERE  SD.TENANT_ID = VP.TENANT_ID
	AND    SD.COMPANY_CODE = VP.COMPANY_CODE
	--AND    SD.ORG_TYPE_CODE = VP.ORG_TYPE_CODE
	--AND    SD.ORG_CODE = VP.ORG_CODE
	AND    SD.VENDOR_POOL_CODE = VP.VENDOR_POOL_CODE
	AND    VP.REGULAR_EVALUATION_FLAG = TRUE
	AND    VP.VENDOR_POOL_USE_FLAG = TRUE
	AND    SD.VENDOR_POOL_MAPPING_USE_FLAG = TRUE
    AND    SD.TENANT_ID = SM.TENANT_ID
    AND    SD.COMPANY_CODE = SM.COMPANY_CODE
	AND    SD.ORG_CODE = SM.ORG_CODE
	AND    SD.SUPPLIER_CODE = SM.SUPPLIER_CODE
	AND    SM.LANGUAGE_CD = 'KO'
    AND    SM.INACTIVE_STATUS_CODE = 'A'
    AND    SD.TENANT_ID = :I_TENANT_ID
	AND    NOT EXISTS (SELECT 1
		               FROM   SP_SE_EVAL_SUPPLIER
		               WHERE  TENANT_ID = SD.TENANT_ID
                       AND    COMPANY_CODE = SD.COMPANY_CODE
                       AND    ORG_TYPE_CODE = SD.ORG_TYPE_CODE
                       AND    ORG_CODE = SD.ORG_CODE
		               AND    SUPPLIER_CODE = SD.SUPPLIER_CODE)
	;
	
	:O_MSG.INSERT(('OK', ::ROWCOUNT || ' Rows created!'), 1);
        
END