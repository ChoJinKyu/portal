PROCEDURE SP_SE_EVAL_SETUP_SAVE1_PROC (
    IN I_OPMST TABLE(TENANT_ID NVARCHAR(5), 
                     COMPANY_CODE NVARCHAR(10), 
                     ORG_TYPE_CODE NVARCHAR(2),
                     ORG_CODE NVARCHAR(10),
                     EVALUATION_OPERATION_UNIT_CODE NVARCHAR(30),
                     EVALUATION_OPERATION_UNIT_NAME NVARCHAR(50),
                     DISTRB_SCORE_ENG_FLAG BOOLEAN,
                     EVALUATION_REQUEST_MODE_CODE NVARCHAR(30),
                     EVALUATION_REQUEST_APPROVAL_FLAG BOOLEAN,
                     OPERATION_PLAN_FLAG BOOLEAN,
                     EVAL_APPLY_VENDOR_POOL_LVL_NO DECIMAL(34),
    	             USE_FLAG BOOLEAN)
   ,IN I_VPOP TABLE(VENDOR_POOL_OPERATION_UNIT_CODE NVARCHAR(30))
   ,IN I_MGR TABLE(TRANSACTION_CODE NVARCHAR(1),    --I:신규, U:수정, D:삭제
                   TENANT_ID NVARCHAR(5),
                   COMPANY_CODE NVARCHAR(10),
                   ORG_TYPE_CODE NVARCHAR(2),
                   ORG_CODE NVARCHAR(10),
                   EVALUATION_OPERATION_UNIT_CODE NVARCHAR(30),
                   EVALUATION_OP_UNT_PERSON_EMPNO NVARCHAR(30),
                   EVALUATION_EXECUTE_ROLE_CODE NVARCHAR(30))
   ,IN I_QTT TABLE(TRANSACTION_CODE NVARCHAR(1),    --I:신규, U:수정, D:삭제
                   TENANT_ID NVARCHAR(5),
                   COMPANY_CODE NVARCHAR(10),
                   ORG_TYPE_CODE NVARCHAR(2),
                   ORG_CODE NVARCHAR(10),
                   EVALUATION_OPERATION_UNIT_CODE NVARCHAR(30),
                   QTTIVE_ITEM_CODE NVARCHAR(15),
                   QTTIVE_ITEM_NAME NVARCHAR(240),
                   QTTIVE_ITEM_UOM_CODE NVARCHAR(30),
                   QTTIVE_ITEM_MEASURE_MODE_CODE NVARCHAR(50),
                   QTTIVE_ITEM_DESC NVARCHAR(1000),
   	               SORT_SEQUENCE DECIMAL)
   ,IN I_USER_ID NVARCHAR(255)
   ,OUT O_MSG TABLE(RETURN_CODE NVARCHAR(2),
                    RETURN_MSG NVARCHAR(1000))
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
AS
BEGIN
    DECLARE V_TRANACTION_CODE NVARCHAR(1);
    --DECLARE var_commit  NVARCHAR(100) := 'COMMIT';
    --DECLARE var_rollback NVARCHAR(100) := 'ROLLBACK';
    --DECLARE EXIT HANDLER FOR SQLEXCEPTION
    --BEGIN
    	--EXEC (:var_rollback);
    --	O_MSG = SELECT  'NG' RETURN_CODE, ::SQL_ERROR_CODE||'-'||::SQL_ERROR_MESSAGE RETURN_MSG FROM  DUMMY;
    --END;
      
    --평가 운영 단위 삭제 인 경우 : 화면에서 DELETE_FLAG가 'Y'인 경우만 삭제 처리될 수 있도록 Validation됨.
    /*
    DELETE FROM SP_SE_OPERATION_UNIT_MST
    WHERE  (TENANT_ID,
    	    COMPANY_CODE,
    	    ORG_TYPE_CODE,
    	    ORG_CODE,
    	    EVALUATION_OPERATION_UNIT_CODE) IN (SELECT TENANT_ID,
                                                     COMPANY_CODE,
                                                     ORG_TYPE_CODE,
                                                     ORG_CODE,
                                                     EVALUATION_OPERATION_UNIT_CODE
                                              FROM   :I_OPMST
                                              WHERE  TRANSACTION_CODE = 'D')
    ;
   
    IF ::ROWCOUNT = 0 AND :I_OPMST.TRANSACTION_CODE[1] = 'D' THEN
        SIGNAL SQL_ERROR_CODE 10000 SET MESSAGE_TEXT = 'There is no information to delete.';
    END IF;
   */
   
    --IF (:I_STATUS_TAB.COMPANY_CODE[V_IDX] IS NULL ) THEN
    --        :O_RETURN_TAB.INSERT(('E', 'EDP','This is no value(COMPANY_CODE)'),1);
    --        RETURN;      
    --     END IF;
   
    BEGIN
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            O_MSG = SELECT  'NG' RETURN_CODE, 'Operation unit master Processing error. (' || ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE  || ')' RETURN_MSG FROM  DUMMY;
        END;
       
        MERGE INTO SP_SE_OPERATION_UNIT_MST AS MST
        USING :I_OPMST AS IMST
        ON   (MST.TENANT_ID = IMST.TENANT_ID
        AND   MST.COMPANY_CODE = IMST.COMPANY_CODE
        AND   MST.ORG_TYPE_CODE = IMST.ORG_TYPE_CODE
        AND   MST.ORG_CODE = IMST.ORG_CODE
        AND   MST.EVALUATION_OPERATION_UNIT_CODE = IMST.EVALUATION_OPERATION_UNIT_CODE)
        WHEN MATCHED THEN
            UPDATE
            SET    MST.EVALUATION_OPERATION_UNIT_NAME = IMST.EVALUATION_OPERATION_UNIT_NAME
                  ,MST.DISTRB_SCORE_ENG_FLAG = IMST.DISTRB_SCORE_ENG_FLAG
                  ,MST.EVALUATION_REQUEST_MODE_CODE = IMST.EVALUATION_REQUEST_MODE_CODE
                  ,MST.EVALUATION_REQUEST_APPROVAL_FLAG = IMST.EVALUATION_REQUEST_APPROVAL_FLAG
                  ,MST.OPERATION_PLAN_FLAG = IMST.OPERATION_PLAN_FLAG
                  ,MST.EVAL_APPLY_VENDOR_POOL_LVL_NO = IMST.EVAL_APPLY_VENDOR_POOL_LVL_NO
                  ,MST.USE_FLAG = IMST.USE_FLAG
                  ,MST.LOCAL_UPDATE_DTM = NOW()
                  ,MST.UPDATE_USER_ID = :I_USER_ID
                  ,SYSTEM_UPDATE_DTM = NOW()
        WHEN NOT MATCHED THEN
            INSERT (TENANT_ID
            	      ,COMPANY_CODE
            	      ,ORG_TYPE_CODE
            	      ,ORG_CODE
            	      ,EVALUATION_OPERATION_UNIT_CODE
            	      ,EVALUATION_OPERATION_UNIT_NAME
            	      ,DISTRB_SCORE_ENG_FLAG
            	      ,EVALUATION_REQUEST_MODE_CODE
            	      ,EVALUATION_REQUEST_APPROVAL_FLAG
            	      ,OPERATION_PLAN_FLAG
            	      ,EVAL_APPLY_VENDOR_POOL_LVL_NO
            	      ,USE_FLAG
            	      ,LOCAL_CREATE_DTM
            	      ,LOCAL_UPDATE_DTM
            	      ,CREATE_USER_ID
            	      ,UPDATE_USER_ID
            	      ,SYSTEM_CREATE_DTM
            	      ,SYSTEM_UPDATE_DTM)
            VALUES (IMST.TENANT_ID
            	      ,IMST.COMPANY_CODE
            	      ,IMST.ORG_TYPE_CODE
            	      ,IMST.ORG_CODE
            	      ,IMST.EVALUATION_OPERATION_UNIT_CODE
            	      ,IMST.EVALUATION_OPERATION_UNIT_NAME
            	      ,IMST.DISTRB_SCORE_ENG_FLAG
            	      ,IMST.EVALUATION_REQUEST_MODE_CODE
            	      ,IMST.EVALUATION_REQUEST_APPROVAL_FLAG
            	      ,IMST.OPERATION_PLAN_FLAG
            	      ,IMST.EVAL_APPLY_VENDOR_POOL_LVL_NO
            	      ,IMST.USE_FLAG
            	      ,NOW()
            	      ,NOW()
            	      ,:I_USER_ID
            	      ,:I_USER_ID
            	      ,NOW()
            	      ,NOW())
        ;
    
    END;
    
    BEGIN
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            O_MSG = SELECT  'NG' RETURN_CODE, 'Vendor Pool operation unit mapping Processing error. (' || ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE  || ')' RETURN_MSG FROM  DUMMY;
        END;
       
        DELETE FROM SP_SE_OPERATION_UNIT_MAP MA
        WHERE  NOT EXISTS (SELECT 1
                           FROM   :I_OPMST MST,
                                  :I_VPOP VP
                           WHERE  MST.TENANT_ID = MA.TENANT_ID
                           AND    MST.COMPANY_CODE = MA.COMPANY_CODE
                           AND    MST.ORG_TYPE_CODE = MA.ORG_TYPE_CODE
                           AND    MST.ORG_CODE = MA.ORG_CODE
                           AND    MST.EVALUATION_OPERATION_UNIT_CODE = MA.EVALUATION_OPERATION_UNIT_CODE
                           AND    VP.VENDOR_POOL_OPERATION_UNIT_CODE = MA.VENDOR_POOL_OPERATION_UNIT_CODE)
        ;
	    
        INSERT INTO SP_SE_OPERATION_UNIT_MAP
            (TENANT_ID
            ,COMPANY_CODE
            ,ORG_TYPE_CODE
            ,ORG_CODE
            ,EVALUATION_OPERATION_UNIT_CODE
            ,VENDOR_POOL_OPERATION_UNIT_CODE
            ,LOCAL_CREATE_DTM
            ,LOCAL_UPDATE_DTM
            ,CREATE_USER_ID
            ,UPDATE_USER_ID
            ,SYSTEM_CREATE_DTM
            ,SYSTEM_UPDATE_DTM)
        SELECT MST.TENANT_ID
              ,MST.COMPANY_CODE
              ,MST.ORG_TYPE_CODE
              ,MST.ORG_CODE
              ,MST.EVALUATION_OPERATION_UNIT_CODE
              ,VP.VENDOR_POOL_OPERATION_UNIT_CODE
              ,NOW()
              ,NOW()
              ,:I_USER_ID
              ,:I_USER_ID
              ,NOW()
              ,NOW()
        FROM   :I_OPMST MST,
               :I_VPOP VP
        WHERE  NOT EXISTS (SELECT 1
                           FROM   SP_SE_OPERATION_UNIT_MAP MA
                           WHERE  MST.TENANT_ID = MA.TENANT_ID
                           AND    MST.COMPANY_CODE = MA.COMPANY_CODE
                           AND    MST.ORG_TYPE_CODE = MA.ORG_TYPE_CODE
                           AND    MST.ORG_CODE = MA.ORG_CODE
                           AND    MST.EVALUATION_OPERATION_UNIT_CODE = MA.EVALUATION_OPERATION_UNIT_CODE
                           AND    VP.VENDOR_POOL_OPERATION_UNIT_CODE = MA.VENDOR_POOL_OPERATION_UNIT_CODE)
        ;
    END;
   
    BEGIN
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            O_MSG = SELECT  'NG' RETURN_CODE, 'Manager Processing error. (' || ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE  || ')' RETURN_MSG FROM  DUMMY;
        END;

        DELETE FROM SP_SE_OPERATION_UNIT_MANAGER
        WHERE  (TENANT_ID,
                COMPANY_CODE,
                ORG_TYPE_CODE,
                ORG_CODE,
                EVALUATION_OPERATION_UNIT_CODE,
                EVALUATION_OP_UNT_PERSON_EMPNO) IN (SELECT TENANT_ID,
                                                           COMPANY_CODE,
                                                           ORG_TYPE_CODE,
                                                           ORG_CODE,
                                                           EVALUATION_OPERATION_UNIT_CODE,
                                                           EVALUATION_OP_UNT_PERSON_EMPNO
                                                    FROM   :I_MGR
                                                    WHERE  TRANSACTION_CODE = 'D')
        ;

        INSERT INTO SP_SE_OPERATION_UNIT_MANAGER
            (TENANT_ID
            ,COMPANY_CODE
            ,ORG_TYPE_CODE
            ,ORG_CODE
            ,EVALUATION_OPERATION_UNIT_CODE
            ,EVALUATION_OP_UNT_PERSON_EMPNO
            ,EVALUATION_EXECUTE_ROLE_CODE
            ,LOCAL_CREATE_DTM
            ,LOCAL_UPDATE_DTM
            ,CREATE_USER_ID
            ,UPDATE_USER_ID
            ,SYSTEM_CREATE_DTM
            ,SYSTEM_UPDATE_DTM)
        SELECT TENANT_ID
              ,COMPANY_CODE
              ,ORG_TYPE_CODE
              ,ORG_CODE
              ,EVALUATION_OPERATION_UNIT_CODE
              ,EVALUATION_OP_UNT_PERSON_EMPNO
              ,EVALUATION_EXECUTE_ROLE_CODE
              ,NOW()
              ,NOW()
              ,:I_USER_ID
              ,:I_USER_ID
              ,NOW()
              ,NOW()
        FROM   :I_MGR 
        WHERE  TRANSACTION_CODE = 'I'
        ;

        
        MERGE INTO SP_SE_OPERATION_UNIT_MANAGER AS MGR
        USING :I_MGR AS IMGR
        ON    MGR.TENANT_ID = IMGR.TENANT_ID
        AND   MGR.COMPANY_CODE = IMGR.COMPANY_CODE
        AND   MGR.ORG_TYPE_CODE = IMGR.ORG_TYPE_CODE
        AND   MGR.ORG_CODE = IMGR.ORG_CODE
        AND   MGR.EVALUATION_OPERATION_UNIT_CODE = IMGR.EVALUATION_OPERATION_UNIT_CODE
        AND   MGR.EVALUATION_OP_UNT_PERSON_EMPNO = IMGR.EVALUATION_OP_UNT_PERSON_EMPNO
        AND   IMGR.TRANSACTION_CODE = 'U'
        WHEN MATCHED THEN
            UPDATE
            SET    MGR.EVALUATION_EXECUTE_ROLE_CODE = IMGR.EVALUATION_EXECUTE_ROLE_CODE
                  ,MGR.LOCAL_UPDATE_DTM = NOW()
                  ,MGR.UPDATE_USER_ID = :I_USER_ID
                  ,MGR.SYSTEM_UPDATE_DTM = NOW()
        
        ; 
    END;
   
    BEGIN
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            O_MSG = SELECT  'NG' RETURN_CODE, 'QUANTITATIVE Item Processing error. (' || ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE  || ')' RETURN_MSG FROM  DUMMY;
        END; 
        
        DELETE FROM SP_SE_QUANTITATIVE_ITEM
        WHERE  (TENANT_ID
               ,COMPANY_CODE
               ,ORG_TYPE_CODE
               ,ORG_CODE
               ,EVALUATION_OPERATION_UNIT_CODE
               ,QTTIVE_ITEM_CODE) IN (SELECT TENANT_ID,
                                             COMPANY_CODE,
                                             ORG_TYPE_CODE,
                                             ORG_CODE,
                                             EVALUATION_OPERATION_UNIT_CODE,
                                             QTTIVE_ITEM_CODE
                                      FROM   :I_QTT
                                      WHERE  TRANSACTION_CODE = 'D')
        ;

        INSERT INTO SP_SE_QUANTITATIVE_ITEM
            (TENANT_ID
            ,COMPANY_CODE
            ,ORG_TYPE_CODE
            ,ORG_CODE
            ,EVALUATION_OPERATION_UNIT_CODE
            ,QTTIVE_ITEM_CODE
            ,QTTIVE_ITEM_NAME
            ,QTTIVE_ITEM_UOM_CODE
            ,QTTIVE_ITEM_MEASURE_MODE_CODE
            ,QTTIVE_ITEM_DESC
            ,SORT_SEQUENCE
            ,LOCAL_CREATE_DTM
            ,LOCAL_UPDATE_DTM
            ,CREATE_USER_ID
            ,UPDATE_USER_ID
            ,SYSTEM_CREATE_DTM
            ,SYSTEM_UPDATE_DTM)
        SELECT TENANT_ID
              ,COMPANY_CODE
              ,ORG_TYPE_CODE
              ,ORG_CODE
              ,EVALUATION_OPERATION_UNIT_CODE
              ,QTTIVE_ITEM_CODE
              ,QTTIVE_ITEM_NAME
              ,QTTIVE_ITEM_UOM_CODE
              ,QTTIVE_ITEM_MEASURE_MODE_CODE
              ,QTTIVE_ITEM_DESC
              ,SORT_SEQUENCE
              ,NOW()
              ,NOW()
              ,:I_USER_ID
              ,:I_USER_ID
              ,NOW()
              ,NOW()
        FROM   :I_QTT
        WHERE  TRANSACTION_CODE = 'I'
        ;

        MERGE INTO SP_SE_QUANTITATIVE_ITEM AS QTT
        USING :I_QTT AS IQTT
        ON    QTT.TENANT_ID = IQTT.TENANT_ID
        AND   QTT.COMPANY_CODE = IQTT.COMPANY_CODE
        AND   QTT.ORG_TYPE_CODE = IQTT.ORG_TYPE_CODE
        AND   QTT.ORG_CODE = IQTT.ORG_CODE
        AND   QTT.EVALUATION_OPERATION_UNIT_CODE = IQTT.EVALUATION_OPERATION_UNIT_CODE
        AND   QTT.QTTIVE_ITEM_CODE = IQTT.QTTIVE_ITEM_CODE
        AND   IQTT.TRANSACTION_CODE = 'U'
        WHEN MATCHED THEN
            UPDATE
            SET    QTT.QTTIVE_ITEM_NAME = IQTT.QTTIVE_ITEM_NAME
                  ,QTT.QTTIVE_ITEM_UOM_CODE = IQTT.QTTIVE_ITEM_UOM_CODE
                  ,QTT.QTTIVE_ITEM_MEASURE_MODE_CODE = IQTT.QTTIVE_ITEM_MEASURE_MODE_CODE
                  ,QTT.QTTIVE_ITEM_DESC = IQTT.QTTIVE_ITEM_DESC
                  ,QTT.SORT_SEQUENCE = IQTT.SORT_SEQUENCE
                  ,QTT.LOCAL_CREATE_DTM = NOW()
                  ,QTT.LOCAL_UPDATE_DTM = NOW()
                  ,QTT.UPDATE_USER_ID = :I_USER_ID
                  ,QTT.SYSTEM_UPDATE_DTM = NOW()
        ;
    END;
 
    O_MSG = SELECT 'OK' RETURN_CODE, 'Successfully Saved.' RETURN_MSG FROM DUMMY;
    	    	                                
END;