PROCEDURE SP_SC_NEGO_HEADERS_DEEPUPSERT (
	IN	I_TABLE_NEGOHEADERS    SP_SC_NEGO_HEADERS_TYPE,
	IN	I_TABLE_NEGOITEMPRICES SP_SC_NEGO_ITEMPRICES_TYPE,
	IN	I_TABLE_NEGOSUPPLIERS  SP_SC_NEGO_SUPPLIERS_TYPE,
    OUT O_TABLE_MESSAGE TABLE (CODE INTEGER,
                        --    CODE_STRING NVARCHAR(256),
                           MESSAGE NVARCHAR(2000))
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
AS
BEGIN
	DECLARE v_int INT = 0;
    DECLARE APP_USER NVARCHAR(255); 
	DECLARE error_occurred CONDITION FOR SQL_ERROR_CODE 10001;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        O_TABLE_MESSAGE = SELECT ::SQL_ERROR_CODE AS CODE, ::SQL_ERROR_MESSAGE AS MESSAGE FROM DUMMY;
        ROLLBACK WORK;
        -- # Wrtie a log table
		-- BEGIN AUTONOMOUS TRANSACTION
		--     error = LEFT (::SQL_ERROR_MESSAGE,1800);
		-- 	INSERT INTO "SP_SC_LOGS"("USER","PROCESS","SUB_PROCESS","MSG_TIMESTAMP","MSG_TYPE","MSG_TEXT","SQL_STATEMENT")
		-- 	SELECT
		-- 		current_user              ,
		-- 		'SP_SC'                   ,
		-- 		'Deepinsert Nego Headers' ,
		-- 		CURRENT_TIMESTAMP         ,
		-- 		'ERROR'                   ,
		-- 		:error                    ,
		-- 		'SQL TEST'                
		-- 	FROM "DUMMY" ;
		-- END;
    END;

    IF RECORD_COUNT(:I_TABLE_NEGOHEADERS) = 0 AND RECORD_COUNT(:I_TABLE_NEGOHEADERS) = 0 AND RECORD_COUNT(:I_TABLE_NEGOHEADERS) = 0 THEN
        SELECT 1 FROM DUMMY;
        SIGNAL error_occurred SET MESSAGE_TEXT = 'No input value!';
    END IF;

	-- IN	I_TABLE_NEGOHEADERS    SP_SC_NEGO_HEADERS_KEY_TYPE,
	-- IN	I_TABLE_NEGOITEMPRICES SP_SC_NEGO_ITEMPRICES_KEY_TYPE,
    -- IN	I_TABLE_NEGOSUPPLIERS  SP_SC_NEGO_SUPPLIERS_KEY_TYPE,
    
    -- SELECT SESSION_CONTEXT('APPLICATION_USER') INTO APP_USER FROM DUMMY;
    APP_USER := SESSION_CONTEXT('APPLICATIONUSER');
    BEGIN PARALLEL EXECUTION
/* 
        DELETE FROM SP_SC_NEGO_SUPPLIERS AS MAIN
            WHERE EXISTS ( SELECT * FROM :I_TABLE_NEGOHEADERS WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID )
                OR EXISTS ( SELECT * FROM :I_TABLE_NEGOITEMPRICES WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID AND NEGO_ITEM_NUMBER = MAIN.NEGO_ITEM_NUMBER )
                OR EXISTS ( SELECT * FROM :I_TABLE_NEGOSUPPLIERS WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID AND NEGO_ITEM_NUMBER = MAIN.NEGO_ITEM_NUMBER  AND ITEM_SUPPLIER_SEQUENCE = MAIN.ITEM_SUPPLIER_SEQUENCE )
        ;
        DELETE FROM SP_SC_NEGO_ITEM_PRICES AS MAIN 
            WHERE EXISTS ( SELECT * FROM :I_TABLE_NEGOHEADERS WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID )
                OR EXISTS ( SELECT * FROM :I_TABLE_NEGOITEMPRICES WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID AND NEGO_ITEM_NUMBER = MAIN.NEGO_ITEM_NUMBER )
        ;
        DELETE FROM SP_SC_NEGO_HEADERS AS MAIN 
            WHERE EXISTS ( SELECT * FROM :I_TABLE_NEGOHEADERS WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID )
        ;
 */

        UPSERT SP_SC_NEGO_HEADERS ( 
              tenant_id
            , nego_header_id
            , reference_nego_header_id
            , previous_nego_header_id
            , operation_org_code
            , operation_unit_code
            , reference_nego_document_number
            , nego_document_round
            , nego_document_number
            , nego_document_title
            , nego_document_desc
            , nego_progress_status_code
            , award_progress_status_code
            , reply_times
            , supplier_count
            , nego_type_code
            , outcome_code
            , negotiation_output_class_code
            , buyer_empno
            , buyer_department_code
            , immediate_apply_flag
            , open_date
            , closing_date
            , auto_rfq
            , items_count
            , negotiation_style_code
            , close_date_ext_enabled_hours
            , close_date_ext_enabled_count
            , actual_extension_count
            , remaining_hours
            , note_content
            , award_type_code
            , award_method_code
            , target_amount_config_flag
            , target_currency
            , target_amount
            , supplier_participation_flag
            , partial_allow_flag
            , bidding_result_open_status_code
            , local_create_dtm
            , local_update_dtm
            , create_user_id
            , update_user_id
            , system_create_dtm
            , system_update_dtm
        ) SELECT 
              tenant_id
            , nego_header_id
            , reference_nego_header_id
            , previous_nego_header_id
            , operation_org_code
            , operation_unit_code
            , reference_nego_document_number
            , nego_document_round
            , nego_document_number
            , nego_document_title
            , nego_document_desc
            , nego_progress_status_code
            , award_progress_status_code
            , reply_times
            , supplier_count
            , nego_type_code
            , outcome_code
            , negotiation_output_class_code
            , buyer_empno
            , buyer_department_code
            , immediate_apply_flag
            , open_date
            , closing_date
            , auto_rfq
            , items_count
            , negotiation_style_code
            , close_date_ext_enabled_hours
            , close_date_ext_enabled_count
            , actual_extension_count
            , remaining_hours
            , note_content
            , award_type_code
            , award_method_code
            , target_amount_config_flag
            , target_currency
            , target_amount
            , supplier_participation_flag
            , partial_allow_flag
            , bidding_result_open_status_code
            -- , * 
            , NOW(), NOW(), :APP_USER, :APP_USER, NOW(), NOW() FROM :I_TABLE_NEGOHEADERS;


        UPSERT SP_SC_NEGO_ITEM_PRICES(
              tenant_id
            , nego_header_id
            , nego_item_number
            , company_code
            , operation_org_type_code
            , operation_org_code
            , operation_unit_code
            , award_progress_status_code
            , line_type_code
            , material_code
            , material_desc
            , specification
            , bpa_price
            , detail_net_price
            , recommend_info
            , group_id
            , location
            , purpose
            , reason
            , request_date
            , attch_code
            , supplier_provide_info
            , incoterms_code
            , payment_terms_code
            , market_code
            , excl_flag
            , specific_supplier_count
            , vendor_pool_code
            , request_quantity
            , uom_code
            , maturity_date
            , currency_code
            , response_currency_code
            , exrate_type_code
            , exrate_date
            , bidding_start_net_price
            , bidding_start_net_price_flag
            , bidding_target_net_price
            , current_price
            , note_content
            , pr_number
            , pr_approve_number
            , req_submission_status
            , req_reapproval
            , requisition_flag
            , price_submission_no
            , price_submisstion_status
            , interface_source
            , budget_department_code
            , requestor_empno
            , request_department_code
            , local_create_dtm
            , local_update_dtm
            , create_user_id
            , update_user_id
            , system_create_dtm
            , system_update_dtm
        ) SELECT *, NOW(), NOW(), :APP_USER, :APP_USER, NOW(), NOW() FROM :I_TABLE_NEGOITEMPRICES;


        UPSERT SP_SC_NEGO_SUPPLIERS(
              tenant_id
            , nego_header_id
            , nego_item_number
            , item_supplier_SEQUENCE
            , operation_org_code
            , operation_unit_code
            , nego_supplier_register_type_code
            , evaluation_type_code
            , nego_supeval_type_code
            , supplier_code
            , supplier_name
            , supplier_type_code
            , excl_flag
            , excl_reason_DESC
            , include_flag
            , nego_target_include_reason_desc
            , only_maker_flat
            , contact
            , note_content
            , local_create_dtm
            , local_upDATE_dtm
            , create_user_id
            , upDATE_user_id
            , system_create_dtm
            , system_upDATE_dtm
        ) SELECT *, NOW(), NOW(), :APP_USER, :APP_USER, NOW(), NOW() FROM :I_TABLE_NEGOSUPPLIERS;
    END;

    -- # ERROR TEST # SELECT 1/:v_int FROM DUMMY;
    O_TABLE_MESSAGE = SELECT CAST(0 AS INTEGER) AS CODE, 'Successed' AS MESSAGE FROM DUMMY;
END;