PROCEDURE SP_SC_NEGO_HEADERS_DEEPUPSERT (
	IN	I_TABLE_NEGOHEADERS    SP_SC_NEGO_HEADERS_TYPE,
	IN	I_TABLE_NEGOITEMPRICES SP_SC_NEGO_ITEMPRICES_TYPE,
	IN	I_TABLE_NEGOSUPPLIERS  SP_SC_NEGO_SUPPLIERS_TYPE,
    OUT O_TABLE_MESSAGE TABLE (TENANT_ID NVARCHAR(10),
                           NEGO_HEADER_ID BIGINT,
                           CODE INTEGER,
                        --    CODE_STRING NVARCHAR(256),
                           MESSAGE NVARCHAR(2000))
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
AS
BEGIN
	DECLARE v_int INT = 0;
    DECLARE v_tenant_id NVARCHAR(10);
    DECLARE v_nego_header_id BIGINT;
    DECLARE v_app_user NVARCHAR(255); 
	DECLARE error_occurred CONDITION FOR SQL_ERROR_CODE 10001;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        O_TABLE_MESSAGE = SELECT '' AS TENANT_ID, 0 AS NEGO_HEADER_ID, ::SQL_ERROR_CODE AS CODE, ::SQL_ERROR_MESSAGE AS MESSAGE FROM DUMMY;
        RESIGNAL;
        -- ROLLBACK WORK;
        -- # Wrtie a log table
		-- BEGIN AUTONOMOUS TRANSACTION
		--     error = LEFT (::SQL_ERROR_MESSAGE,1800);
		-- 	INSERT INTO "SP_SC_LOGS"("USER","PROCESS","SUB_PROCESS","MSG_TIMESTAMP","MSG_TYPE","MSG_TEXT","SQL_STATEMENT")
		-- 	SELECT
		-- 		current_user              ,
		-- 		'SP_SC'                   ,
		-- 		'Deepinsert Nego Headers' ,
		-- 		CURRENT_TIMESTAMP         ,
		-- 		'ERROR'                   ,
		-- 		:error                    ,
		-- 		'SQL TEST'                
		-- 	FROM "DUMMY" ;
		-- END;
    END;

    IF RECORD_COUNT(:I_TABLE_NEGOHEADERS) = 0 AND RECORD_COUNT(:I_TABLE_NEGOHEADERS) = 0 AND RECORD_COUNT(:I_TABLE_NEGOHEADERS) = 0 THEN
        SELECT 1 FROM DUMMY;
        SIGNAL error_occurred SET MESSAGE_TEXT = 'No input value!';
    END IF;

	-- IN	I_TABLE_NEGOHEADERS    SP_SC_NEGO_HEADERS_KEY_TYPE,
	-- IN	I_TABLE_NEGOITEMPRICES SP_SC_NEGO_ITEMPRICES_KEY_TYPE,
    -- IN	I_TABLE_NEGOSUPPLIERS  SP_SC_NEGO_SUPPLIERS_KEY_TYPE,
    
    -- SELECT SESSION_CONTEXT('APPLICATION_USER') INTO APP_USER FROM DUMMY;


    /***********************************************************************************/
    v_app_user := SESSION_CONTEXT('APPLICATIONUSER');

    vt_nego_header = SELECT 
              NH.tenant_id
            , map(NH.nego_header_id, -1, NEW_NH.nego_header_id          , NH.nego_header_id          ) as nego_header_id
            , map(-1, NH.nego_header_id     , NEW_NH.reference_nego_header_id
                    , NH.nego_document_round, NEW_RV.reference_nego_header_id, NH.reference_nego_header_id) as reference_nego_header_id
            , map(-1, NH.nego_header_id     , NEW_NH.previous_nego_header_id
                    , NH.nego_document_round, NEW_RV.previous_nego_header_id, NH.previous_nego_header_id) as previous_nego_header_id
            , NH.operation_org_code
            , NH.operation_unit_code
            , map(-1, NH.nego_header_id     , NEW_NH.reference_nego_document_number
                    , NH.nego_document_round, NEW_RV.reference_nego_document_number, NH.reference_nego_document_number) as reference_nego_document_number
            , map(-1, NH.nego_header_id     , NEW_NH.nego_document_round
                    , NH.nego_document_round, NEW_RV.nego_document_round, NH.nego_document_round) as nego_document_round
            , map(-1, NH.nego_header_id     , NEW_NH.nego_document_number
                    , NH.nego_document_round, NEW_RV.nego_document_number, NH.nego_document_number) as nego_document_number
            , NH.nego_document_title
            , NH.nego_document_desc
            , NH.nego_progress_status_code
            , NH.award_progress_status_code
            , NH.reply_times
            , NH.supplier_count
            , NH.nego_type_code
            , NH.outcome_code
            , NH.negotiation_output_class_code
            , NH.buyer_empno
            , NH.buyer_department_code
            , NH.immediate_apply_flag
            , NH.open_date
            , NH.closing_date
            , NH.auto_rfq
            , NH.items_count
            , NH.negotiation_style_code
            , NH.close_date_ext_enabled_hours
            , NH.close_date_ext_enabled_count
            , NH.actual_extension_count
            , NH.remaining_hours
            , NH.note_content
            , NH.award_type_code
            , NH.award_method_code
            , NH.target_amount_config_flag
            , NH.target_currency
            , NH.target_amount
            , NH.supplier_participation_flag
            , NH.partial_allow_flag
            , NH.bidding_result_open_status_code
            -- , * 
            , NOW() local_create_dtm, NOW() local_update_dtm, :v_app_user create_user_id, :v_app_user update_user_id, NOW() system_create_dtm, NOW() system_update_dtm 
            FROM :I_TABLE_NEGOHEADERS NH
            left outer many to one join SP_SC_NEGO_HEADERS_NEW_RECORD_VIEW NEW_NH ON NH.tenant_id = NEW_NH.tenant_id
            left outer many to one join SP_SC_NEGO_HEADERS_NEW_REVISION_VIEW NEW_RV ON NH.tenant_id = NEW_RV.tenant_id AND NH.nego_header_id = NEW_RV.nego_header_id
            ;
    SELECT TOP 1 tenant_id, Nego_header_id INTO v_tenant_id, v_nego_header_id FROM :vt_nego_header;

    BEGIN PARALLEL EXECUTION
/* 
        DELETE FROM SP_SC_NEGO_SUPPLIERS AS MAIN
            WHERE EXISTS ( SELECT * FROM :I_TABLE_NEGOHEADERS WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID )
                OR EXISTS ( SELECT * FROM :I_TABLE_NEGOITEMPRICES WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID AND NEGO_ITEM_NUMBER = MAIN.NEGO_ITEM_NUMBER )
                OR EXISTS ( SELECT * FROM :I_TABLE_NEGOSUPPLIERS WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID AND NEGO_ITEM_NUMBER = MAIN.NEGO_ITEM_NUMBER  AND ITEM_SUPPLIER_SEQUENCE = MAIN.ITEM_SUPPLIER_SEQUENCE )
        ;
        DELETE FROM SP_SC_NEGO_ITEM_PRICES AS MAIN 
            WHERE EXISTS ( SELECT * FROM :I_TABLE_NEGOHEADERS WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID )
                OR EXISTS ( SELECT * FROM :I_TABLE_NEGOITEMPRICES WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID AND NEGO_ITEM_NUMBER = MAIN.NEGO_ITEM_NUMBER )
        ;
        DELETE FROM SP_SC_NEGO_HEADERS AS MAIN 
            WHERE EXISTS ( SELECT * FROM :I_TABLE_NEGOHEADERS WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID )
        ;
 */

        UPSERT SP_SC_NEGO_HEADERS ( 
              tenant_id
            , nego_header_id
            , reference_nego_header_id
            , previous_nego_header_id
            , operation_org_code
            , operation_unit_code
            , reference_nego_document_number
            , nego_document_round
            , nego_document_number
            , nego_document_title
            , nego_document_desc
            , nego_progress_status_code
            , award_progress_status_code
            , reply_times
            , supplier_count
            , nego_type_code
            , outcome_code
            , negotiation_output_class_code
            , buyer_empno
            , buyer_department_code
            , immediate_apply_flag
            , open_date
            , closing_date
            , auto_rfq
            , items_count
            , negotiation_style_code
            , close_date_ext_enabled_hours
            , close_date_ext_enabled_count
            , actual_extension_count
            , remaining_hours
            , note_content
            , award_type_code
            , award_method_code
            , target_amount_config_flag
            , target_currency
            , target_amount
            , supplier_participation_flag
            , partial_allow_flag
            , bidding_result_open_status_code
            , local_create_dtm
            , local_update_dtm
            , create_user_id
            , update_user_id
            , system_create_dtm
            , system_update_dtm
        ) SELECT * FROM :vt_nego_header
        ;

        UPSERT SP_SC_NEGO_ITEM_PRICES(
              tenant_id
            , nego_header_id
            , nego_item_number
            , company_code
            , operation_org_type_code
            , operation_org_code
            , operation_unit_code
            , award_progress_status_code
            , line_type_code
            , material_code
            , material_desc
            , specification
            , bpa_price
            , detail_net_price
            , recommend_info
            , group_id
            , location
            , purpose
            , reason
            , request_date
            , attch_code
            , supplier_provide_info
            , incoterms_code
            , payment_terms_code
            , market_code
            , excl_flag
            , specific_supplier_count
            , vendor_pool_code
            , request_quantity
            , uom_code
            , maturity_date
            , currency_code
            , response_currency_code
            , exrate_type_code
            , exrate_date
            , bidding_start_net_price
            , bidding_start_net_price_flag
            , bidding_target_net_price
            , current_price
            , note_content
            , pr_number
            , pr_approve_number
            , req_submission_status
            , req_reapproval
            , requisition_flag
            , price_submission_no
            , price_submisstion_status
            , interface_source
            , budget_department_code
            , requestor_empno
            , request_department_code
            , local_create_dtm
            , local_update_dtm
            , create_user_id
            , update_user_id
            , system_create_dtm
            , system_update_dtm
        ) SELECT 
              IFNULL(NIP.tenant_id, :v_tenant_id)           AS tenant_id
            , IFNULL(NIP.nego_header_id, :v_nego_header_id) AS nego_header_id
            , map(nego_item_number
                    , -1, CAST( IFNULL(NIP_ITEM_MAX.nego_item_number_max,0) 
                                + row_number() over(partition by NIP.tenant_id, NIP.nego_header_id, NIP.nego_item_number) AS INTEGER) 
                    , nego_item_number) as nego_item_number
            , NIP.company_code
            , NIP.operation_org_type_code
            , NIP.operation_org_code
            , NIP.operation_unit_code
            , NIP.award_progress_status_code
            , NIP.line_type_code
            , NIP.material_code
            , NIP.material_desc
            , NIP.specification
            , NIP.bpa_price
            , NIP.detail_net_price
            , NIP.recommend_info
            , NIP.group_id
            , NIP.location
            , NIP.purpose
            , NIP.reason
            , NIP.request_date
            , NIP.attch_code
            , NIP.supplier_provide_info
            , NIP.incoterms_code
            , NIP.payment_terms_code
            , NIP.market_code
            , NIP.excl_flag
            , NIP.specific_supplier_count
            , NIP.vendor_pool_code
            , NIP.request_quantity
            , NIP.uom_code
            , NIP.maturity_date
            , NIP.currency_code
            , NIP.response_currency_code
            , NIP.exrate_type_code
            , NIP.exrate_date
            , NIP.bidding_start_net_price
            , NIP.bidding_start_net_price_flag
            , NIP.bidding_target_net_price
            , NIP.current_price
            , NIP.note_content
            , NIP.pr_number
            , NIP.pr_approve_number
            , NIP.req_submission_status
            , NIP.req_reapproval
            , NIP.requisition_flag
            , NIP.price_submission_no
            , NIP.price_submisstion_status
            , NIP.interface_source
            , NIP.budget_department_code
            , NIP.requestor_empno
            , NIP.request_department_code
            , NOW() local_create_dtm, NOW() local_update_dtm, :v_app_user create_user_id, :v_app_user update_user_id, NOW() system_create_dtm, NOW() system_update_dtm
            FROM :I_TABLE_NEGOITEMPRICES NIP
            left outer join ( SELECT tenant_id, nego_header_id, CAST(MAX(nego_item_number) AS INTEGER) nego_item_number_max 
                              FROM SP_SC_NEGO_ITEM_PRICES 
                              WHERE tenant_id = :v_tenant_id AND nego_header_id = :v_nego_header_id 
                              GROUP BY tenant_id, nego_header_id ) NIP_ITEM_MAX
            ON NIP.tenant_id = NIP_ITEM_MAX.tenant_id AND NIP.nego_header_id = NIP_ITEM_MAX.nego_header_id
            ;


        UPSERT SP_SC_NEGO_SUPPLIERS(
              tenant_id
            , nego_header_id
            , nego_item_number
            , item_supplier_sequence
            , operation_org_code
            , operation_unit_code
            , nego_supplier_register_type_code
            , evaluation_type_code
            , nego_supeval_type_code
            , supplier_code
            , supplier_name
            , supplier_type_code
            , excl_flag
            , excl_reason_desc
            , include_flag
            , nego_target_include_reason_desc
            , only_maker_flat
            , contact
            , note_content
            , local_create_dtm
            , local_update_dtm
            , create_user_id
            , upDATE_user_id
            , system_create_dtm
            , system_upDATE_dtm
        ) SELECT *
        , NOW() local_create_dtm, NOW() local_update_dtm, :v_app_user create_user_id, :v_app_user update_user_id, NOW() system_create_dtm, NOW() system_update_dtm
        FROM :I_TABLE_NEGOSUPPLIERS;
    END;

    -- # ERROR TEST # SELECT 1/:v_int FROM DUMMY;
    O_TABLE_MESSAGE = SELECT '' AS TENANT_ID, 0 AS NEGO_HEADER_ID, CAST(0 AS INTEGER) AS CODE, 'Successed' AS MESSAGE FROM DUMMY;
END;