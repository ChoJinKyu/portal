PROCEDURE SP_SC_NEGO_HEADERS_DEEPDELETE (
	IN	I_TABLE_NEGOHEADERS             SP_SC_NEGO_HEADERS_KEY_TYPE,
	IN	I_TABLE_NEGOITEMPRICES          SP_SC_NEGO_ITEMPRICES_KEY_TYPE,
	IN	I_TABLE_NEGOSUPPLIERS           SP_SC_NEGO_SUPPLIERS_KEY_TYPE,
	IN	I_TABLE_NEGOITEMNONPRICES       SP_SC_NEGO_ITEM_NON_PRICE_KEY_TYPE,
	IN	I_TABLE_NEGOITEMNONPRICEDTLS    SP_SC_NEGO_ITEM_NON_PRICE_DTL_KEY_TYPE,
    OUT O_TABLE_MESSAGE TABLE (TENANT_ID NVARCHAR(10),
                           NEGO_HEADER_ID BIGINT,
                           NEGO_DOCUMENT_NUMBER NVARCHAR(50),
                           CODE INTEGER,
                        --    CODE_STRING NVARCHAR(256),
                           MESSAGE NVARCHAR(2000))
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
AS
BEGIN
	DECLARE v_int INT = 0;
    DECLARE v_tenant_id NVARCHAR(10);
    DECLARE v_nego_header_id BIGINT;
    DECLARE v_nego_document_number NVARCHAR(50);
	DECLARE error_occurred CONDITION FOR SQL_ERROR_CODE 10001;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        O_TABLE_MESSAGE = SELECT '' AS TENANT_ID, 0 AS NEGO_HEADER_ID, '' AS NEGO_DOCUMENT_NUMBER, ::SQL_ERROR_CODE AS CODE, ::SQL_ERROR_MESSAGE AS MESSAGE FROM DUMMY;
        RESIGNAL;
        -- ROLLBACK WORK;
        -- # Wrtie a log table
		-- BEGIN AUTONOMOUS TRANSACTION
		--     error = LEFT (::SQL_ERROR_MESSAGE,1800);
		-- 	INSERT INTO "SP_SC_LOGS"("USER","PROCESS","SUB_PROCESS","MSG_TIMESTAMP","MSG_TYPE","MSG_TEXT","SQL_STATEMENT")
		-- 	SELECT
		-- 		current_user              ,
		-- 		'SP_SC'                   ,
		-- 		'Deepinsert Nego Headers' ,
		-- 		CURRENT_TIMESTAMP         ,
		-- 		'ERROR'                   ,
		-- 		:error                    ,
		-- 		'SQL TEST'                
		-- 	FROM "DUMMY" ;
		-- END;
    END;

    IF RECORD_COUNT(:I_TABLE_NEGOHEADERS) = 0 AND RECORD_COUNT(:I_TABLE_NEGOHEADERS) = 0 AND RECORD_COUNT(:I_TABLE_NEGOHEADERS) = 0 
        AND RECORD_COUNT(:I_TABLE_NEGOITEMNONPRICES) = 0 AND RECORD_COUNT(:I_TABLE_NEGOITEMNONPRICEDTLS) = 0 THEN
        SIGNAL error_occurred SET MESSAGE_TEXT = 'No input value!';
    END IF;

	-- IN	I_TABLE_NEGOHEADERS             SP_SC_NEGO_HEADERS_KEY_TYPE,
	-- IN	I_TABLE_NEGOITEMPRICES          SP_SC_NEGO_ITEMPRICES_KEY_TYPE,
	-- IN	I_TABLE_NEGOSUPPLIERS           SP_SC_NEGO_SUPPLIERS_KEY_TYPE,
	-- IN	I_TABLE_NEGOITEMNONPRICES       SP_SC_NEGO_ITEM_NON_PRICE_KEY_TYPE,
	-- IN	I_TABLE_NEGOITEMNONPRICEDTLS    SP_SC_NEGO_ITEM_NON_PRICE_DTL_KEY_TYPE,
    
    SELECT TOP 1 tenant_id, nego_header_id, nego_document_number INTO v_tenant_id, v_nego_header_id, v_nego_document_number FROM SP_SC_NEGO_HEADERS MAIN
        WHERE 1=0
            OR EXISTS ( SELECT * FROM :I_TABLE_NEGOHEADERS WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID )
            OR EXISTS ( SELECT * FROM :I_TABLE_NEGOITEMPRICES WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID )
            OR EXISTS ( SELECT * FROM :I_TABLE_NEGOSUPPLIERS WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID  )
    ;

    BEGIN PARALLEL EXECUTION
        -- # Delete Item Price + Supplier
        DELETE FROM SP_SC_NEGO_SUPPLIERS AS MAIN
            WHERE EXISTS ( SELECT * FROM :I_TABLE_NEGOHEADERS WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID )
                OR EXISTS ( SELECT * FROM :I_TABLE_NEGOITEMPRICES WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID AND NEGO_ITEM_NUMBER = MAIN.NEGO_ITEM_NUMBER )
                OR EXISTS ( SELECT * FROM :I_TABLE_NEGOSUPPLIERS WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID AND NEGO_ITEM_NUMBER = MAIN.NEGO_ITEM_NUMBER  AND ITEM_SUPPLIER_SEQUENCE = MAIN.ITEM_SUPPLIER_SEQUENCE )
        ;
        DELETE FROM SP_SC_NEGO_ITEM_PRICES AS MAIN 
            WHERE EXISTS ( SELECT * FROM :I_TABLE_NEGOHEADERS WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID )
                OR EXISTS ( SELECT * FROM :I_TABLE_NEGOITEMPRICES WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID AND NEGO_ITEM_NUMBER = MAIN.NEGO_ITEM_NUMBER )
        ;

        -- # Delete Item Non Price + Detail
        DELETE FROM SP_SC_NEGO_ITEM_NON_PRICE_DTL AS MAIN
            WHERE EXISTS ( SELECT * FROM :I_TABLE_NEGOHEADERS WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID )
                OR EXISTS ( SELECT * FROM :I_TABLE_NEGOITEMNONPRICES WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID AND NONPR_ITEM_NUMBER = MAIN.NONPR_ITEM_NUMBER )
                OR EXISTS ( SELECT * FROM :I_TABLE_NEGOITEMNONPRICEDTLS WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID AND NONPR_ITEM_NUMBER = MAIN.NONPR_ITEM_NUMBER  AND NONPR_DTL_ITEM_NUMBER = MAIN.NONPR_DTL_ITEM_NUMBER )
        ;
        DELETE FROM SP_SC_NEGO_ITEM_NON_PRICE AS MAIN 
            WHERE EXISTS ( SELECT * FROM :I_TABLE_NEGOHEADERS WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID )
                OR EXISTS ( SELECT * FROM :I_TABLE_NEGOITEMNONPRICES WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID AND NONPR_ITEM_NUMBER = MAIN.NONPR_ITEM_NUMBER )
        ;

        -- # Delete Header
        DELETE FROM SP_SC_NEGO_HEADERS AS MAIN 
            WHERE EXISTS ( SELECT * FROM :I_TABLE_NEGOHEADERS WHERE TENANT_ID = MAIN.TENANT_ID AND NEGO_HEADER_ID = MAIN.NEGO_HEADER_ID )
        ;
    END;

    -- # ERROR TEST # SELECT 1/:v_int FROM DUMMY;
    O_TABLE_MESSAGE = SELECT :v_tenant_id AS TENANT_ID, :v_nego_header_id AS NEGO_HEADER_ID, :v_nego_document_number AS NEGO_DOCUMENT_NUMBER, CAST(0 AS INTEGER) AS CODE, 'Delete Succeeded' AS MESSAGE FROM DUMMY;
END;



/*
    type tyNegoHeaderKey {
        tenant_id                       : type of Sc_Nego_Headers : tenant_id;
        nego_header_id                  : type of Sc_Nego_Headers : nego_header_id;
    };

    type tyNegoItemPriceKey {
        tenant_id                    : type of Sc_Nego_Item_Prices : tenant_id;
        nego_header_id               : type of Sc_Nego_Item_Prices : nego_header_id;
        nego_item_number             : type of Sc_Nego_Item_Prices : nego_item_number;
    };

    type tyNegoSupplierKey {
        tenant_id                        : type of Sc_Nego_Suppliers : tenant_id;
        nego_header_id                   : type of Sc_Nego_Suppliers : nego_header_id;
        nego_item_number                 : type of Sc_Nego_Suppliers : nego_item_number;
        item_supplier_sequence           : type of Sc_Nego_Suppliers : item_supplier_sequence;
    }; 
*/
