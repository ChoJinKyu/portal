PROCEDURE TEST_SP_SC_NEGOHEADERNEW (
	IN	I_TENANT_ID		NVARCHAR(5),
	IN	REFERENCE_NEGO_DOCUMENT_NUMBER INTEGER DEFAULT NULL,
    OUT O_MSG TABLE(MESSAGE_CODE NVARCHAR(2), MESSAGE_CONTENTS NVARCHAR(5000))
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
AS
BEGIN
	-- DECLARE LV_CURRENT_ORIGIN		INTEGER;
    DECLARE LV_STATEMENT			NCLOB DEFAULT '';
 --   DECLARE LV_SCORE_FORMULA_PARAM	NCLOB;
	-- DECLARE LV_FINDING_FILTER_PARAM	NCLOB;

	DECLARE ERROR_OCCURRED CONDITION FOR SQL_ERROR_CODE 10001;
	DECLARE INVALID_INPUT_VALUE CONDITION FOR SQL_ERROR_CODE 10002;

	
	DECLARE EXIT HANDLER FOR ERROR_OCCURRED 
	BEGIN
		O_MSG = SELECT 'NG' MESSAGE_CODE
		, ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE MESSAGE_CONTENTS 
		FROM DUMMY;
	END;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN 
		SIGNAL ERROR_OCCURRED SET MESSAGE_TEXT = 'INVALID SYNTAX IN FINDING FILTER: [' ||
			CAST('ERROR CODE: ' || ::SQL_ERROR_CODE || ' - ' || ::SQL_ERROR_MESSAGE AS NVARCHAR(2000)) || ' | ' ||
			CAST(LV_STATEMENT AS NVARCHAR(2000)) || ']!';
	END;
	
	IF I_TENANT_ID IS NULL OR I_TENANT_ID = '' THEN
		SIGNAL INVALID_INPUT_VALUE SET MESSAGE_TEXT = 'FINDING TYPE (I_TENANT_ID) IS MANDATORY!';
    END IF;
    /*
      UPSERT SP_SC_NEGO_HEADERS (tenant_id,nego_header_id,reference_nego_header_id,previous_nego_header_id
          ,reference_nego_document_number,nego_document_round,nego_document_number,nego_document_title) 
    */
          
END;