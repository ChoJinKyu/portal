PROCEDURE SP_VI_BASE_PRICE_APRL_UPSERT_PROC (IN I_MASTER SP_VI_BASE_PRICE_APRL_MST_TYPE
                                    ,IN I_APPROVER SP_VI_BASE_PRICE_APRL_APPROVER_TYPE
                                    ,IN I_REFERER SP_VI_BASE_PRICE_APRL_REFERER_TYPE
									,IN I_TYPE SP_VI_BASE_PRICE_APRL_TYPE_TYPE
                                    ,IN I_ITEM SP_VI_BASE_PRICE_APRL_ITEM_TYPE
                                    ,IN I_DTL SP_VI_BASE_PRICE_APRL_DTL_TYPE
									,IN NET_PRICE_TYPE_CODE NVARCHAR(30)
                                    ,OUT O_MSG SP_VI_BASE_PRICE_APRL_OUT_TYPE)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
/**************************************************************************
Scrum          : SP/VI/양산기준단가 품의서 수정
Procedure Name : SP_VI_BASE_PRICE_APRL_UPSERT_PROC
Creator        : 유남열
Description    : 품의서 수정
History        : 2021-01-27 initial creation
***************************************************************************/
AS
BEGIN
    DECLARE v_Record_Cnt INT := 0;
    DECLARE v_Price_Type NVARCHAR(30);  
	
    -- 10. 품의서 마스터(공통) 수정
    MERGE INTO CM_APPROVAL_MST T
        USING :I_MASTER S 
        ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER
    WHEN MATCHED THEN
        UPDATE 
        SET APPROVAL_TITLE          = S.APPROVAL_TITLE
           , APPROVAL_CONTENTS      = S.APPROVAL_CONTENTS
           , APPROVE_STATUS_CODE    = S.APPROVE_STATUS_CODE
           , REQUEST_DATE           = S.REQUEST_DATE
           , ATTCH_GROUP_NUMBER     = S.ATTCH_GROUP_NUMBER
           , LOCAL_UPDATE_DTM       = S.LOCAL_UPDATE_DTM
           , UPDATE_USER_ID         = S.UPDATE_USER_ID
           , SYSTEM_UPDATE_DTM      = NOW()
    ;

    -- UPDATE CM_APPROVAL_MST
    -- SET
    --        APPROVAL_TITLE           = :I_MASTER.APPROVAL_TITLE
    --        , APPROVAL_CONTENTS      = :I_MASTER.APPROVAL_CONTENTS
    --     --    , APPROVE_STATUS_CODE    = S_MASTER.APPROVE_STATUS_CODE
    --     --    , REQUEST_DATE           = :I_MASTER.REQUEST_DATE
    --     --    , ATTCH_GROUP_NUMBER     = :I_MASTER.ATTCH_GROUP_NUMBER
    --     --    , LOCAL_UPDATE_DTM       = :I_MASTER.LOCAL_UPDATE_DTM
    --     --    , UPDATE_USER_ID         = :I_MASTER.UPDATE_USER_ID
    --     --    , SYSTEM_UPDATE_DTM      = :I_MASTER.SYSTEM_UPDATE_DTM
    -- WHERE (TENANT_ID, APPROVAL_NUMBER) =  (
    --         SELECT TENANT_ID, APPROVAL_NUMBER FROM :I_MASTER
    --     );

    -- 20. 품의서 승인자 등록/수정
    MERGE INTO CM_APPROVER T
        USING :I_APPROVER S 
        ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.APPROVE_SEQUENCE = S.APPROVE_SEQUENCE AND T.APPROVER_EMPNO = S.APPROVER_EMPNO
    WHEN MATCHED THEN
        UPDATE 
        SET APPROVER_TYPE_CODE      = S.APPROVER_TYPE_CODE
           , APPROVE_STATUS_CODE    = S.APPROVE_STATUS_CODE
           , LOCAL_UPDATE_DTM       = S.LOCAL_UPDATE_DTM
           , UPDATE_USER_ID         = S.UPDATE_USER_ID
           , SYSTEM_UPDATE_DTM      = NOW()
    WHEN NOT MATCHED THEN
        INSERT 
            (
                TENANT_ID, APPROVAL_NUMBER, APPROVE_SEQUENCE, APPROVER_EMPNO, APPROVER_TYPE_CODE, APPROVE_STATUS_CODE,
                LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
            )
        VALUES
            (
                S.TENANT_ID, S.APPROVAL_NUMBER, S.APPROVE_SEQUENCE, S.APPROVER_EMPNO, S.APPROVER_TYPE_CODE, S.APPROVE_STATUS_CODE,
                S.LOCAL_CREATE_DTM, S.LOCAL_UPDATE_DTM, S.CREATE_USER_ID, S.UPDATE_USER_ID, NOW(), NOW() 
            )
    ;

    -- 21. 품의서 승인자 삭제
    DELETE FROM CM_APPROVER
    WHERE (TENANT_ID, APPROVAL_NUMBER) IN (SELECT DISTINCT TENANT_ID, APPROVAL_NUMBER FROM :I_APPROVER)
        AND
        (TENANT_ID, APPROVAL_NUMBER, APPROVE_SEQUENCE, APPROVER_EMPNO) IN  (
            SELECT 
                T.TENANT_ID, T.APPROVAL_NUMBER, T.APPROVE_SEQUENCE, T.APPROVER_EMPNO 
            FROM 
                CM_APPROVER T LEFT OUTER JOIN :I_APPROVER S
                ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.APPROVE_SEQUENCE = S.APPROVE_SEQUENCE AND T.APPROVER_EMPNO = S.APPROVER_EMPNO
            WHERE
                S.TENANT_ID IS NULL
        );

    -- 30. 품의서 참조자 저장 : 빈 테이블(옵션 정보)일 수 있으므로 데이터가 있는지 체크
    SELECT COUNT(*) INTO v_Record_Cnt FROM :I_REFERER;

    IF v_Record_Cnt > 0 THEN
        -- 31. 품의서 참조자 등록
        MERGE INTO CM_REFERER T
            USING :I_REFERER S 
            ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.REFERER_EMPNO = S.REFERER_EMPNO
        WHEN NOT MATCHED THEN
            INSERT 
                (
                    TENANT_ID, APPROVAL_NUMBER, REFERER_EMPNO,
                    LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
                )
            VALUES
                (
                    S.TENANT_ID, S.APPROVAL_NUMBER, S.REFERER_EMPNO,
                    S.LOCAL_CREATE_DTM, S.LOCAL_UPDATE_DTM, S.CREATE_USER_ID, S.UPDATE_USER_ID, NOW(), NOW() 
                )
        ;

        -- 32. 품의서 참조자 삭제
        DELETE FROM CM_REFERER
        WHERE     
		    (TENANT_ID, APPROVAL_NUMBER) IN (SELECT DISTINCT TENANT_ID, APPROVAL_NUMBER FROM :I_REFERER)
            AND
            (TENANT_ID, APPROVAL_NUMBER, REFERER_EMPNO) IN  (
                SELECT 
                    T.TENANT_ID, T.APPROVAL_NUMBER, T.REFERER_EMPNO 
                FROM 
                    CM_REFERER T LEFT OUTER JOIN :I_REFERER S
                    ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.REFERER_EMPNO = S.REFERER_EMPNO
                WHERE
                    S.TENANT_ID IS NULL
            );
    END IF;

    -- 40. 양산단가유형 등록/수정
    MERGE INTO SP_VI_BASE_PRICE_APRL_TYPE T
        USING :I_TYPE S 
        ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER 
    WHEN MATCHED THEN
        UPDATE 
        SET  NET_PRICE_TYPE_CODE    = S.NET_PRICE_TYPE_CODE
           , LOCAL_UPDATE_DTM       = S.LOCAL_UPDATE_DTM
           , UPDATE_USER_ID         = S.UPDATE_USER_ID
           , SYSTEM_UPDATE_DTM      = NOW()
    WHEN NOT MATCHED THEN
        INSERT 
            (
                TENANT_ID, APPROVAL_NUMBER, NET_PRICE_TYPE_CODE,
                LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
            )
        VALUES
            (
                S.TENANT_ID, S.APPROVAL_NUMBER, S.NET_PRICE_TYPE_CODE,
                S.LOCAL_CREATE_DTM, S.LOCAL_UPDATE_DTM, S.CREATE_USER_ID, S.UPDATE_USER_ID, NOW(), NOW() 
            )
    ;

    -- 41. 양산단가유형 삭제
    DELETE FROM SP_VI_BASE_PRICE_APRL_TYPE
    WHERE        
	   (TENANT_ID, APPROVAL_NUMBER) IN (SELECT DISTINCT TENANT_ID, APPROVAL_NUMBER FROM :I_TYPE)
        AND
        (TENANT_ID, APPROVAL_NUMBER) IN  (
            SELECT 
                T.TENANT_ID, T.APPROVAL_NUMBER
            FROM SP_VI_BASE_PRICE_APRL_TYPE T LEFT OUTER JOIN :I_TYPE S
                ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER 
            WHERE
                S.TENANT_ID IS NULL
        );

 

    -- 50. 품의서 ITEM 등록/수정
	SELECT :NET_PRICE_TYPE_CODE  INTO v_Price_Type 	FROM DUMMY; 
	
	IF v_Price_Type = 'NPT01' THEN   --일반자재	
    MERGE INTO SP_VI_BASE_PRICE_APRL_ITEM T
        USING :I_ITEM S 
        ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.ITEM_SEQUENCE = S.ITEM_SEQUENCE
    WHEN MATCHED THEN
        UPDATE 
        SET  COMPANY_CODE           = S.COMPANY_CODE   
		   , BIZUNIT_CODE           = S.BIZUNIT_CODE
		   , MANAGEMENT_MPRICE_CODE = S.MANAGEMENT_MPRICE_CODE
		   , BASE_YEAR              = S.BASE_YEAR
		   , APPLY_START_YYYYMM     = S.APPLY_START_YYYYMM
		   , APPLY_END_YYYYMM       = S.APPLY_END_YYYYMM
		   , BIZDIVISION_CODE       = S.BIZDIVISION_CODE
		   , PLANT_CODE             = S.PLANT_CODE 
		   , SUPPLY_PLANT_CODE      = S.SUPPLY_PLANT_CODE
		   , SUPPLIER_CODE          = S.SUPPLIER_CODE
		   , MATERIAL_CODE          = S.MATERIAL_CODE
		   , MATERIAL_NAME          = S.MATERIAL_NAME
		   , VENDOR_POOL_CODE       = S.VENDOR_POOL_CODE
		   , CURRENCY_CODE          = S.CURRENCY_CODE
		   , MATERIAL_PRICE_UNIT    = S.MATERIAL_PRICE_UNIT
		   , BASE_PRICE             = S.BASE_PRICE
		   , BUYER_EMPNO            = S.BUYER_EMPNO
		   , LOCAL_UPDATE_DTM       = S.LOCAL_UPDATE_DTM
           , UPDATE_USER_ID         = S.UPDATE_USER_ID
           , SYSTEM_UPDATE_DTM      = NOW()
    WHEN NOT MATCHED THEN
        INSERT 
            (
               TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE, COMPANY_CODE, BIZUNIT_CODE, MANAGEMENT_MPRICE_CODE, BASE_YEAR,APPLY_START_YYYYMM, APPLY_END_YYYYMM, BIZDIVISION_CODE, PLANT_CODE, 
			   SUPPLY_PLANT_CODE, SUPPLIER_CODE, MATERIAL_CODE, MATERIAL_NAME, VENDOR_POOL_CODE, CURRENCY_CODE, MATERIAL_PRICE_UNIT, BASE_PRICE, BUYER_EMPNO, 
			   PCST, METAL_NET_PRICE, COATING_MAT_NET_PRICE, FABRIC_NET_PRICE,
			   LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
            )
        VALUES
            (
                S.TENANT_ID, S.APPROVAL_NUMBER, S.ITEM_SEQUENCE, S.COMPANY_CODE, S.BIZUNIT_CODE, S.MANAGEMENT_MPRICE_CODE, S.BASE_YEAR,S.APPLY_START_YYYYMM, S.APPLY_END_YYYYMM, S.BIZDIVISION_CODE, 
                S.PLANT_CODE, '', S.SUPPLIER_CODE, S.MATERIAL_CODE, S.MATERIAL_NAME, S.VENDOR_POOL_CODE, S.CURRENCY_CODE, S.MATERIAL_PRICE_UNIT, S.BASE_PRICE, S.BUYER_EMPNO, 
                0 , 0 , 0 , 0, 
                S.LOCAL_CREATE_DTM, S.LOCAL_UPDATE_DTM, S.CREATE_USER_ID, S.UPDATE_USER_ID, NOW(), NOW() 
            );			
    ELSEIF v_Price_Type = 'NPT02' THEN --가공비 SRS 
    MERGE INTO SP_VI_BASE_PRICE_APRL_ITEM T
        USING :I_ITEM S 
        ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.ITEM_SEQUENCE = S.ITEM_SEQUENCE
    WHEN MATCHED THEN
        UPDATE 
        SET  COMPANY_CODE           = S.COMPANY_CODE   
		   , BIZUNIT_CODE           = S.BIZUNIT_CODE
		   , MANAGEMENT_MPRICE_CODE = S.MANAGEMENT_MPRICE_CODE
		   , BASE_YEAR              = S.BASE_YEAR
		   , APPLY_START_YYYYMM     = S.APPLY_START_YYYYMM
		   , APPLY_END_YYYYMM       = S.APPLY_END_YYYYMM
		   , BIZDIVISION_CODE       = S.BIZDIVISION_CODE
		   , PLANT_CODE             = S.PLANT_CODE 
		   , SUPPLY_PLANT_CODE      = S.SUPPLY_PLANT_CODE
		   , SUPPLIER_CODE          = S.SUPPLIER_CODE
		   , MATERIAL_CODE          = S.MATERIAL_CODE
		   , MATERIAL_NAME          = S.MATERIAL_NAME
		   , VENDOR_POOL_CODE       = S.VENDOR_POOL_CODE
		   , CURRENCY_CODE          = S.CURRENCY_CODE
		   , MATERIAL_PRICE_UNIT    = S.MATERIAL_PRICE_UNIT
		   , BASE_PRICE             = S.BASE_PRICE
		   , BUYER_EMPNO            = S.BUYER_EMPNO
		   , PCST                   = S.PCST  
		   , COATING_MAT_NET_PRICE  = S.COATING_MAT_NET_PRICE 
		   , FABRIC_NET_PRICE       = S.FABRIC_NET_PRICE
		   , LOCAL_UPDATE_DTM       = S.LOCAL_UPDATE_DTM
           , UPDATE_USER_ID         = S.UPDATE_USER_ID
           , SYSTEM_UPDATE_DTM      = NOW()
    WHEN NOT MATCHED THEN
        INSERT 
            (
               TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE, COMPANY_CODE, BIZUNIT_CODE, MANAGEMENT_MPRICE_CODE, BASE_YEAR,APPLY_START_YYYYMM, APPLY_END_YYYYMM, BIZDIVISION_CODE, PLANT_CODE, 
			   SUPPLY_PLANT_CODE, SUPPLIER_CODE, MATERIAL_CODE, MATERIAL_NAME, VENDOR_POOL_CODE, CURRENCY_CODE, MATERIAL_PRICE_UNIT, BASE_PRICE, BUYER_EMPNO, 
			   PCST, METAL_NET_PRICE, COATING_MAT_NET_PRICE, FABRIC_NET_PRICE,
			   LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
            )
        VALUES
            (
                S.TENANT_ID, S.APPROVAL_NUMBER, S.ITEM_SEQUENCE, S.COMPANY_CODE, S.BIZUNIT_CODE, S.MANAGEMENT_MPRICE_CODE, S.BASE_YEAR,S.APPLY_START_YYYYMM, S.APPLY_END_YYYYMM, S.BIZDIVISION_CODE, 
                S.PLANT_CODE, '', S.SUPPLIER_CODE, S.MATERIAL_CODE, S.MATERIAL_NAME, S.VENDOR_POOL_CODE, S.CURRENCY_CODE, S.MATERIAL_PRICE_UNIT, S.BASE_PRICE, S.BUYER_EMPNO, 
                S.PCST , 0 , S.COATING_MAT_NET_PRICE , S.FABRIC_NET_PRICE, 
                S.LOCAL_CREATE_DTM, S.LOCAL_UPDATE_DTM, S.CREATE_USER_ID, S.UPDATE_USER_ID, NOW(), NOW() 
            );
			
    ELSEIF v_Price_Type = 'NPT03' THEN  --가공비 알박/동박/Sulphate
    MERGE INTO SP_VI_BASE_PRICE_APRL_ITEM T
        USING :I_ITEM S 
        ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.ITEM_SEQUENCE = S.ITEM_SEQUENCE
    WHEN MATCHED THEN
        UPDATE 
        SET  COMPANY_CODE           = S.COMPANY_CODE   
		   , BIZUNIT_CODE           = S.BIZUNIT_CODE
		   , MANAGEMENT_MPRICE_CODE = S.MANAGEMENT_MPRICE_CODE
		   , BASE_YEAR              = S.BASE_YEAR
		   , APPLY_START_YYYYMM     = S.APPLY_START_YYYYMM
		   , APPLY_END_YYYYMM       = S.APPLY_END_YYYYMM
		   , BIZDIVISION_CODE       = S.BIZDIVISION_CODE
		   , PLANT_CODE             = S.PLANT_CODE 
		   , SUPPLY_PLANT_CODE      = S.SUPPLY_PLANT_CODE
		   , SUPPLIER_CODE          = S.SUPPLIER_CODE
		   , MATERIAL_CODE          = S.MATERIAL_CODE
		   , MATERIAL_NAME          = S.MATERIAL_NAME
		   , VENDOR_POOL_CODE       = S.VENDOR_POOL_CODE
		   , CURRENCY_CODE          = S.CURRENCY_CODE
		   , MATERIAL_PRICE_UNIT    = S.MATERIAL_PRICE_UNIT
		   , BASE_PRICE             = S.BASE_PRICE
		   , BUYER_EMPNO            = S.BUYER_EMPNO
		   , PCST                   = S.PCST  
		   , METAL_NET_PRICE        = S.METAL_NET_PRICE 
		   , LOCAL_UPDATE_DTM       = S.LOCAL_UPDATE_DTM
           , UPDATE_USER_ID         = S.UPDATE_USER_ID
           , SYSTEM_UPDATE_DTM      = NOW()
    WHEN NOT MATCHED THEN
        INSERT 
            (
               TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE, COMPANY_CODE, BIZUNIT_CODE, MANAGEMENT_MPRICE_CODE, BASE_YEAR,APPLY_START_YYYYMM, APPLY_END_YYYYMM, BIZDIVISION_CODE, PLANT_CODE, 
			   SUPPLY_PLANT_CODE, SUPPLIER_CODE, MATERIAL_CODE, MATERIAL_NAME, VENDOR_POOL_CODE, CURRENCY_CODE, MATERIAL_PRICE_UNIT, BASE_PRICE, BUYER_EMPNO, 
			   PCST, METAL_NET_PRICE, COATING_MAT_NET_PRICE, FABRIC_NET_PRICE,
			   LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
            )
        VALUES
            (
                S.TENANT_ID, S.APPROVAL_NUMBER, S.ITEM_SEQUENCE, S.COMPANY_CODE, S.BIZUNIT_CODE, S.MANAGEMENT_MPRICE_CODE, S.BASE_YEAR,S.APPLY_START_YYYYMM, S.APPLY_END_YYYYMM, S.BIZDIVISION_CODE, 
                S.PLANT_CODE, '', S.SUPPLIER_CODE, S.MATERIAL_CODE, S.MATERIAL_NAME, S.VENDOR_POOL_CODE, S.CURRENCY_CODE, S.MATERIAL_PRICE_UNIT, S.BASE_PRICE, S.BUYER_EMPNO, 
                S.PCST , S.METAL_NET_PRICE , 0 , 0, 
                S.LOCAL_CREATE_DTM, S.LOCAL_UPDATE_DTM, S.CREATE_USER_ID, S.UPDATE_USER_ID, NOW(), NOW() 
            );			
	
    ELSEIF v_Price_Type = 'NPT04' THEN  --가공비 알박/동박/Sulphate
    MERGE INTO SP_VI_BASE_PRICE_APRL_ITEM T
        USING :I_ITEM S 
        ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.ITEM_SEQUENCE = S.ITEM_SEQUENCE
    WHEN MATCHED THEN
        UPDATE 
        SET  COMPANY_CODE           = S.COMPANY_CODE   
		   , BIZUNIT_CODE           = S.BIZUNIT_CODE
		   , MANAGEMENT_MPRICE_CODE = S.MANAGEMENT_MPRICE_CODE
		   , BASE_YEAR              = S.BASE_YEAR
		   , APPLY_START_YYYYMM     = S.APPLY_START_YYYYMM
		   , APPLY_END_YYYYMM       = S.APPLY_END_YYYYMM
		   , BIZDIVISION_CODE       = S.BIZDIVISION_CODE
		   , PLANT_CODE             = S.PLANT_CODE 
		   , SUPPLY_PLANT_CODE      = S.SUPPLY_PLANT_CODE
		   , SUPPLIER_CODE          = S.SUPPLIER_CODE
		   , MATERIAL_CODE          = S.MATERIAL_CODE
		   , MATERIAL_NAME          = S.MATERIAL_NAME
		   , VENDOR_POOL_CODE       = S.VENDOR_POOL_CODE
		   , CURRENCY_CODE          = S.CURRENCY_CODE
		   , MATERIAL_PRICE_UNIT    = S.MATERIAL_PRICE_UNIT
		   , BASE_PRICE             = S.BASE_PRICE
		   , BUYER_EMPNO            = S.BUYER_EMPNO
		   , PCST                   = S.PCST  
		   , METAL_NET_PRICE        = S.METAL_NET_PRICE 
		   , LOCAL_UPDATE_DTM       = S.LOCAL_UPDATE_DTM
           , UPDATE_USER_ID         = S.UPDATE_USER_ID
           , SYSTEM_UPDATE_DTM      = NOW()
    WHEN NOT MATCHED THEN
        INSERT 
            (
               TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE, COMPANY_CODE, BIZUNIT_CODE, MANAGEMENT_MPRICE_CODE, BASE_YEAR,APPLY_START_YYYYMM, APPLY_END_YYYYMM, BIZDIVISION_CODE, PLANT_CODE, 
			   SUPPLY_PLANT_CODE, SUPPLIER_CODE, MATERIAL_CODE, MATERIAL_NAME, VENDOR_POOL_CODE, CURRENCY_CODE, MATERIAL_PRICE_UNIT, BASE_PRICE, BUYER_EMPNO, 
			   PCST, METAL_NET_PRICE, COATING_MAT_NET_PRICE, FABRIC_NET_PRICE,
			   LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
            )
        VALUES
            (
                S.TENANT_ID, S.APPROVAL_NUMBER, S.ITEM_SEQUENCE, S.COMPANY_CODE, S.BIZUNIT_CODE, S.MANAGEMENT_MPRICE_CODE, S.BASE_YEAR,S.APPLY_START_YYYYMM, S.APPLY_END_YYYYMM, S.BIZDIVISION_CODE, 
                S.PLANT_CODE, '', S.SUPPLIER_CODE, S.MATERIAL_CODE, S.MATERIAL_NAME, S.VENDOR_POOL_CODE, S.CURRENCY_CODE, S.MATERIAL_PRICE_UNIT, S.BASE_PRICE, S.BUYER_EMPNO, 
                S.PCST , S.METAL_NET_PRICE , 0 , 0, 
                S.LOCAL_CREATE_DTM, S.LOCAL_UPDATE_DTM, S.CREATE_USER_ID, S.UPDATE_USER_ID, NOW(), NOW() 
            );			

    ELSEIF v_Price_Type = 'NPT05' THEN  --사내거래
    MERGE INTO SP_VI_BASE_PRICE_APRL_ITEM T
        USING :I_ITEM S 
        ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.ITEM_SEQUENCE = S.ITEM_SEQUENCE
    WHEN MATCHED THEN
        UPDATE 
        SET  COMPANY_CODE           = S.COMPANY_CODE   
		   , BIZUNIT_CODE           = S.BIZUNIT_CODE
		   , MANAGEMENT_MPRICE_CODE = S.MANAGEMENT_MPRICE_CODE
		   , BASE_YEAR              = S.BASE_YEAR
		   , APPLY_START_YYYYMM     = S.APPLY_START_YYYYMM
		   , APPLY_END_YYYYMM       = S.APPLY_END_YYYYMM
		   , BIZDIVISION_CODE       = S.BIZDIVISION_CODE
		   , PLANT_CODE             = S.PLANT_CODE 
		   , SUPPLY_PLANT_CODE      = S.SUPPLY_PLANT_CODE
		   , SUPPLIER_CODE          = S.SUPPLIER_CODE
		   , MATERIAL_CODE          = S.MATERIAL_CODE
		   , MATERIAL_NAME          = S.MATERIAL_NAME
		   , VENDOR_POOL_CODE       = S.VENDOR_POOL_CODE
		   , CURRENCY_CODE          = S.CURRENCY_CODE
		   , MATERIAL_PRICE_UNIT    = S.MATERIAL_PRICE_UNIT
		   , BASE_PRICE             = S.BASE_PRICE
		   , BUYER_EMPNO            = S.BUYER_EMPNO
		   , PCST                   = S.PCST  
		   , METAL_NET_PRICE        = S.METAL_NET_PRICE 
		   , LOCAL_UPDATE_DTM       = S.LOCAL_UPDATE_DTM
           , UPDATE_USER_ID         = S.UPDATE_USER_ID
           , SYSTEM_UPDATE_DTM      = NOW()
    WHEN NOT MATCHED THEN
        INSERT 
            (
               TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE, COMPANY_CODE, BIZUNIT_CODE, MANAGEMENT_MPRICE_CODE, BASE_YEAR,APPLY_START_YYYYMM, APPLY_END_YYYYMM, BIZDIVISION_CODE, PLANT_CODE, 
			   SUPPLY_PLANT_CODE, SUPPLIER_CODE, MATERIAL_CODE, MATERIAL_NAME, VENDOR_POOL_CODE, CURRENCY_CODE, MATERIAL_PRICE_UNIT, BASE_PRICE, BUYER_EMPNO, 
			   PCST, METAL_NET_PRICE, COATING_MAT_NET_PRICE, FABRIC_NET_PRICE,
			   LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
            )
        VALUES
            (
                S.TENANT_ID, S.APPROVAL_NUMBER, S.ITEM_SEQUENCE, S.COMPANY_CODE, S.BIZUNIT_CODE, S.MANAGEMENT_MPRICE_CODE, S.BASE_YEAR,S.APPLY_START_YYYYMM, S.APPLY_END_YYYYMM, S.BIZDIVISION_CODE, 
                S.PLANT_CODE, S.SUPPLY_PLANT_CODE, '', S.MATERIAL_CODE, S.MATERIAL_NAME, S.VENDOR_POOL_CODE, S.CURRENCY_CODE, S.MATERIAL_PRICE_UNIT, S.BASE_PRICE, S.BUYER_EMPNO, 
                0, 0, 0, 0,
                S.LOCAL_CREATE_DTM, S.LOCAL_UPDATE_DTM, S.CREATE_USER_ID, S.UPDATE_USER_ID, NOW(), NOW() 
            );		
	END	IF		
    ;

    -- 51. 품의서 ITEM 삭제
    DELETE FROM SP_VI_BASE_PRICE_APRL_ITEM
    WHERE         
	    (TENANT_ID, APPROVAL_NUMBER) IN (SELECT DISTINCT TENANT_ID, APPROVAL_NUMBER FROM :I_ITEM)
        AND
        (TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE) IN  (
            SELECT 
                T.TENANT_ID, T.APPROVAL_NUMBER, T.ITEM_SEQUENCE
            FROM 
                SP_VI_BASE_PRICE_APRL_ITEM T LEFT OUTER JOIN :I_ITEM S
                ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.ITEM_SEQUENCE = S.ITEM_SEQUENCE
            WHERE
                S.TENANT_ID IS NULL
        );

    -- 60. 품의서 메탈금액정보 등록/수정
 	IF v_Price_Type = 'NPT02' THEN   --SRS	
    MERGE INTO SP_VI_BASE_PRICE_APRL_DTL T
        USING :I_DTL S 
        ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.ITEM_SEQUENCE = S.ITEM_SEQUENCE AND T.METAL_TYPE_CODE = S.METAL_TYPE_CODE
    WHEN MATCHED THEN
        UPDATE 
        SET  METAL_TYPE_CODE                  = S.METAL_TYPE_CODE
           , METAL_NET_PRICE                  = S.METAL_NET_PRICE
           , LOCAL_UPDATE_DTM                 = S.LOCAL_UPDATE_DTM
           , UPDATE_USER_ID                   = S.UPDATE_USER_ID
           , SYSTEM_UPDATE_DTM                = NOW()
    WHEN NOT MATCHED THEN
        INSERT 
            (
                TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE, METAL_TYPE_CODE, METAL_NET_PRICE,
                LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
            )
        VALUES
            (
                S.TENANT_ID, S.APPROVAL_NUMBER, S.ITEM_SEQUENCE, S.METAL_TYPE_CODE, S.METAL_NET_PRICE, 
                S.LOCAL_CREATE_DTM, S.LOCAL_UPDATE_DTM, S.CREATE_USER_ID, S.UPDATE_USER_ID, NOW(), NOW() 
            );
	ELSEIF v_Price_Type = 'NPT03' THEN  --가공비 알박/동박/Sulphate
	MERGE INTO SP_VI_BASE_PRICE_APRL_DTL T
        USING :I_DTL S 
        ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.ITEM_SEQUENCE = S.ITEM_SEQUENCE AND T.METAL_TYPE_CODE = S.METAL_TYPE_CODE
    WHEN MATCHED THEN
        UPDATE 
        SET  METAL_TYPE_CODE                  = S.METAL_TYPE_CODE
           , METAL_NET_PRICE                  = S.METAL_NET_PRICE
           , LOCAL_UPDATE_DTM                 = S.LOCAL_UPDATE_DTM
           , UPDATE_USER_ID                   = S.UPDATE_USER_ID
           , SYSTEM_UPDATE_DTM                = NOW()
    WHEN NOT MATCHED THEN
        INSERT 
            (
                TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE, METAL_TYPE_CODE, METAL_NET_PRICE,
                LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
            )
        VALUES
            (
                S.TENANT_ID, S.APPROVAL_NUMBER, S.ITEM_SEQUENCE, S.METAL_TYPE_CODE, S.METAL_NET_PRICE, 
                S.LOCAL_CREATE_DTM, S.LOCAL_UPDATE_DTM, S.CREATE_USER_ID, S.UPDATE_USER_ID, NOW(), NOW() 
            );
			
	ELSEIF v_Price_Type = 'NPT04' THEN  --가공비 양극재/전구체
	MERGE INTO SP_VI_BASE_PRICE_APRL_DTL T
        USING :I_DTL S 
        ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.ITEM_SEQUENCE = S.ITEM_SEQUENCE AND T.METAL_TYPE_CODE = S.METAL_TYPE_CODE
    WHEN MATCHED THEN
        UPDATE 
        SET  METAL_TYPE_CODE                  = S.METAL_TYPE_CODE
           , METAL_NET_PRICE                  = S.METAL_NET_PRICE
           , LOCAL_UPDATE_DTM                 = S.LOCAL_UPDATE_DTM
           , UPDATE_USER_ID                   = S.UPDATE_USER_ID
           , SYSTEM_UPDATE_DTM                = NOW()
    WHEN NOT MATCHED THEN
        INSERT 
            (
                TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE, METAL_TYPE_CODE, METAL_NET_PRICE,
                LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
            )
        VALUES
            (
                S.TENANT_ID, S.APPROVAL_NUMBER, S.ITEM_SEQUENCE, S.METAL_TYPE_CODE, S.METAL_NET_PRICE, 
                S.LOCAL_CREATE_DTM, S.LOCAL_UPDATE_DTM, S.CREATE_USER_ID, S.UPDATE_USER_ID, NOW(), NOW() 
            );

	END IF;

    -- 61. 금액정보 삭제
    DELETE FROM SP_VI_BASE_PRICE_APRL_DTL
    WHERE         
	    (TENANT_ID, APPROVAL_NUMBER) IN (SELECT DISTINCT TENANT_ID, APPROVAL_NUMBER FROM :I_DTL)
        AND
        (TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE, METAL_TYPE_CODE) IN  (
            SELECT 
                T.TENANT_ID, T.APPROVAL_NUMBER, T.ITEM_SEQUENCE, T.METAL_TYPE_CODE
            FROM 
                SP_VI_BASE_PRICE_APRL_DTL T LEFT OUTER JOIN :I_DTL S
                ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.ITEM_SEQUENCE = S.ITEM_SEQUENCE AND T.METAL_TYPE_CODE = S.METAL_TYPE_CODE
            WHERE
                S.TENANT_ID IS NULL
        );

    O_MSG = SELECT '200' RETURN_CODE, 'Success' RETURN_MSG, '' RETURN_PARAM FROM DUMMY;
    
END;