/************************************************
  1. namespace
  - 모듈코드 소문자로 작성
  - 소모듈 존재시 대모듈.소모듈 로 작성
  2. entity
  - 대문자로 작성
  - 테이블명 생성을 고려하여 '_' 추가
  3. 컬럼(속성)
  - 소문자로 작성
  4. .hdbview, .hdbfunction 등으로 이미 생성된 DB Object 사용시
  entity 위에 @cds.persistence.exists 명시  
  
  5. namespace : dp
  6. Procedure  : DP_GS_SAVE_SUPPLIER_INFO_PROC
  7. Procedure description : Global Sourcing Supplier 정보 저장

  8. history
  -. 2021.01.22 : 최미희 최초작성
  -.  
*************************************************/
/************************************************
  1. namespace
  - 모듈코드 소문자로 작성
  - 소모듈 존재시 대모듈.소모듈 로 작성
  2. entity
  - 대문자로 작성
  - 테이블명 생성을 고려하여 '_' 추가
  3. 컬럼(속성)
  - 소문자로 작성
  4. .hdbview, .hdbfunction 등으로 이미 생성된 DB Object 사용시
  entity 위에 @cds.persistence.exists 명시  
  
  5. namespace : dp
  6. Procedure  : DP_MM_MTL_CLASS_CONV_PROC
  7. Procedure description : 자재 클래스 컨버젼
  8. history
  -. 2021.01.22 : 최미희 최초작성
  -.  CRUD_TYPE_CODE
*************************************************/
PROCEDURE DP_GS_SAVE_SUPPLIER_INFO_PROC ( 
    IN I_USER_ID NVARCHAR(255),
    IN I_SUPPLIER_GEN_TAB TABLE (CRUD_TYPE_CODE NVARCHAR(1),TENANT_ID NVARCHAR(5),SOURCING_SUPPLIER_ID BIGINT,
                                 SOURCING_SUPPLIER_NICKNAME NVARCHAR(100), EMAIL_ADDRESS NVARCHAR(100),
                                 DEVELOP_DATE DATE, DEVELOPER_EMPNO NVARCHAR(30), SOURCING_SUPPLIER_LOCAL_NAME NVARCHAR(240),
                                 SOURCING_SUPPLIER_ENGLISH_NAME NVARCHAR(240), LOCAL_FULL_ADDRESS NVARCHAR(1000),
                                 ENGLISH_FULL_ADDRESS NVARCHAR(1000), PRODUCT_DESC NVARCHAR(300),
                                 AN_PROFILE NVARCHAR(100),TAX_ID NVARCHAR(16), SOURCING_CONTENTS NCLOB, 
                                 REMARK NVARCHAR(3000), ATTCH_GROUP_NUMBER NVARCHAR(100)
                                ),
    IN I_SUPPLIER_FIN_TAB TABLE (CRUD_TYPE_CODE NVARCHAR(1), TENANT_ID NVARCHAR(5),SOURCING_SUPPLIER_ID BIGINT,
                                 SOURCING_SUPPLIER_NICKNAME NVARCHAR(100),FISCAL_YEAR NVARCHAR(4),FISCAL_QUARTER NVARCHAR(2),
                                 SALES_AMOUNT DECIMAL, OPINCOM_AMOUNT DECIMAL, ASSET_AMOUNT DECIMAL, 
                                 CURASSET_AMOUNT DECIMAL, NCA_AMOUNT DECIMAL, LIABILITIES_AMOUNT DECIMAL,
                                 CURLIABLITIES_AMOUNT DECIMAL,NCL_AMOUNT DECIMAL,EQUITY_CAPITAL DECIMAL
                                ),
    IN I_SUPPLIER_SAL_TAB TABLE (CRUD_TYPE_CODE NVARCHAR(1), TENANT_ID NVARCHAR(5),SOURCING_SUPPLIER_ID BIGINT,
                                 SOURCING_SUPPLIER_NICKNAME NVARCHAR(100),TXN_YEAR NVARCHAR(4),
                                 CUSTOMER_ENGLISH_NAME NVARCHAR(240),CUSTOMER_LOCAL_NAME NVARCHAR(240),
                                 ANNUAL_TXN_AMOUNT DECIMAL, SALES_WEIGHT DECIMAL
                                ),
    OUT O_RETURN_TAB TABLE (RETURN_CODE NVARCHAR(1), RETURN_MSG_CODE NVARCHAR(30), RETURN_MSG NVARCHAR(1000))
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER
AS
BEGIN

    DECLARE V_DATA_EXISTS_COUNT INT := 0;
    DECLARE V_IDX INT := 0;
    DECLARE V_LOCAL_DTM SECONDDATE;
    DECLARE V_USER_ID NVARCHAR(255);

    /* Variables for SUPPLIR_GEN */
    DECLARE V_GEN_COUNT INT := 0;
    DECLARE V_TENANT_ID NVARCHAR(5);
    DECLARE V_SOURCING_SUPPLIER_ID BIGINT;
    DECLARE V_SOURCING_SUPPLIER_NICKNAME  NVARCHAR(100);

    DECLARE V_EMAIL_ADDRESS NVARCHAR(100);
    DECLARE V_DEVELOP_DATE DATE;
    DECLARE V_DEVELOPER_EMPNO NVARCHAR(30);
    DECLARE V_SOURCING_SUPPLIER_LOCAL_NAME NVARCHAR(240);
    DECLARE V_SOURCING_SUPPLIER_ENGLISH_NAME NVARCHAR(240);
    DECLARE V_LOCAL_FULL_ADDRESS NVARCHAR(1000);

    DECLARE V_ENGLISH_FULL_ADDRESS NVARCHAR(1000);
    DECLARE V_PRODUCT_DESC NVARCHAR(300);
    DECLARE V_AN_PROFILE NVARCHAR(100);
    DECLARE V_TAX_ID NVARCHAR(16);
    DECLARE V_SOURCING_CONTENTS NCLOB;
    DECLARE V_REMARK NVARCHAR(3000);
    DECLARE V_ATTCH_GROUP_NUMBER NVARCHAR(100);


    /* Variables for SUPPLIER_FIN */
    DECLARE V_FIN_COUNT INT := 0;
    DECLARE V_FISCAL_YEAR NVARCHAR(4);
    DECLARE V_FISCAL_QUARTER NVARCHAR(2);
    
    DECLARE V_SALES_AMOUNT DECIMAL;
    DECLARE V_OPINCOM_AMOUNT DECIMAL;
    DECLARE V_ASSET_AMOUNT DECIMAL;
    DECLARE V_CURASSET_AMOUNT DECIMAL;
    DECLARE V_NCA_AMOUNT DECIMAL;
    
    DECLARE V_LIABILITIES_AMOUNT DECIMAL;
    DECLARE V_CURLIABLITIES_AMOUNT DECIMAL;
    DECLARE V_NCL_AMOUNT DECIMAL;
    DECLARE V_EQUITY_CAPITAL DECIMAL;

    /* Variables for SUPPLIER_SAL */
    DECLARE V_SAL_COUNT INT := 0;
    DECLARE V_TXN_YEAR NVARCHAR(4);
    DECLARE V_CUSTOMER_ENGLISH_NAME NVARCHAR(240);
    DECLARE V_CUSTOMER_LOCAL_NAME NVARCHAR(240);
    DECLARE V_ANNUAL_TXN_AMOUNT DECIMAL;
    DECLARE V_SALES_WEIGHT DECIMAL;
    
    /* Variables for Return */
    DECLARE V_RETURN_CODE NVARCHAR(1) := 'S';
    DECLARE V_RETURN_MSG_CODE NVARCHAR(30);
    DECLARE V_RETURN_MSG NVARCHAR(100);

    /* Validation Check : I_USER_ID */
    IF (I_USER_ID IS NULL OR I_USER_ID = '') THEN
        :O_RETURN_TAB.INSERT(('E', 'EDP','This is Required(I_USER_ID)'),1);
        RETURN;
    END IF;

    /* Validation Check : SUPPLIER_GEN */
    IF (RECORD_COUNT(:I_SUPPLIER_GEN_TAB) = 1 ) THEN

        IF ((:I_SUPPLIER_GEN_TAB.CRUD_TYPE_CODE[1] IS NULL) OR (:I_SUPPLIER_GEN_TAB.CRUD_TYPE_CODE[1] = '')) THEN
            :O_RETURN_TAB.INSERT(('E', 'EDP','This is Required(SUPPLIER_GEN.CRUD_TYPE_CODE)'),1);
            RETURN;
        END IF;

        IF ((:I_SUPPLIER_GEN_TAB.TENANT_ID[1] IS NULL) OR (:I_SUPPLIER_GEN_TAB.TENANT_ID[1] = '')) THEN
            :O_RETURN_TAB.INSERT(('E', 'EDP','This is required(SUPPLIER_GEN.TENANT_ID)'),1);
            RETURN;
        END IF;

        IF ((:I_SUPPLIER_GEN_TAB.SOURCING_SUPPLIER_ID[1] IS NULL) OR (:I_SUPPLIER_GEN_TAB.SOURCING_SUPPLIER_ID[1] = '')) THEN
            :O_RETURN_TAB.INSERT(('E', 'EDP','This is required(SUPPLIER_GEN.SOURCING_SUPPLIER_ID)'),1);
            RETURN;
        END IF;

        IF ((:I_SUPPLIER_GEN_TAB.SOURCING_SUPPLIER_NICKNAME[1] IS NULL) OR (:I_SUPPLIER_GEN_TAB.SOURCING_SUPPLIER_NICKNAME[1] = '')) THEN
            :O_RETURN_TAB.INSERT(('E', 'EDP','This is required(SUPPLIER_GEN.SOURCING_SUPPLIER_NICKNAME)'),1);
            RETURN;
        END IF;

        IF ((:I_SUPPLIER_GEN_TAB.EMAIL_ADDRESS[1] IS NULL) OR (:I_SUPPLIER_GEN_TAB.EMAIL_ADDRESS[1] = '')) THEN
            :O_RETURN_TAB.INSERT(('E', 'EDP','This is required(SUPPLIER_GEN.EMAIL_ADDRESS)'),1);
            RETURN;
        END IF;

        /* Assign Variables */
        V_TENANT_ID = :I_SUPPLIER_GEN_TAB.TENANT_ID[1];
        V_SOURCING_SUPPLIER_ID = :I_SUPPLIER_GEN_TAB.SOURCING_SUPPLIER_ID[1];
        V_SOURCING_SUPPLIER_NICKNAME = :I_SUPPLIER_GEN_TAB.SOURCING_SUPPLIER_NICKNAME[1];


        /* Check TENANT_ID */
        SELECT COUNT(*)
        INTO V_DATA_EXISTS_COUNT
        FROM CM_ORG_TENANT
        WHERE TENANT_ID = V_TENANT_ID
        ;

        IF ( V_DATA_EXISTS_COUNT = 0 ) THEN 
            :O_RETURN_TAB.INSERT(('E', 'EDP','This is already exists(SUPPLIER_GEN.TENANT_ID)'),1);
            RETURN;
        END IF;

        /* Check SOURCING_SUPPLIER_ID */
        SELECT COUNT(*)
        INTO V_GEN_COUNT
        FROM DP_GS_SUPPLIER_GEN
        WHERE TENANT_ID = V_TENANT_ID
        AND SOURCING_SUPPLIER_ID = V_SOURCING_SUPPLIER_ID
        ;

        IF ( :I_SUPPLIER_GEN_TAB.CRUD_TYPE_CODE[1] = 'I' ) THEN 
            IF ( V_GEN_COUNT > 0 ) THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is already exists(SUPPLIER_GEN.SOURCING_SUPPLIER_ID)'),1);
                RETURN;
            END IF;
        ELSE 
            IF ( V_GEN_COUNT = 0 ) THEN 
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is not exists(SUPPLIER_GEN.SOURCING_SUPPLIER_ID)'),1);
                RETURN;
            END IF;
        END IF;

        /* Check SOURCING_SUPPLIER_NICKNAME */
        SELECT COUNT(*)
        INTO V_GEN_COUNT
        FROM DP_GS_SUPPLIER_GEN
        WHERE TENANT_ID = V_TENANT_ID
        AND SOURCING_SUPPLIER_NICKNAME = V_SOURCING_SUPPLIER_NICKNAME 
        ;

        IF ( :I_SUPPLIER_GEN_TAB.CRUD_TYPE_CODE[1] = 'I' ) THEN 
            IF ( V_GEN_COUNT > 0 ) THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is already exists(SUPPLIER_GEN.SOURCING_SUPPLIER_NICKNAME)'),1);
                RETURN;
            END IF;
        ELSE 
            IF ( V_GEN_COUNT = 0 ) THEN 
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is not exists(SUPPLIER_GEN.SOURCING_SUPPLIER_NICKNAME)'),1);
                RETURN;
            END IF;
        END IF;
    END IF;


    /* Validation Check SUPPLIER_FIN */
    FOR V_IDX IN 1 .. RECORD_COUNT(:I_SUPPLIER_FIN_TAB)
    DO
            /* TENANT_ID Check */
            IF ( :I_SUPPLIER_FIN_TAB.TENANT_ID[V_IDX] IS NULL OR :I_SUPPLIER_FIN_TAB.TENANT_ID[V_IDX] = '') THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is required(SUPPLIER_FIN.TENANT_ID)'),1);
                RETURN;
            END IF;

            IF ( :I_SUPPLIER_FIN_TAB.TENANT_ID[V_IDX] != :I_SUPPLIER_GEN_TAB.TENANT_ID[1] ) THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is not same(SUPPLIER_FIN.TENANT_ID)'),1);
                RETURN;
            END IF;

            /* SOURCING_SUPPLIER_ID Check */
            IF ( :I_SUPPLIER_FIN_TAB.SOURCING_SUPPLIER_ID[V_IDX] IS NULL OR :I_SUPPLIER_FIN_TAB.SOURCING_SUPPLIER_ID[V_IDX] = '') THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is required(SUPPLIER_FIN.SOURCING_SUPPLIER_ID)'),1);
                RETURN;
            END IF;

            IF ( :I_SUPPLIER_FIN_TAB.SOURCING_SUPPLIER_ID[V_IDX] != :I_SUPPLIER_GEN_TAB.SOURCING_SUPPLIER_ID[1] ) THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is not same(SUPPLIER_FIN.SOURCING_SUPPLIER_ID)'),1);
                RETURN;
            END IF;

            /* SOURCING_SUPPLIER_NICKNAME */
            IF ( :I_SUPPLIER_FIN_TAB.SOURCING_SUPPLIER_NICKNAME[V_IDX] IS NULL OR :I_SUPPLIER_FIN_TAB.SOURCING_SUPPLIER_NICKNAME[V_IDX] = '') THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is required(SUPPLIER_FIN.SOURCING_SUPPLIER_ID)'),1);
                RETURN;
            END IF;

            IF ( :I_SUPPLIER_FIN_TAB.SOURCING_SUPPLIER_NICKNAME[V_IDX] != :I_SUPPLIER_GEN_TAB.SOURCING_SUPPLIER_NICKNAME[1] ) THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is not same(SUPPLIER_FIN.SOURCING_SUPPLIER_NICKNAME)'),1);
                RETURN;
            END IF;

            /* CHECK FISCAL_YEAR */
            IF ( :I_SUPPLIER_FIN_TAB.FISCAL_YEAR[V_IDX] IS NULL OR :I_SUPPLIER_FIN_TAB.FISCAL_YEAR[V_IDX] = '') THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is required(SUPPLIER_FIN.FISCAL_YEAR)'),1);
                RETURN;
            END IF;


            /* CHECK FISCAL_QUARTER */
            IF ( :I_SUPPLIER_FIN_TAB.FISCAL_QUARTER[V_IDX] IS NULL OR :I_SUPPLIER_FIN_TAB.FISCAL_QUARTER[V_IDX] = '') THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is required(SUPPLIER_FIN.FISCAL_QUARTER)'),1);
                RETURN;
            END IF;

            V_TENANT_ID = :I_SUPPLIER_FIN_TAB.TENANT_ID[V_IDX];
            V_FISCAL_QUARTER =  :I_SUPPLIER_FIN_TAB.FISCAL_QUARTER[V_IDX];

            SELECT COUNT(*)
            INTO V_DATA_EXISTS_COUNT
            FROM CM_CODE_DTL
            WHERE TENANT_ID = V_TENANT_ID
            AND GROUP_CODE = 'DP_GS_DATE_QUARTER'
            AND CODE = V_FISCAL_QUARTER
            ;

            IF (V_DATA_EXISTS_COUNT = 0) THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is required(SUPPLIER_FIN.FISCAL_QUARTER)'),1);
                RETURN;
            END IF;

    END FOR;

    /* Validation Check SUPPLIER_SAL */
    FOR V_IDX IN 1 .. RECORD_COUNT(:I_SUPPLIER_SAL_TAB)
    DO
            /* TENANT_ID Check */
            IF ( :I_SUPPLIER_SAL_TAB.TENANT_ID[V_IDX] IS NULL OR :I_SUPPLIER_SAL_TAB.TENANT_ID[V_IDX] = '') THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is required(SUPPLIER_SAL.TENANT_ID)'),1);
                RETURN;
            END IF;

            IF ( :I_SUPPLIER_SAL_TAB.TENANT_ID[V_IDX] != :I_SUPPLIER_GEN_TAB.TENANT_ID[1] ) THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is not same(SUPPLIER_SAL.TENANT_ID)'),1);
                RETURN;
            END IF;

            /* SOURCING_SUPPLIER_ID Check */
            IF ( :I_SUPPLIER_SAL_TAB.SOURCING_SUPPLIER_ID[V_IDX] IS NULL OR :I_SUPPLIER_SAL_TAB.SOURCING_SUPPLIER_ID[V_IDX] = '') THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is required(SUPPLIER_SAL.SOURCING_SUPPLIER_ID)'),1);
                RETURN;
            END IF;

            IF ( :I_SUPPLIER_SAL_TAB.SOURCING_SUPPLIER_ID[V_IDX] != :I_SUPPLIER_GEN_TAB.SOURCING_SUPPLIER_ID[1] ) THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is not same(SUPPLIER_SAL.SOURCING_SUPPLIER_ID)'),1);
                RETURN;
            END IF;

            /* SOURCING_SUPPLIER_NICKNAME */
            IF ( :I_SUPPLIER_SAL_TAB.SOURCING_SUPPLIER_NICKNAME[V_IDX] IS NULL OR :I_SUPPLIER_SAL_TAB.SOURCING_SUPPLIER_NICKNAME[V_IDX] = '') THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is required(SUPPLIER_SAL.SOURCING_SUPPLIER_ID)'),1);
                RETURN;
            END IF;

            IF ( :I_SUPPLIER_SAL_TAB.SOURCING_SUPPLIER_NICKNAME[V_IDX] != :I_SUPPLIER_GEN_TAB.SOURCING_SUPPLIER_NICKNAME[1] ) THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is not same(SUPPLIER_SAL.SOURCING_SUPPLIER_NICKNAME)'),1);
                RETURN;
            END IF;

            /* TXN_YEAR */
            IF ( :I_SUPPLIER_SAL_TAB.TXN_YEAR[V_IDX] IS NULL OR :I_SUPPLIER_SAL_TAB.TXN_YEAR[V_IDX] = '') THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is required(SUPPLIER_SAL.TXN_YEAR)'),1);
                RETURN;
            END IF;

            /* CUSTOMER_ENGLISH_NAME */
            IF ( :I_SUPPLIER_SAL_TAB.CUSTOMER_ENGLISH_NAME[V_IDX] IS NULL OR :I_SUPPLIER_SAL_TAB.CUSTOMER_ENGLISH_NAME[V_IDX] = '') THEN
                :O_RETURN_TAB.INSERT(('E', 'EDP','This is required(SUPPLIER_SAL.CUSTOMER_ENGLISH_NAME)'),1);
                RETURN;
            END IF;


    END FOR;
/*
        SELECT CM_DB_SYSDATE_MTZ_FUNC(V_TENANT_ID, P_SYSDATE DATE, P_FROM_TIME_ZONE NVARCHAR(5), P_TO_TIME_ZONE NVARCHAR(5))
        INTO V_LOCAL_DTM
        FROM DUMMY;
*/

    /* TABLE DML : DP_GS_SUPPLIER_GEN  */
    IF (:I_SUPPLIER_GEN_TAB.CRUD_TYPE_CODE[1] = 'I') THEN
            INSERT INTO DP_GS_SUPPLIER_GEN (
                TENANT_ID,
                SOURCING_SUPPLIER_ID,
                SOURCING_SUPPLIER_NICKNAME,
                EMAIL_ADDRESS,
                DEVELOP_DATE,
                DEVELOPER_EMPNO,
                SOURCING_SUPPLIER_LOCAL_NAME,
                SOURCING_SUPPLIER_ENGLISH_NAME,
                LOCAL_FULL_ADDRESS,
                ENGLISH_FULL_ADDRESS,
                PRODUCT_DESC,
                AN_PROFILE,
                TAX_ID,
                SOURCING_CONTENTS, 
                REMARK,
                ATTCH_GROUP_NUMBER,
                LOCAL_CREATE_DTM,
                LOCAL_UPDATE_DTM,
                CREATE_USER_ID,
                UPDATE_USER_ID,
                SYSTEM_CREATE_DTM,
                SYSTEM_UPDATE_DTM
            )
            VALUES (
                V_TENANT_ID,
                V_SOURCING_SUPPLIER_ID,
                V_SOURCING_SUPPLIER_NICKNAME,
                V_EMAIL_ADDRESS,
                V_DEVELOP_DATE,
                V_DEVELOPER_EMPNO,
                V_SOURCING_SUPPLIER_LOCAL_NAME,
                V_SOURCING_SUPPLIER_ENGLISH_NAME,
                V_LOCAL_FULL_ADDRESS,
                V_ENGLISH_FULL_ADDRESS,
                V_PRODUCT_DESC,
                V_AN_PROFILE,
                V_TAX_ID,
                V_SOURCING_CONTENTS, 
                V_REMARK,
                V_ATTCH_GROUP_NUMBER,
                NOW(),
                NOW(),
                V_USER_ID,
                V_USER_ID,
                NOW(),
                NOW()
            );
    ELSEIF (:I_SUPPLIER_GEN_TAB.CRUD_TYPE_CODE[1] = 'U') THEN
            UPDATE DP_GS_SUPPLIER_GEN 
            SET EMAIL_ADDRESS = V_EMAIL_ADDRESS,
                SOURCING_SUPPLIER_LOCAL_NAME = V_SOURCING_SUPPLIER_LOCAL_NAME,
                SOURCING_SUPPLIER_ENGLISH_NAME = V_SOURCING_SUPPLIER_ENGLISH_NAME,
                LOCAL_FULL_ADDRESS = V_LOCAL_FULL_ADDRESS,
                ENGLISH_FULL_ADDRESS = V_ENGLISH_FULL_ADDRESS,
                PRODUCT_DESC = V_PRODUCT_DESC,
                AN_PROFILE = V_AN_PROFILE,
                TAX_ID = V_TAX_ID,
                SOURCING_CONTENTS = V_SOURCING_CONTENTS, 
                REMARK = V_REMARK,
                ATTCH_GROUP_NUMBER = V_ATTCH_GROUP_NUMBER,
                LOCAL_UPDATE_DTM = NOW(),
                UPDATE_USER_ID = I_USER_ID,
                SYSTEM_UPDATE_DTM = NOW()
            WHERE TENANT_ID = V_TENANT_ID
            AND SOURCING_SUPPLIER_ID = V_SOURCING_SUPPLIER_ID
            AND SOURCING_SUPPLIER_NICKNAME = V_SOURCING_SUPPLIER_NICKNAME
            ;

  
    END IF;

    /* DML FOR DP_GS_SUPPLIER_FIN */
    FOR V_IDX IN 1 .. RECORD_COUNT(:I_SUPPLIER_FIN_TAB)
    DO
        V_TENANT_ID = :I_SUPPLIER_FIN_TAB.TENANT_ID[V_IDX];
        V_SOURCING_SUPPLIER_ID = :I_SUPPLIER_FIN_TAB.SOURCING_SUPPLIER_ID[V_IDX];
        V_SOURCING_SUPPLIER_NICKNAME = :I_SUPPLIER_FIN_TAB.SOURCING_SUPPLIER_NICKNAME[V_IDX];
        V_FISCAL_YEAR = :I_SUPPLIER_FIN_TAB.FISCAL_YEAR[V_IDX];
        V_FISCAL_QUARTER = :I_SUPPLIER_FIN_TAB.FISCAL_QUARTER[V_IDX];
    
        V_SALES_AMOUNT = :I_SUPPLIER_FIN_TAB.SALES_AMOUNT[V_IDX];
        V_OPINCOM_AMOUNT = :I_SUPPLIER_FIN_TAB.OPINCOM_AMOUNT[V_IDX];
        V_ASSET_AMOUNT = :I_SUPPLIER_FIN_TAB.ASSET_AMOUNT[V_IDX];
        V_CURASSET_AMOUNT = :I_SUPPLIER_FIN_TAB.CURASSET_AMOUNT[V_IDX];
        V_NCA_AMOUNT = :I_SUPPLIER_FIN_TAB.NCA_AMOUNT[V_IDX];
    
        V_LIABILITIES_AMOUNT  = :I_SUPPLIER_FIN_TAB.LIABILITIES_AMOUNT[V_IDX];
        V_CURLIABLITIES_AMOUNT  = :I_SUPPLIER_FIN_TAB.CURLIABLITIES_AMOUNT[V_IDX];
        V_NCL_AMOUNT  = :I_SUPPLIER_FIN_TAB.NCL_AMOUNT[V_IDX];
        V_EQUITY_CAPITAL  = :I_SUPPLIER_FIN_TAB.EQUITY_CAPITAL[V_IDX];

        IF ( :I_SUPPLIER_FIN_TAB.CRUD_TYPE_CODE[V_IDX] = 'I') THEN
            INSERT INTO DP_GS_SUPPLIER_FIN (
                TENANT_ID,
                SOURCING_SUPPLIER_ID,
                SOURCING_SUPPLIER_NICKNAME,
                FISCAL_YEAR,
                FISCAL_QUARTER,
                SALES_AMOUNT,
                OPINCOM_AMOUNT,
                ASSET_AMOUNT,
                CURASSET_AMOUNT,
                NCA_AMOUNT,
                LIABILITIES_AMOUNT,
                CURLIABLITIES_AMOUNT,
                NCL_AMOUNT,
                EQUITY_CAPITAL,
                LOCAL_CREATE_DTM,
                LOCAL_UPDATE_DTM,
                CREATE_USER_ID,
                UPDATE_USER_ID,
                SYSTEM_CREATE_DTM,
                SYSTEM_UPDATE_DTM
            )
            VALUES (
                V_TENANT_ID,
                V_SOURCING_SUPPLIER_ID,
                V_SOURCING_SUPPLIER_NICKNAME,
                V_FISCAL_YEAR,
                V_FISCAL_QUARTER,
                V_SALES_AMOUNT,
                V_OPINCOM_AMOUNT,
                V_ASSET_AMOUNT,
                V_CURASSET_AMOUNT,
                V_NCA_AMOUNT,
                V_LIABILITIES_AMOUNT,
                V_CURLIABLITIES_AMOUNT,
                V_NCL_AMOUNT,
                V_EQUITY_CAPITAL,
                NOW(),
                NOW(),
                I_USER_ID,
                I_USER_ID,
                NOW(),
                NOW()
            );
        
        ELSEIF (:I_SUPPLIER_FIN_TAB.CRUD_TYPE_CODE[V_IDX] = 'U') THEN
            UPDATE DP_GS_SUPPLIER_FIN 
            SET SALES_AMOUNT = V_SALES_AMOUNT,
                OPINCOM_AMOUNT = V_OPINCOM_AMOUNT,
                ASSET_AMOUNT = V_ASSET_AMOUNT,
                CURASSET_AMOUNT = V_CURASSET_AMOUNT,
                NCA_AMOUNT = V_NCA_AMOUNT,
                LIABILITIES_AMOUNT = V_LIABILITIES_AMOUNT,
                CURLIABLITIES_AMOUNT = V_CURLIABLITIES_AMOUNT,
                NCL_AMOUNT = V_NCL_AMOUNT,
                EQUITY_CAPITAL = V_EQUITY_CAPITAL,
                LOCAL_UPDATE_DTM = NOW(),
                UPDATE_USER_ID = I_USER_ID,
                SYSTEM_UPDATE_DTM = NOW()
            WHERE TENANT_ID = V_TENANT_ID
            AND SOURCING_SUPPLIER_ID = V_SOURCING_SUPPLIER_ID
            AND SOURCING_SUPPLIER_NICKNAME = V_SOURCING_SUPPLIER_NICKNAME
            AND FISCAL_YEAR = V_FISCAL_YEAR
            AND FISCAL_QUARTER = V_FISCAL_QUARTER
            ;
        
        ELSEIF (:I_SUPPLIER_FIN_TAB.CRUD_TYPE_CODE[V_IDX] = 'D') THEN
            DELETE FROM DP_GS_SUPPLIER_FIN
            WHERE TENANT_ID = V_TENANT_ID
            AND SOURCING_SUPPLIER_ID = V_SOURCING_SUPPLIER_ID
            AND SOURCING_SUPPLIER_NICKNAME = V_SOURCING_SUPPLIER_NICKNAME
            AND FISCAL_YEAR = V_FISCAL_YEAR
            AND FISCAL_QUARTER = V_FISCAL_QUARTER
            ;
        END IF;


    END FOR;

    /* DML FOR DP_GS_SUPPLIER_SAL */
    FOR V_IDX IN 1 .. RECORD_COUNT(:I_SUPPLIER_SAL_TAB)
    DO
        V_TENANT_ID = :I_SUPPLIER_SAL_TAB.TENANT_ID[V_IDX];
        V_SOURCING_SUPPLIER_ID = :I_SUPPLIER_SAL_TAB.SOURCING_SUPPLIER_ID[V_IDX];
        V_SOURCING_SUPPLIER_NICKNAME = :I_SUPPLIER_SAL_TAB.SOURCING_SUPPLIER_NICKNAME[V_IDX];

        V_TXN_YEAR = :I_SUPPLIER_SAL_TAB.TXN_YEAR[V_IDX];
        V_CUSTOMER_ENGLISH_NAME = :I_SUPPLIER_SAL_TAB.CUSTOMER_ENGLISH_NAME[V_IDX];
        V_CUSTOMER_LOCAL_NAME  = :I_SUPPLIER_SAL_TAB.CUSTOMER_LOCAL_NAME[V_IDX];
        V_ANNUAL_TXN_AMOUNT  = :I_SUPPLIER_SAL_TAB.ANNUAL_TXN_AMOUNT[V_IDX];
        V_SALES_WEIGHT = :I_SUPPLIER_SAL_TAB.SALES_WEIGHT[V_IDX];
        

        IF ( :I_SUPPLIER_SAL_TAB.CRUD_TYPE_CODE[V_IDX] = 'I') THEN
            INSERT INTO DP_GS_SUPPLIER_SAL (
                TENANT_ID,
                SOURCING_SUPPLIER_ID,
                SOURCING_SUPPLIER_NICKNAME,
                TXN_YEAR,
                CUSTOMER_ENGLISH_NAME,
                CUSTOMER_LOCAL_NAME,
                ANNUAL_TXN_AMOUNT,
                SALES_WEIGHT,
                LOCAL_CREATE_DTM,
                LOCAL_UPDATE_DTM,
                CREATE_USER_ID,
                UPDATE_USER_ID,
                SYSTEM_CREATE_DTM,
                SYSTEM_UPDATE_DTM
            )
            VALUES (
                V_TENANT_ID,
                V_SOURCING_SUPPLIER_ID,
                V_SOURCING_SUPPLIER_NICKNAME,
                V_TXN_YEAR,
                V_CUSTOMER_ENGLISH_NAME,
                V_CUSTOMER_LOCAL_NAME,
                V_ANNUAL_TXN_AMOUNT,
                V_SALES_WEIGHT,
                NOW(),
                NOW(),
                I_USER_ID,
                I_USER_ID,
                NOW(),
                NOW()
            );
        
        ELSEIF (:I_SUPPLIER_SAL_TAB.CRUD_TYPE_CODE[V_IDX] = 'U') THEN
            UPDATE DP_GS_SUPPLIER_SAL
            SET CUSTOMER_LOCAL_NAME = V_CUSTOMER_LOCAL_NAME,
                ANNUAL_TXN_AMOUNT = V_ANNUAL_TXN_AMOUNT,
                SALES_WEIGHT = V_SALES_WEIGHT,
                LOCAL_UPDATE_DTM = NOW(),
                UPDATE_USER_ID = I_USER_ID,
                SYSTEM_UPDATE_DTM = NOW()
            WHERE TENANT_ID = V_TENANT_ID
            AND SOURCING_SUPPLIER_ID = V_SOURCING_SUPPLIER_ID
            AND SOURCING_SUPPLIER_NICKNAME = V_SOURCING_SUPPLIER_NICKNAME
            AND TXN_YEAR = V_TXN_YEAR
            AND CUSTOMER_ENGLISH_NAME = V_CUSTOMER_ENGLISH_NAME
            ;
        
        ELSEIF (:I_SUPPLIER_SAL_TAB.CRUD_TYPE_CODE[V_IDX] = 'D') THEN
            DELETE FROM DP_GS_SUPPLIER_SAL
            WHERE TENANT_ID = V_TENANT_ID
            AND SOURCING_SUPPLIER_ID = V_SOURCING_SUPPLIER_ID
            AND SOURCING_SUPPLIER_NICKNAME = V_SOURCING_SUPPLIER_NICKNAME
            AND TXN_YEAR = V_TXN_YEAR
            AND CUSTOMER_ENGLISH_NAME = V_CUSTOMER_ENGLISH_NAME
            ;
        END IF;


    END FOR;

END;