/************************************************
  1. namespace
  - 모듈코드 소문자로 작성
  - 소모듈 존재시 대모듈.소모듈 로 작성
  2. entity
  - 대문자로 작성
  - 테이블명 생성을 고려하여 '_' 추가
  3. 컬럼(속성)
  - 소문자로 작성
  4. .hdbview, .hdbfunction 등으로 이미 생성된 DB Object 사용시
  entity 위에 @cds.persistence.exists 명시  
  
  5. namespace : dp
  6. Procedure  : DP_IM_CREATE_IDEA_STATUS_PROC
  7. Procedure description : Idea 상태 변경 정보를 생성

  8. history
  -. 2021.01.09 : 최미희 최초작성
  -.  
*************************************************/
PROCEDURE DP_IM_CREATE_IDEA_STATUS_PROC (
    IN I_STATUS_TAB TABLE (TENANT_ID NVARCHAR(5), 
                           COMPANY_CODE NVARCHAR(10),
                           IDEA_NUMBER NVARCHAR(10),
                           IDEA_PROGRESS_STATUS_CODE NVARCHAR(30),
                           STATUS_CHANGE_COMMENT NVARCHAR(100),
                           USER_ID NVARCHAR(255)
                           ),
    OUT O_RETURN_TAB TABLE (RETURN_CODE NVARCHAR(1), RETURN_MSG_CODE NVARCHAR(30), RETURN_MSG NVARCHAR(1000))
)
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER
AS
BEGIN
    /* Declare Variables */

    DECLARE V_IDX INTEGER;

    DECLARE V_TENANT_ID NVARCHAR(5);
    DECLARE V_COMPANY_CODE NVARCHAR(10);
    DECLARE V_IDEA_NUMBER NVARCHAR(10);
    DECLARE V_IDEA_PROGRESS_STATUS_CODE NVARCHAR(30);
    DECLARE V_STATUS_CHANGE_COMMENT NVARCHAR(100);
    DECLARE V_USER_ID NVARCHAR(255);
    DECLARE V_IDEA_SEQUENCE DECIMAL(5,2);

    /* Check Input Value */
    IF (IS_EMPTY(:I_STATUS_TAB)) THEN
       :O_RETURN_TAB.INSERT(('E', 'EDP','Input Parameter is not exists'),1);
       RETURN;
    END IF;

    FOR V_IDX IN 1 .. RECORD_COUNT(:I_STATUS_TAB)
    DO 

        IF (:I_STATUS_TAB.TENANT_ID[V_IDX] IS NULL ) THEN
           :O_RETURN_TAB.INSERT(('E', 'EDP','This is no value(TENANT_ID)'),1);
           RETURN;      
        END IF;

        IF (:I_STATUS_TAB.COMPANY_CODE[V_IDX] IS NULL ) THEN
           :O_RETURN_TAB.INSERT(('E', 'EDP','This is no value(COMPANY_CODE)'),1);
           RETURN;      
        END IF;

        IF (:I_STATUS_TAB.IDEA_NUMBER[V_IDX] IS NULL ) THEN
            :O_RETURN_TAB.INSERT(('E', 'EDP','This is no value(IDEA_NUMBER)'),1);
            RETURN;      
        END IF;

        IF (:I_STATUS_TAB.IDEA_PROGRESS_STATUS_CODE[V_IDX] IS NULL ) THEN
           :O_RETURN_TAB.INSERT(('E', 'EDP','This is no value(IDEA_PROGRESS_STATUS_CODE)'),1);
           RETURN;      
        END IF;

        IF (:I_STATUS_TAB.USER_ID[V_IDX] IS NULL ) THEN
           :O_RETURN_TAB.INSERT(('E', 'EDP','This is no value(USER_ID)'),1);
           RETURN;      
        END IF;

        /* Assing Variables */
        V_TENANT_ID = :I_STATUS_TAB.TENANT_ID[V_IDX];
        V_COMPANY_CODE = :I_STATUS_TAB.COMPANY_CODE[V_IDX];
        V_IDEA_NUMBER = :I_STATUS_TAB.IDEA_NUMBER[V_IDX];
        V_IDEA_PROGRESS_STATUS_CODE = :I_STATUS_TAB.IDEA_PROGRESS_STATUS_CODE[V_IDX];
        V_STATUS_CHANGE_COMMENT = :I_STATUS_TAB.STATUS_CHANGE_COMMENT[V_IDX];
        V_USER_ID = :I_STATUS_TAB.USER_ID[V_IDX];
    
        /* Get STATUS_CHANGE_SEQUENCE */
        SELECT IFNULL(MAX(X.STATUS_CHANGE_SEQUENCE),0) + 1
        INTO V_IDEA_SEQUENCE
        FROM DP_IM_SUPPLIER_IDEA_STATUS X
        WHERE X.TENANT_ID = V_TENANT_ID
        AND X.COMPANY_CODE = V_COMPANY_CODE
        AND X.IDEA_NUMBER = V_IDEA_NUMBER
        ;

        /* Insert DP_IM_INSERT_IDEA_STATUS */
        INSERT INTO DP_IM_SUPPLIER_IDEA_STATUS
        (TENANT_ID,
         COMPANY_CODE,
         IDEA_NUMBER,
         STATUS_CHANGE_SEQUENCE,
         IDEA_PROGRESS_STATUS_CODE,
         STATUS_CHANGE_USER_ID,
         STATUS_CHANGE_DATE_TIME,
         STATUS_CHANGE_COMMENT,
         LOCAL_CREATE_DTM,
         LOCAL_UPDATE_DTM,
         CREATE_USER_ID,
         UPDATE_USER_ID,
         SYSTEM_CREATE_DTM,
         SYSTEM_UPDATE_DTM
        )
        VALUES 
        (V_TENANT_ID, -- TENANT_ID
         V_COMPANY_CODE, -- COMPANY_CODE
         V_IDEA_NUMBER,  -- IDEA_NUMBER
         V_IDEA_SEQUENCE,                 -- STATUS_CHANGE_SEQUENCE
         V_IDEA_PROGRESS_STATUS_CODE, -- IDEA_PROGRESS_STATUS_CODE
         V_USER_ID,                   -- STATUS_CHANGE_USER_ID
         NOW(),                       -- STATUS_CHANGE_DATE_TIME
         V_STATUS_CHANGE_COMMENT,     -- STATUS_CHANGE_COMMENT
         NOW(),                       -- LOCAL_CREATE_DTM
         NOW(),                       -- LOCAL_UPDATE_DTM
         V_USER_ID,                   -- CREATE_USER_ID
         V_USER_ID,                   -- UPDATE_USER_ID
         NOW(),                       -- SYSTEM_CREATE_DTM
         NOW()                        -- SYSTEM_UPDATE_DTM
        );

/*        SELECT :I_STATUS_TAB.TENANT_ID, -- TENANT_ID
               :I_STATUS_TAB.COMPANY_CODE, -- COMPANY_CODE
               :I_STATUS_TAB.IDEA_NUMBER,  -- IDEA_NUMBER
               V_IDEA_SEQUENCE,                 -- STATUS_CHANGE_SEQUENCE
               :I_STATUS_TAB.IDEA_PROGRESS_STATUS_CODE, -- IDEA_PROGRESS_STATUS_CODE
               :I_STATUS_TAB.USER_ID,                -- STATUS_CHANGE_USER_ID
               NOW(),                                     -- STATUS_CHANGE_DATE_TIME
               :I_STATUS_TAB.STATUS_CHANGE_COMMENT,  -- STATUS_CHANGE_COMMENT
               NOW(),                                     -- LOCAL_CREATE_DTM
               NOW(),                                     -- LOCAL_UPDATE_DTM
               :I_STATUS_TAB.USER_ID,                -- CREATE_USER_ID
               :I_STATUS_TAB.USER_ID,                -- UPDATE_USER_ID
               NOW(),                                     -- SYSTEM_CREATE_DTM
               NOW()                                       -- SYSTEM_UPDATE_DTM
        FROM :I_STATUS_TAB
        ;
*/
    END FOR;


END