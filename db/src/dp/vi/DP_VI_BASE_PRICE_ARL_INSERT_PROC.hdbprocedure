PROCEDURE DP_VI_BASE_PRICE_ARL_INSERT_PROC (IN I_MASTER DP_VI_BASE_PRICE_ARL_MST_TYPE
                                    ,IN I_APPROVER DP_VI_BASE_PRICE_ARL_APPROVER_TYPE
                                    ,IN I_REFERER DP_VI_BASE_PRICE_ARL_REFERER_TYPE
                                    ,IN I_DETAIL DP_VI_BASE_PRICE_ARL_DTL_TYPE
                                    ,IN I_PRICE DP_VI_BASE_PRICE_ARL_PRICE_TYPE
                                    ,OUT O_MSG DP_VI_BASE_PRICE_ARL_OUT_TYPE)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
/**************************************************************************
Scrum          : DP/VI/품의서 등록
Procedure Name : DP_VI_BASE_PRICE_ARL_INSERT_PROC
Creator        : Han Ki Ho
Description    : 신규/변경 개발VI 품의서 등록
History        : 2021-01-22 initial creation
***************************************************************************/
AS
BEGIN
    DECLARE v_Record_Cnt INT := 0;

    -- 10. 품의서 마스터(공통) 저장
    INSERT INTO CM_APPROVAL_MST (
           TENANT_ID, APPROVAL_NUMBER, CHAIN_CODE, APPROVAL_TYPE_CODE,
           APPROVAL_TITLE, APPROVAL_CONTENTS, APPROVE_STATUS_CODE, REQUESTOR_EMPNO, REQUEST_DATE, ATTCH_GROUP_NUMBER,
           LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
    )
    SELECT TENANT_ID, APPROVAL_NUMBER, CHAIN_CODE, APPROVAL_TYPE_CODE,
           APPROVAL_TITLE, APPROVAL_CONTENTS, APPROVE_STATUS_CODE, REQUESTOR_EMPNO, REQUEST_DATE, ATTCH_GROUP_NUMBER,
           LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, NOW(), NOW() 
    FROM :I_MASTER;

    -- 20. 품의서 마스터 저장
    INSERT INTO DP_VI_BASE_PRICE_ARL_MST (
           TENANT_ID, APPROVAL_NUMBER, 
           LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
    )
    SELECT TENANT_ID, APPROVAL_NUMBER, 
           LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, NOW(), NOW() 
    FROM :I_MASTER;

    -- 30. 품의서 승인자 저장
    INSERT INTO CM_APPROVER (
           TENANT_ID, APPROVAL_NUMBER, APPROVE_SEQUENCE, APPROVER_EMPNO, APPROVER_TYPE_CODE, APPROVE_STATUS_CODE,
           LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
    )
    SELECT TENANT_ID, APPROVAL_NUMBER, APPROVE_SEQUENCE, APPROVER_EMPNO, APPROVER_TYPE_CODE, APPROVE_STATUS_CODE,
           LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, NOW(), NOW() 
    FROM :I_APPROVER;

    -- 40. 품의서 참조자 저장 : 빈 테이블(옵션 정보)일 수 있으므로 데이터가 있는지 체크
    SELECT COUNT(*) INTO v_Record_Cnt FROM :I_REFERER;

    IF v_Record_Cnt > 0 THEN
        INSERT INTO CM_REFERER (
               TENANT_ID, APPROVAL_NUMBER, REFERER_EMPNO,
               LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
        )
        SELECT TENANT_ID, APPROVAL_NUMBER, REFERER_EMPNO,
               LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, NOW(), NOW() 
        FROM :I_REFERER;
    END IF;

    -- 50. 자재코드 저장
    INSERT INTO DP_VI_BASE_PRICE_ARL_DTL (
           TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE, COMPANY_CODE, ORG_TYPE_CODE, ORG_CODE, MATERIAL_CODE, BASE_UOM_CODE, SUPPLIER_CODE, BASE_DATE, BASE_PRICE_GROUND_CODE,
           LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
    )
    SELECT TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE, COMPANY_CODE, ORG_TYPE_CODE, ORG_CODE, MATERIAL_CODE, BASE_UOM_CODE, SUPPLIER_CODE, BASE_DATE, BASE_PRICE_GROUND_CODE,
           LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, NOW(), NOW() 
    FROM :I_DETAIL;

    -- 60. 금액정보 저장 : 빈 테이블(옵션 정보)일 수 있으므로 데이터가 있는지 체크
    SELECT COUNT(*) INTO v_Record_Cnt FROM :I_PRICE;

    IF v_Record_Cnt > 0 THEN
        INSERT INTO DP_VI_BASE_PRICE_ARL_PRICE (
               TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE, MARKET_CODE, NEW_BASE_PRICE, NEW_BASE_PRICE_CURRENCY_CODE,
               CURRENT_BASE_PRICE, CURRENT_BASE_PRICE_CURRENCY_CODE, FIRST_PURCHASING_NET_PRICE, FIRST_PUR_NETPRICE_CURR_CD, FIRST_PUR_NETPRICE_STR_DT, CHANGE_REASON_CODE,
               LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
        )
        SELECT TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE, MARKET_CODE, NEW_BASE_PRICE, NEW_BASE_PRICE_CURRENCY_CODE,
               CURRENT_BASE_PRICE, CURRENT_BASE_PRICE_CURRENCY_CODE, FIRST_PURCHASING_NET_PRICE, FIRST_PUR_NETPRICE_CURR_CD, FIRST_PUR_NETPRICE_STR_DT, CHANGE_REASON_CODE,
               LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, NOW(), NOW() 
        FROM :I_PRICE;
    END IF;

    -- DECLARE v_project_cnt INT := 0;
    -- DECLARE v_sql_rowcnt INT := 0;
    
    -- --Project General Info
    -- DECLARE CURSOR project_cursor FOR
    --     SELECT *
    --       FROM :I_PROJECT;
          
    -- --유사 모델
    -- DECLARE CURSOR similar_model_cursor FOR
    --     SELECT *
    --       FROM :I_SIMILAR_MODEL;
          
    -- --물동(MTLMOB)/판가(SALE_PRICE)/가공비(PROCESSING_COST)/판관비(SGNA)    
    -- DECLARE CURSOR add_info_cursor FOR
    --     SELECT *
    --       FROM :I_ADD_INFO
    --   ORDER BY ADDITION_TYPE_CODE, PERIOD_CODE;
    
    -- DECLARE CURSOR base_exrate_cursor FOR
    --     SELECT *
    --       FROM :I_BASE_EXRATE
    --   ORDER BY CURRENCY_CODE, PERIOD_CODE;
    
    -- DECLARE param_error CONDITION FOR SQL_ERROR_CODE 10000;
    -- DECLARE txn_error CONDITION FOR SQL_ERROR_CODE 10001;
    -- DECLARE var_rollback NVARCHAR(100) := 'ROLLBACK';
    -- DECLARE EXIT HANDLER FOR SQLEXCEPTION
    --     BEGIN
    --         --EXEC (:var_rollback);
    --         O_MSG = SELECT 'NG' RETURN_CODE, ::SQL_ERROR_CODE || '-' || ::SQL_ERROR_MESSAGE RETURN_MSG FROM DUMMY;
    --     END;
        
    -- SELECT COUNT(*)
    --   INTO v_project_cnt
    --   FROM :I_PROJECT;
  
    -- IF v_project_cnt != 1 THEN
    --     SIGNAL param_error SET MESSAGE_TEXT = 'Param Error.(Please Check Project Data Count)';
    -- END IF;
  
    -- IF IFNULL(:I_USER_ID, '-1') = '-1' OR TRIM(:I_USER_ID ) = '' THEN
    --     SIGNAL param_error SET MESSAGE_TEXT = 'Param Error.(Please Check User Info)';
    -- END IF;
    
    -- FOR loop_project AS project_cursor DO
      
    --     IF IFNULL(loop_project.TENANT_ID, '-1') = '-1' OR TRIM(loop_project.TENANT_ID) = '' THEN
    --         SIGNAL param_error SET MESSAGE_TEXT = 'Param Error.(Tenant ID Error.';
    --     END IF;
        
    --     IF IFNULL(loop_project.PROJECT_CODE, '-1') = '-1' OR TRIM(loop_project.PROJECT_CODE) = '' THEN
    --         SIGNAL param_error SET MESSAGE_TEXT = 'Param Error.(Project Code Error.';
    --     END IF;
        
    --     IF IFNULL(loop_project.MODEL_CODE, '-1') = '-1' OR TRIM(loop_project.MODEL_CODE) = '' THEN
    --         SIGNAL param_error SET MESSAGE_TEXT = 'Param Error.(Model Code Error.';
    --     END IF;
        
    --     /*Update Project*/
    --     BEGIN
	-- 	    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	--         BEGIN
	--         	SIGNAL txn_error SET MESSAGE_TEXT = 'Update Project Error.';
	--         END;        
            
    --         UPDATE DP_TC_PROJECT
    --            SET PRODUCT_GROUP_CODE = loop_project.PRODUCT_GROUP_CODE
    --              , DEVELOPE_EVENT_CODE = loop_project.DEVELOPE_EVENT_CODE
    --              , PRODUCTION_COMPANY_CODE = loop_project.PRODUCTION_COMPANY_CODE
    --              , QUOTATION_PROJECT_CODE = loop_project.QUOTATION_PROJECT_CODE
    --              , PROJECT_CREATE_DATE = loop_project.PROJECT_CREATE_DATE
    --              , PROJECT_STATUS_CODE = loop_project.PROJECT_STATUS_CODE
    --              , PROJECT_GRADE_CODE = loop_project.PROJECT_GRADE_CODE
    --              , PROJECT_LEADER_EMPNO = loop_project.PROJECT_LEADER_EMPNO
    --              , BUYER_EMPNO = loop_project.BUYER_EMPNO
    --              , MARKETING_PERSON_EMPNO = loop_project.MARKETING_PERSON_EMPNO
    --              , PLANNING_PERSON_EMPNO = loop_project.PLANNING_PERSON_EMPNO
    --              , LAST_CUSTOMER_NAME = loop_project.LAST_CUSTOMER_NAME
    --              , CUSTOMER_MODEL_DESC = loop_project.CUSTOMER_MODEL_DESC
    --              , MCST_YIELD_RATE = loop_project.MCST_YIELD_RATE
    --              , BOM_TYPE_CODE = loop_project.BOM_TYPE_CODE
    --              , LOCAL_UPDATE_DTM = CURRENT_TIMESTAMP
    --              , UPDATE_USER_ID = I_USER_ID
    --              , SYSTEM_UPDATE_DTM = CURRENT_TIMESTAMP
    --          WHERE TENANT_ID = loop_project.TENANT_ID
    --            AND PROJECT_CODE = loop_project.PROJECT_CODE
    --            AND MODEL_CODE = loop_project.MODEL_CODE;
                      
    --         SELECT ::ROWCOUNT into v_sql_rowcnt FROM DUMMY;
    --         IF v_sql_rowcnt != 1 THEN
    --             SIGNAL txn_error SET MESSAGE_TEXT ='Project Update Error.';
    --         END IF;
            
    --     END;
            
    --     /*유사 모델*/
    --     BEGIN
    --         DELETE
    --           FROM DP_TC_PROJECT_SIMILAR_MODEL
    --          WHERE TENANT_ID = loop_project.TENANT_ID
    --            AND PROJECT_CODE = loop_project.PROJECT_CODE
    --            AND MODEL_CODE = loop_project.MODEL_CODE;
    --     END;
        
    --     FOR loop_similar_model AS similar_model_cursor DO
    --         BEGIN
	-- 		    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	-- 	        BEGIN
	-- 	        	SIGNAL txn_error SET MESSAGE_TEXT = 'Insert Project Similar Model Error.';
	-- 	        END;

    --             INSERT
    --               INTO DP_TC_PROJECT_SIMILAR_MODEL(
    --               	   TENANT_ID
    --               	 , PROJECT_CODE
    --               	 , MODEL_CODE
    --               	 , SIMILAR_MODEL_CODE
    --                  , CODE_DESC
    --               	 , DIRECT_REGISTER_FLAG
    --               	 , LOCAL_CREATE_DTM
    --               	 , LOCAL_UPDATE_DTM
    --               	 , CREATE_USER_ID
    --               	 , UPDATE_USER_ID
    --               	 , SYSTEM_CREATE_DTM
    --               	 , SYSTEM_UPDATE_DTM
    --                  ) VALUES (
    --                    loop_similar_model.TENANT_ID
    --                  , loop_similar_model.PROJECT_CODE
    --                  , loop_similar_model.MODEL_CODE
    --                  , loop_similar_model.SIMILAR_MODEL_CODE
    --                  , loop_similar_model.CODE_DESC
    --                  , loop_similar_model.DIRECT_REGISTER_FLAG
    --                  , CURRENT_TIMESTAMP
    --                  , CURRENT_TIMESTAMP
    --                  , I_USER_ID
    --                  , I_USER_ID
    --                  , CURRENT_TIMESTAMP
    --                  , CURRENT_TIMESTAMP
    --                  );
    --         END;
    --     END FOR;
            
    --     /*물동(MTLMOB)/판가(SALE_PRICE)/가공비(PROCESSING_COST)/판관비(SGNA)*/
    --     FOR loop_add_info AS add_info_cursor DO
    --         BEGIN
	-- 		    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	-- 	        BEGIN
	-- 	        	SIGNAL txn_error SET MESSAGE_TEXT = 'Update Project Add Info Error.';
	-- 	        END;

    --             UPDATE DP_TC_PROJECT_ADDITION_INFO
    --                SET ADDITION_TYPE_VALUE = loop_add_info.ADDITION_TYPE_VALUE
    --                  , LOCAL_UPDATE_DTM = CURRENT_TIMESTAMP
    --                  , UPDATE_USER_ID = I_USER_ID
    --                  , SYSTEM_UPDATE_DTM = CURRENT_TIMESTAMP
    --              WHERE TENANT_ID = loop_add_info.TENANT_ID
    --                AND PROJECT_CODE = loop_add_info.PROJECT_CODE
    --                AND MODEL_CODE = loop_add_info.MODEL_CODE
    --                AND ADDITION_TYPE_CODE = loop_add_info.ADDITION_TYPE_CODE
    --                AND PERIOD_CODE = loop_add_info.PERIOD_CODE;
    --         END;
    --     END FOR;
        
    --     /*환율*/
    --     FOR loop_base_exrate AS base_exrate_cursor DO
    --         BEGIN
	-- 		    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	-- 	        BEGIN
	-- 	        	SIGNAL txn_error SET MESSAGE_TEXT = 'Update Project Base Exrate Error.';
	-- 	        END;
                            
    --             UPDATE DP_TC_PROJECT_BASE_EXRATE
    --                SET EXRATE = loop_base_exrate.EXRATE
    --                  , LOCAL_UPDATE_DTM = CURRENT_TIMESTAMP
    --                  , UPDATE_USER_ID = I_USER_ID
    --                  , SYSTEM_UPDATE_DTM = CURRENT_TIMESTAMP
    --              WHERE TENANT_ID = loop_base_exrate.TENANT_ID
    --                AND PROJECT_CODE = loop_base_exrate.PROJECT_CODE
    --                AND MODEL_CODE = loop_base_exrate.MODEL_CODE
    --                AND CURRENCY_CODE = loop_base_exrate.CURRENCY_CODE
    --                AND PERIOD_CODE = loop_base_exrate.PERIOD_CODE;
    --         END;
    --     END FOR;
        
    -- END FOR;
 
    O_MSG = SELECT '200' RETURN_CODE, 'Success' RETURN_MSG, '' RETURN_PARAM FROM DUMMY;
    
END;