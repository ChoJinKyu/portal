PROCEDURE DP_VI_BASE_PRICE_ARL_UPSERT_PROC (IN I_MASTER DP_VI_BASE_PRICE_ARL_MST_TYPE
                                    ,IN I_APPROVER DP_VI_BASE_PRICE_ARL_APPROVER_TYPE
                                    ,IN I_REFERER DP_VI_BASE_PRICE_ARL_REFERER_TYPE
                                    ,IN I_DETAIL DP_VI_BASE_PRICE_ARL_DTL_TYPE
                                    ,IN I_PRICE DP_VI_BASE_PRICE_ARL_PRICE_TYPE
                                    ,OUT O_MSG DP_VI_BASE_PRICE_ARL_OUT_TYPE)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
/**************************************************************************
Scrum          : DP/VI/품의서 수정
Procedure Name : DP_VI_BASE_PRICE_ARL_INSERT_PROC
Creator        : Han Ki Ho
Description    : 신규/변경 개발VI 품의서 수정
History        : 2021-01-22 initial creation
***************************************************************************/
AS
BEGIN
    -- DECLARE v_Record_Cnt INT := 0;

    -- 10. 품의서 마스터(공통) 수정
    MERGE INTO CM_APPROVAL_MST T
        USING :I_MASTER S 
        ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER
    WHEN MATCHED THEN
        UPDATE 
        SET APPROVAL_TITLE          = S.APPROVAL_TITLE
           , APPROVAL_CONTENTS      = S.APPROVAL_CONTENTS
           , APPROVE_STATUS_CODE    = S.APPROVE_STATUS_CODE
           , REQUEST_DATE           = S.REQUEST_DATE
           , ATTCH_GROUP_NUMBER     = S.ATTCH_GROUP_NUMBER
           , LOCAL_UPDATE_DTM       = S.LOCAL_UPDATE_DTM
           , UPDATE_USER_ID         = S.UPDATE_USER_ID
           , SYSTEM_UPDATE_DTM      = NOW()
    ;

    -- UPDATE CM_APPROVAL_MST
    -- SET
    --        APPROVAL_TITLE           = :I_MASTER.APPROVAL_TITLE
    --        , APPROVAL_CONTENTS      = :I_MASTER.APPROVAL_CONTENTS
    --     --    , APPROVE_STATUS_CODE    = S_MASTER.APPROVE_STATUS_CODE
    --     --    , REQUEST_DATE           = :I_MASTER.REQUEST_DATE
    --     --    , ATTCH_GROUP_NUMBER     = :I_MASTER.ATTCH_GROUP_NUMBER
    --     --    , LOCAL_UPDATE_DTM       = :I_MASTER.LOCAL_UPDATE_DTM
    --     --    , UPDATE_USER_ID         = :I_MASTER.UPDATE_USER_ID
    --     --    , SYSTEM_UPDATE_DTM      = :I_MASTER.SYSTEM_UPDATE_DTM
    -- WHERE (TENANT_ID, APPROVAL_NUMBER) =  (
    --         SELECT TENANT_ID, APPROVAL_NUMBER FROM :I_MASTER
    --     );

    -- 20. 품의서 승인자 등록/수정
    MERGE INTO CM_APPROVER T
        USING :I_APPROVER S 
        ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.APPROVE_SEQUENCE = S.APPROVE_SEQUENCE AND T.APPROVER_EMPNO = S.APPROVER_EMPNO
    WHEN MATCHED THEN
        UPDATE 
        SET APPROVER_TYPE_CODE      = S.APPROVER_TYPE_CODE
           , APPROVE_STATUS_CODE    = S.APPROVE_STATUS_CODE
           , LOCAL_UPDATE_DTM       = S.LOCAL_UPDATE_DTM
           , UPDATE_USER_ID         = S.UPDATE_USER_ID
           , SYSTEM_UPDATE_DTM      = NOW()
    WHEN NOT MATCHED THEN
        INSERT 
            (
                TENANT_ID, APPROVAL_NUMBER, APPROVE_SEQUENCE, APPROVER_EMPNO, APPROVER_TYPE_CODE, APPROVE_STATUS_CODE,
                LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
            )
        VALUES
            (
                S.TENANT_ID, S.APPROVAL_NUMBER, S.APPROVE_SEQUENCE, S.APPROVER_EMPNO, S.APPROVER_TYPE_CODE, S.APPROVE_STATUS_CODE,
                S.LOCAL_CREATE_DTM, S.LOCAL_UPDATE_DTM, S.CREATE_USER_ID, S.UPDATE_USER_ID, NOW(), NOW() 
            )
    ;

    -- 21. 품의서 승인자 삭제
    DELETE FROM CM_APPROVER
    WHERE 
        (TENANT_ID, APPROVAL_NUMBER) IN (SELECT DISTINCT TENANT_ID, APPROVAL_NUMBER FROM :I_APPROVER)
        AND
        (TENANT_ID, APPROVAL_NUMBER, APPROVE_SEQUENCE, APPROVER_EMPNO) IN  (
            SELECT 
                T.TENANT_ID, T.APPROVAL_NUMBER, T.APPROVE_SEQUENCE, T.APPROVER_EMPNO 
            FROM 
                CM_APPROVER T LEFT OUTER JOIN :I_APPROVER S
                ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.APPROVE_SEQUENCE = S.APPROVE_SEQUENCE AND T.APPROVER_EMPNO = S.APPROVER_EMPNO
            WHERE
                S.TENANT_ID IS NULL
        );

    -- 30. 품의서 참조자 저장 : 빈 테이블(옵션 정보)일 수 있으므로 데이터가 있는지 체크
    -- SELECT COUNT(*) INTO v_Record_Cnt FROM :I_REFERER;

    IF RECORD_COUNT(:I_REFERER) > 0 THEN
        -- 31. 품의서 참조자 등록
        MERGE INTO CM_REFERER T
            USING :I_REFERER S 
            ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.REFERER_EMPNO = S.REFERER_EMPNO
        WHEN NOT MATCHED THEN
            INSERT 
                (
                    TENANT_ID, APPROVAL_NUMBER, REFERER_EMPNO,
                    LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
                )
            VALUES
                (
                    S.TENANT_ID, S.APPROVAL_NUMBER, S.REFERER_EMPNO,
                    S.LOCAL_CREATE_DTM, S.LOCAL_UPDATE_DTM, S.CREATE_USER_ID, S.UPDATE_USER_ID, NOW(), NOW() 
                )
        ;

        -- 32. 품의서 참조자 삭제
        DELETE FROM CM_REFERER
        WHERE 
            (TENANT_ID, APPROVAL_NUMBER) IN (SELECT DISTINCT TENANT_ID, APPROVAL_NUMBER FROM :I_REFERER)
            AND
            (TENANT_ID, APPROVAL_NUMBER, REFERER_EMPNO) IN  (
                SELECT 
                    T.TENANT_ID, T.APPROVAL_NUMBER, T.REFERER_EMPNO 
                FROM 
                    CM_REFERER T LEFT OUTER JOIN :I_REFERER S
                    ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.REFERER_EMPNO = S.REFERER_EMPNO
                WHERE
                    S.TENANT_ID IS NULL
            );
    END IF;

    -- 40. 품의서 상세 등록/수정
    MERGE INTO DP_VI_BASE_PRICE_ARL_DTL T
        USING :I_DETAIL S 
        ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.ITEM_SEQUENCE = S.ITEM_SEQUENCE
    WHEN MATCHED THEN
        UPDATE 
        SET COMPANY_CODE            = S.COMPANY_CODE
           , ORG_TYPE_CODE          = S.ORG_TYPE_CODE
           , ORG_CODE               = S.ORG_CODE
           , MATERIAL_CODE          = S.MATERIAL_CODE
           , BASE_UOM_CODE          = S.BASE_UOM_CODE
           , BASE_DATE              = S.BASE_DATE
           , BASE_PRICE_GROUND_CODE = S.BASE_PRICE_GROUND_CODE
           , LOCAL_UPDATE_DTM       = S.LOCAL_UPDATE_DTM
           , UPDATE_USER_ID         = S.UPDATE_USER_ID
           , SYSTEM_UPDATE_DTM      = NOW()
    WHEN NOT MATCHED THEN
        INSERT 
            (
                TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE, COMPANY_CODE, ORG_TYPE_CODE, ORG_CODE, MATERIAL_CODE, BASE_UOM_CODE, 
                SUPPLIER_CODE, BASE_DATE, BASE_PRICE_GROUND_CODE,
                LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
            )
        VALUES
            (
                S.TENANT_ID, S.APPROVAL_NUMBER, S.ITEM_SEQUENCE, S.COMPANY_CODE, S.ORG_TYPE_CODE, S.ORG_CODE, S.MATERIAL_CODE, S.BASE_UOM_CODE, 
                S.SUPPLIER_CODE, S.BASE_DATE, S.BASE_PRICE_GROUND_CODE,
                S.LOCAL_CREATE_DTM, S.LOCAL_UPDATE_DTM, S.CREATE_USER_ID, S.UPDATE_USER_ID, NOW(), NOW() 
            )
    ;

    -- 41. 품의서 상세 삭제
    DELETE FROM DP_VI_BASE_PRICE_ARL_DTL
    WHERE 
        (TENANT_ID, APPROVAL_NUMBER) IN (SELECT DISTINCT TENANT_ID, APPROVAL_NUMBER FROM :I_DETAIL)
        AND
        (TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE) IN  (
            SELECT 
                T.TENANT_ID, T.APPROVAL_NUMBER, T.ITEM_SEQUENCE
            FROM 
                DP_VI_BASE_PRICE_ARL_DTL T LEFT OUTER JOIN :I_DETAIL S
                ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.ITEM_SEQUENCE = S.ITEM_SEQUENCE
            WHERE
                S.TENANT_ID IS NULL
            );

    -- 50. 금액정보 등록/수정
    MERGE INTO DP_VI_BASE_PRICE_ARL_PRICE T
        USING :I_PRICE S 
        ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.ITEM_SEQUENCE = S.ITEM_SEQUENCE AND T.MARKET_CODE = S.MARKET_CODE
    WHEN MATCHED THEN
        UPDATE 
        SET NEW_BASE_PRICE                    = S.NEW_BASE_PRICE
           , NEW_BASE_PRICE_CURRENCY_CODE     = S.NEW_BASE_PRICE_CURRENCY_CODE
           , CURRENT_BASE_PRICE               = S.CURRENT_BASE_PRICE
           , CURRENT_BASE_PRICE_CURRENCY_CODE = S.CURRENT_BASE_PRICE_CURRENCY_CODE
           , FIRST_PURCHASING_NET_PRICE       = S.FIRST_PURCHASING_NET_PRICE
           , FIRST_PUR_NETPRICE_CURR_CD       = S.FIRST_PUR_NETPRICE_CURR_CD
           , FIRST_PUR_NETPRICE_STR_DT        = S.FIRST_PUR_NETPRICE_STR_DT
           , CHANGE_REASON_CODE               = S.CHANGE_REASON_CODE
           , LOCAL_UPDATE_DTM                 = S.LOCAL_UPDATE_DTM
           , UPDATE_USER_ID                   = S.UPDATE_USER_ID
           , SYSTEM_UPDATE_DTM                = NOW()
    WHEN NOT MATCHED THEN
        INSERT 
            (
                TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE, MARKET_CODE, NEW_BASE_PRICE, NEW_BASE_PRICE_CURRENCY_CODE,
                CURRENT_BASE_PRICE, CURRENT_BASE_PRICE_CURRENCY_CODE, FIRST_PURCHASING_NET_PRICE, FIRST_PUR_NETPRICE_CURR_CD, FIRST_PUR_NETPRICE_STR_DT, CHANGE_REASON_CODE,
                LOCAL_CREATE_DTM, LOCAL_UPDATE_DTM, CREATE_USER_ID, UPDATE_USER_ID, SYSTEM_CREATE_DTM, SYSTEM_UPDATE_DTM
            )
        VALUES
            (
                S.TENANT_ID, S.APPROVAL_NUMBER, S.ITEM_SEQUENCE, S.MARKET_CODE, S.NEW_BASE_PRICE, S.NEW_BASE_PRICE_CURRENCY_CODE,
                S.CURRENT_BASE_PRICE, S.CURRENT_BASE_PRICE_CURRENCY_CODE, S.FIRST_PURCHASING_NET_PRICE, S.FIRST_PUR_NETPRICE_CURR_CD, S.FIRST_PUR_NETPRICE_STR_DT, S.CHANGE_REASON_CODE,
                S.LOCAL_CREATE_DTM, S.LOCAL_UPDATE_DTM, S.CREATE_USER_ID, S.UPDATE_USER_ID, NOW(), NOW() 
            )
    ;

    -- 51. 금액정보 삭제
    DELETE FROM DP_VI_BASE_PRICE_ARL_PRICE
    WHERE 
        (TENANT_ID, APPROVAL_NUMBER) IN (SELECT DISTINCT TENANT_ID, APPROVAL_NUMBER FROM :I_PRICE)
        AND
        (TENANT_ID, APPROVAL_NUMBER, ITEM_SEQUENCE, MARKET_CODE) IN  (
            SELECT 
                T.TENANT_ID, T.APPROVAL_NUMBER, T.ITEM_SEQUENCE, T.MARKET_CODE
            FROM 
                DP_VI_BASE_PRICE_ARL_PRICE T LEFT OUTER JOIN :I_PRICE S
                ON T.TENANT_ID = S.TENANT_ID AND T.APPROVAL_NUMBER = S.APPROVAL_NUMBER AND T.ITEM_SEQUENCE = S.ITEM_SEQUENCE AND T.MARKET_CODE = S.MARKET_CODE
            WHERE
                S.TENANT_ID IS NULL
        );

    O_MSG = SELECT '200' RETURN_CODE, 'Success' RETURN_MSG, '' RETURN_PARAM FROM DUMMY;
    
END;