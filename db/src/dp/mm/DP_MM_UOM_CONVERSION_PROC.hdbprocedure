/************************************************
  1. namespace
  - 모듈코드 소문자로 작성
  - 소모듈 존재시 대모듈.소모듈 로 작성
  2. entity
  - 대문자로 작성
  - 테이블명 생성을 고려하여 '_' 추가
  3. 컬럼(속성)
  - 소문자로 작성
  4. .hdbview, .hdbfunction 등으로 이미 생성된 DB Object 사용시
  entity 위에 @cds.persistence.exists 명시  
  
  5. namespace : dp
  6. Procedure  : DP_MM_UOM_CONVERSION_PROC
  7. Procedure description : 단위 환산 
      1) 동일 UOM Class를 가진 단위
      2) 기본단위가 존재하는 UOM Class
      3) 환산순서 : 단위 From 에서 단위 To로 환산
          - 단위 From -> 기본단위
          - 기본단위 -> 단위 To

      ※ 환산조건(1)을 만족하지 않는 경우 오류처리

  8. history
  -. 2021.01.06 : 최미희 최초작성
  -.  
*************************************************/
PROCEDURE DP_MM_UOM_CONVERSION_PROC (IN I_TENANT_ID NVARCHAR(5),
                                     IN I_FROM_UOM_CODE NVARCHAR(3),
                                     IN I_TO_UOM_CODE NVARCHAR(3),
                                     IN I_QUANTITY DECIMAL,
                                     OUT O_RETURN_CODE NVARCHAR(1),
                                     OUT O_RETURN_MSG_CODE NVARCHAR(30),
                                     OUT O_RETURN_MSG NVARCHAR(100),
                                     OUT O_RETURN_QUANTITY DECIMAL
                                    )
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER
    --DEFAULT SCHEMA <default_schema_name>
    READS SQL DATA AS
BEGIN

    DECLARE V_FR_CONV_RATE DECIMAL;
    DECLARE V_TO_CONV_RATE DECIMAL;

    DECLARE VT_FR_UOM TABLE( UOM_CLASS_CODE NVARCHAR(10),
                              BASE_UOM_CODE NVARCHAR(3),
                              BASE_UNIT_FLAG BOOLEAN,
                              CONVERSION_NUMERATOR DECIMAL(10,0),
                              CONVERSION_DENOMINATOR DECIMAL(10,0),
                              CONVERSION_INDEX  DECIMAL(10,0)
                            );

    DECLARE VT_TO_UOM TABLE ( UOM_CLASS_CODE NVARCHAR(10),
                              BASE_UOM_CODE NVARCHAR(3),
                              BASE_UNIT_FLAG BOOLEAN,
                              CONVERSION_NUMERATOR DECIMAL(10,0),
                              CONVERSION_DENOMINATOR DECIMAL(10,0),
                              CONVERSION_INDEX  DECIMAL(10,0)
                            );

    O_RETURN_CODE := 'S';

    VT_FR_UOM = SELECT UOM.UOM_CLASS_CODE,
                    CLS.BASE_UOM_CODE,
                    UOM.BASE_UNIT_FLAG,
                    UOM.CONVERSION_NUMERATOR,
                    UOM.CONVERSION_DENOMINATOR,
                    UOM.CONVERSION_INDEX   
            FROM  DP_MM_UNIT_OF_MEASURE UOM
            INNER JOIN DP_MM_UOM_CLASS  CLS 
            ON CLS.TENANT_ID = UOM.TENANT_ID
            AND CLS.UOM_CLASS_CODE = UOM.UOM_CLASS_CODE
            WHERE UOM.TENANT_ID = :I_TENANT_ID
            AND   UOM.UOM_CODE = :I_FROM_UOM_CODE        
            ;

    IF (RECORD_COUNT(:VT_FR_UOM) = 0) THEN
       O_RETURN_CODE = 'E';
       O_RETURN_MSG_CODE = 'EDP60003';
       O_RETURN_MSG = 'Data is not exists(' || I_FROM_UOM_CODE || ')';
       RETURN;
    END IF;

    VT_TO_UOM = SELECT UOM.UOM_CLASS_CODE,
                    CLS.BASE_UOM_CODE,
                    UOM.BASE_UNIT_FLAG,
                    UOM.CONVERSION_NUMERATOR,
                    UOM.CONVERSION_DENOMINATOR,
                    UOM.CONVERSION_INDEX      
            FROM  DP_MM_UNIT_OF_MEASURE UOM
            INNER JOIN DP_MM_UOM_CLASS  CLS 
            ON CLS.TENANT_ID = UOM.TENANT_ID
            AND CLS.UOM_CLASS_CODE = UOM.UOM_CLASS_CODE
            WHERE UOM.TENANT_ID = :I_TENANT_ID
            AND   UOM.UOM_CODE = :I_TO_UOM_CODE
            ;
    IF (RECORD_COUNT(:VT_TO_UOM) = 0) THEN
       O_RETURN_CODE = 'E';
       O_RETURN_MSG_CODE = 'EDP60003';
       O_RETURN_MSG = 'Data is not exists(' || I_TO_UOM_CODE || ')';
       RETURN;
    END IF;
    
 
    IF (:VT_FR_UOM.UOM_CLASS_CODE[1] = :VT_TO_UOM.UOM_CLASS_CODE[1]) THEN

        IF (:VT_FR_UOM.BASE_UOM_CODE[1] IS NOT NULL) THEN

            V_FR_CONV_RATE = (:VT_FR_UOM.CONVERSION_NUMERATOR[1]/:VT_FR_UOM.CONVERSION_DENOMINATOR[1]) * POWER(10,:VT_FR_UOM.CONVERSION_INDEX[1]);
            V_TO_CONV_RATE = (:VT_TO_UOM.CONVERSION_DENOMINATOR[1]/:VT_TO_UOM.CONVERSION_NUMERATOR[1]) * POWER(10,:VT_TO_UOM.CONVERSION_INDEX[1]);

            O_RETURN_QUANTITY := :I_QUANTITY * V_FR_CONV_RATE * V_TO_CONV_RATE;

        ELSE
            O_RETURN_CODE = 'S';
            O_RETURN_QUANTITY = 1;

        END IF; 

    ELSE
        O_RETURN_CODE = 'E';
        O_RETURN_MSG_CODE = 'EDP60002';
        O_RETURN_MSG = 'Conversion is possible within the same unit class';
        
    END IF;

END;