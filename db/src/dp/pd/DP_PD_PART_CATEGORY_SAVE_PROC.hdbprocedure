PROCEDURE DP_PD_PART_CATEGORY_SAVE_PROC (		
    IN  CRUD_TYPE NVARCHAR(1),
    IN  I_M TABLE ( TENANT_ID NVARCHAR(5), 
                    CATEGORY_GROUP_CODE NVARCHAR(30),
                    CATEGORY_CODE NVARCHAR(40),
                    PARENT_CATEGORY_CODE NVARCHAR(40),
                    SEQUENCE DECIMAL,
                    ACTIVE_FLAG BOOLEAN,
                    UPDATE_USER_ID NVARCHAR(255),
                    CRUD_TYPE_CODE NVARCHAR(1) ),
    IN  I_D TABLE ( TENANT_ID NVARCHAR(5), 
                    CATEGORY_GROUP_CODE NVARCHAR(30),
                    CATEGORY_CODE NVARCHAR(40),
                    LANGUAGE_CD NVARCHAR(30),
                    CODE_NAME NVARCHAR(240),
                    UPDATE_USER_ID NVARCHAR(255),
                    CRUD_TYPE_CODE NVARCHAR(1) ),
    IN  I_SD TABLE ( TENANT_ID NVARCHAR(5), 
                    CATEGORY_GROUP_CODE NVARCHAR(30),
                    CATEGORY_CODE NVARCHAR(40),
                    ACTIVITY_CODE NVARCHAR(40),
                    S_GRADE_STANDARD_DAYS INTEGER,
                    A_GRADE_STANDARD_DAYS INTEGER,
                    B_GRADE_STANDARD_DAYS INTEGER,
                    C_GRADE_STANDARD_DAYS INTEGER,
                    D_GRADE_STANDARD_DAYS INTEGER,
                    ACTIVE_FLAG BOOLEAN,
                    UPDATE_USER_ID NVARCHAR(255),
                    CRUD_TYPE_CODE NVARCHAR(1) ),
                    OUT O_MSG TABLE(RETURN_CODE NVARCHAR(2), RETURN_MSG NVARCHAR(5000) )
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER

AS
BEGIN
    DECLARE V_TENANT_ID NVARCHAR(5);
    DECLARE V_COMPANY_CODE NVARCHAR(10);
    DECLARE V_ORG_TYPE_CODE NVARCHAR(2);
    DECLARE V_ORG_CODE NVARCHAR(10);
    DECLARE V_ACTIVITY_CODE NVARCHAR(40);
    DECLARE V_CATEGORY_GROUP_CODE NVARCHAR(30);
    DECLARE V_CATEGORY_CODE NVARCHAR(40);
    DECLARE V_SEQUENCE DECIMAL;
    DECLARE V_ORG_SEQUENCE DECIMAL;
    DECLARE V_REQUEST_NUMBER NVARCHAR(30);

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		O_MSG = SELECT  'NG' RETURN_CODE, V_CATEGORY_CODE ||'-'|| ::SQL_ERROR_CODE||'-'||::SQL_ERROR_MESSAGE RETURN_MSG FROM  DUMMY;
    END;

    /* 카테고리코드에 REQUEST_NUMBER가 넘어오면 신규 Data 임, 'CCR' */
 
    SELECT TENANT_ID, CATEGORY_GROUP_CODE,
           CASE WHEN ( SUBSTR(CATEGORY_CODE,1,3) = 'CCR' OR CATEGORY_CODE = 'new' ) THEN
                     'PC' || TO_NCHAR(NOW(), 'YYMMDD') || LPAD(DP_PD_PART_CATEGORY_SEQ.NEXTVAL, 4, '0')
                ELSE CATEGORY_CODE
           END,
           CASE WHEN SUBSTR(CATEGORY_CODE,1,3) = 'CCR' THEN
                     CATEGORY_CODE
                ELSE NULL
           END,
           SEQUENCE
    INTO   V_TENANT_ID, V_CATEGORY_GROUP_CODE, V_CATEGORY_CODE, V_REQUEST_NUMBER, V_SEQUENCE
    FROM   :I_M
    ;

/* 카테고리그룹코드를 사용하는 ORG_CODE 관리하는 Data를 CM_CODE에서 관리 */
    SELECT MAX(OM.ORG_TYPE_CODE), MIN(OO.ORG_CODE)
      INTO   V_ORG_TYPE_CODE, V_ORG_CODE
      FROM   CM_PUR_ORG_TYPE_MAPPING OM,
             CM_PUR_OPERATION_ORG OO,
             CM_CODE_DTL CD,
             CM_CODE_LNG CL
      WHERE  OM.TENANT_ID = OO.TENANT_ID
       AND   OM.TENANT_ID = CD.TENANT_ID
       AND   OM.TENANT_ID = CL.TENANT_ID
       AND   OM.PROCESS_TYPE_CODE = 'DP02'
       AND   OM.TENANT_ID= OO.TENANT_ID
       AND   OM.COMPANY_CODE = OO.COMPANY_CODE
       AND   OM.ORG_TYPE_CODE = OO.ORG_TYPE_CODE
       AND   OM.USE_FLAG = TRUE
       AND   CD.GROUP_CODE =  'CM_ORG_TYPE_CODE'
       AND   CD.GROUP_CODE =  CL.GROUP_CODE
       AND   CD.CODE = CL.CODE
       AND   CD.CODE = OM.ORG_TYPE_CODE
       AND   OM.TENANT_ID = 'L2101'
    GROUP BY OM.TENANT_ID
    ;
    V_COMPANY_CODE := 'LGESL';

    IF :CRUD_TYPE IN ('D', 'U') THEN
        SELECT SEQUENCE 
        INTO   V_ORG_SEQUENCE 
        FROM   DP_PD_PART_CATEGORY 
        WHERE  TENANT_ID = V_TENANT_ID
        AND    CATEGORY_GROUP_CODE = V_CATEGORY_GROUP_CODE
        AND    CATEGORY_CODE = V_CATEGORY_CODE
        ;
    END IF;

/* Input 임시테이블 관리 */
    INSERT INTO DP_PD_PART_CATEGORY_ACTIVITY_TEMP
        ( TENANT_ID
            ,COMPANY_CODE
            ,ORG_TYPE_CODE
            ,ORG_CODE
            ,ACTIVITY_CODE
            ,CATEGORY_GROUP_CODE
            ,CATEGORY_CODE
            ,S_GRADE_STANDARD_DAYS	
            ,A_GRADE_STANDARD_DAYS	
            ,B_GRADE_STANDARD_DAYS	
            ,C_GRADE_STANDARD_DAYS	
            ,D_GRADE_STANDARD_DAYS	
            ,ACTIVE_FLAG
            ,CRUD_TYPE_CODE
            ,NEW_CATEGORY_CODE
        )
    SELECT
        TENANT_ID, 
        V_COMPANY_CODE,
        V_ORG_TYPE_CODE,
        V_ORG_CODE,
        ACTIVITY_CODE,
        CATEGORY_GROUP_CODE,
        CATEGORY_CODE,
        S_GRADE_STANDARD_DAYS,
        A_GRADE_STANDARD_DAYS,
        B_GRADE_STANDARD_DAYS,
        C_GRADE_STANDARD_DAYS,
        D_GRADE_STANDARD_DAYS,
        ACTIVE_FLAG,
        CRUD_TYPE_CODE,
        V_CATEGORY_CODE 
      FROM :I_SD
        ;
        
    COMMIT;

    /*  CRUD_TYPE가 'D' 인 Data 삭제 */
    IF :CRUD_TYPE = 'D' THEN
        DELETE FROM DP_PD_PART_CATEGORY_LNG D
        WHERE  D.TENANT_ID = V_TENANT_ID
        AND    D.CATEGORY_GROUP_CODE = V_CATEGORY_GROUP_CODE
        AND    D.CATEGORY_CODE = V_CATEGORY_CODE
        ;
 
        DELETE FROM DP_PD_PART_CATEGORY M
        WHERE  M.TENANT_ID = V_TENANT_ID
        AND    M.CATEGORY_GROUP_CODE = V_CATEGORY_GROUP_CODE
        AND    M.CATEGORY_CODE = V_CATEGORY_CODE
        ;

        UPDATE DP_PD_PART_CATEGORY
        SET    SEQUENCE = SEQUENCE - 1
        WHERE  TENANT_ID = V_TENANT_ID
        AND    SEQUENCE > V_ORG_SEQUENCE
        ; 

    ELSE
        IF :CRUD_TYPE = 'U' THEN

            IF V_ORG_SEQUENCE > V_SEQUENCE THEN

                UPDATE DP_PD_PART_CATEGORY
                SET    SEQUENCE = SEQUENCE + 1
                WHERE  TENANT_ID = V_TENANT_ID
                AND    SEQUENCE >= V_SEQUENCE
                AND    SEQUENCE < V_ORG_SEQUENCE
                ;

            ELSEIF V_ORG_SEQUENCE < V_SEQUENCE THEN

                UPDATE DP_PD_PART_CATEGORY
                SET    SEQUENCE = SEQUENCE - 1
                WHERE  TENANT_ID = V_TENANT_ID
                AND    SEQUENCE <= V_SEQUENCE
                AND    SEQUENCE > V_ORG_SEQUENCE
                ;

            END IF;
            
            UPDATE DP_PD_PART_CATEGORY M
               SET (M.PARENT_CATEGORY_CODE, M.SEQUENCE, M.ACTIVE_FLAG, M.LOCAL_UPDATE_DTM, M.UPDATE_USER_ID, M.SYSTEM_UPDATE_DTM) =
                   ( SELECT PARENT_CATEGORY_CODE, SEQUENCE, ACTIVE_FLAG, NOW(), UPDATE_USER_ID, NOW()
                       FROM :I_M
                      WHERE TENANT_ID = M.TENANT_ID 
                        AND CATEGORY_GROUP_CODE = M.CATEGORY_GROUP_CODE
                        AND CATEGORY_CODE = M.CATEGORY_CODE
                   )
            WHERE  M.TENANT_ID = V_TENANT_ID
            AND    M.CATEGORY_GROUP_CODE = V_CATEGORY_GROUP_CODE
            AND    M.CATEGORY_CODE = V_CATEGORY_CODE
            ;

        ELSE

            /* 생성요청상태 완료로 변경, 생성카테고리코드 세팅  */
            IF V_REQUEST_NUMBER is not null THEN
                UPDATE DP_PD_PART_CATEGORY_CREATION_REQUEST M
                SET (M.PROGRESS_STATUS_CODE, M.CREATE_CATEGORY_CODE, M.CREATOR_EMPNO, M.LOCAL_UPDATE_DTM, M.UPDATE_USER_ID, M.SYSTEM_UPDATE_DTM) =
                    ( SELECT 'D', V_CATEGORY_CODE, NOW(),'9004', '17370CHEM@lgchem.com', NOW()
                        FROM :I_M
                        WHERE M.TENANT_ID = V_TENANT_ID
                            AND M.CATEGORY_GROUP_CODE = V_CATEGORY_GROUP_CODE
                            AND M.REQUEST_NUMBER = V_REQUEST_NUMBER
                    )
                WHERE  M.TENANT_ID = V_TENANT_ID
                AND    M.CATEGORY_GROUP_CODE = V_CATEGORY_GROUP_CODE
                AND    M.REQUEST_NUMBER = V_REQUEST_NUMBER
                ;            
            END IF;

            INSERT INTO DP_PD_PART_CATEGORY M
                      ( TENANT_ID
                        ,CATEGORY_CODE
                        ,CATEGORY_GROUP_CODE
                        ,SEQUENCE
                        ,PARENT_CATEGORY_CODE
                        ,ACTIVE_FLAG
                        ,LOCAL_CREATE_DTM
                        ,LOCAL_UPDATE_DTM
                        ,CREATE_USER_ID
                        ,UPDATE_USER_ID
                        ,SYSTEM_CREATE_DTM
                        ,SYSTEM_UPDATE_DTM
                      )
                 SELECT M.TENANT_ID
                        ,V_CATEGORY_CODE
                        ,M.CATEGORY_GROUP_CODE
                        ,(SELECT COALESCE(MAX(SEQUENCE), 0) + 1 FROM DP_PD_PART_CATEGORY WHERE TENANT_ID = M.TENANT_ID)
                        ,M.PARENT_CATEGORY_CODE
                        ,M.ACTIVE_FLAG
                        ,NOW()
                        ,NOW()
                        ,M.UPDATE_USER_ID
                        ,M.UPDATE_USER_ID
                        ,NOW()
                        ,NOW()
                FROM :I_M M
            ;

            INSERT INTO DP_PD_PART_CATEGORY_ACTIVITY
                ( TENANT_ID
                    ,COMPANY_CODE
                    ,ORG_TYPE_CODE
                    ,ORG_CODE
                    ,ACTIVITY_CODE
                    ,CATEGORY_GROUP_CODE
                    ,CATEGORY_CODE
                    ,PART_PROJECT_TYPE_CODE
                    ,S_GRADE_STANDARD_DAYS	
                    ,A_GRADE_STANDARD_DAYS	
                    ,B_GRADE_STANDARD_DAYS	
                    ,C_GRADE_STANDARD_DAYS	
                    ,D_GRADE_STANDARD_DAYS	
                    ,ACTIVE_FLAG
                    ,LOCAL_CREATE_DTM
                    ,LOCAL_UPDATE_DTM
                    ,CREATE_USER_ID
                    ,UPDATE_USER_ID
                    ,SYSTEM_CREATE_DTM
                    ,SYSTEM_UPDATE_DTM
                )
            SELECT
                :I_SD.TENANT_ID
                ,V_COMPANY_CODE
                ,V_ORG_TYPE_CODE
                ,V_ORG_CODE
                ,ACTIVITY_CODE
                ,V_CATEGORY_GROUP_CODE
                ,V_CATEGORY_CODE
                ,d.CODE AS PART_PROJECT_TYPE_CODE
                ,S_GRADE_STANDARD_DAYS
                ,A_GRADE_STANDARD_DAYS
                ,B_GRADE_STANDARD_DAYS
                ,C_GRADE_STANDARD_DAYS
                ,D_GRADE_STANDARD_DAYS
                ,ACTIVE_FLAG
                ,NOW()
                ,NOW()
                ,:I_SD.UPDATE_USER_ID
                ,:I_SD.UPDATE_USER_ID
                ,NOW()
                ,NOW()
            FROM :I_SD, cm_code_dtl d
        WHERE :I_SD.tenant_id = d.tenant_id
        and d.group_code = 'DP_PART_PJT_TYPE'
           ;

        END IF;

        /*  I_D Table의 Data 일괄 삭제 */
        DELETE FROM DP_PD_PART_CATEGORY_LNG D
        WHERE ( D.TENANT_ID,D.CATEGORY_GROUP_CODE,D.CATEGORY_CODE,D.LANGUAGE_CD ) IN
            ( SELECT id.TENANT_ID, V_CATEGORY_GROUP_CODE, V_CATEGORY_CODE, id.LANGUAGE_CD
                FROM :I_D id
               WHERE id.CRUD_TYPE_CODE = 'D'
            )
        ;

        /*  I_D Table의 Data 일괄 추가,수정 */
        MERGE INTO DP_PD_PART_CATEGORY_LNG D
            USING ( SELECT * FROM :I_D WHERE :I_D.CRUD_TYPE_CODE IN ('C','U')  ) id
            ON ( D.TENANT_ID = V_TENANT_ID
                AND D.CATEGORY_GROUP_CODE = V_CATEGORY_GROUP_CODE
                AND D.CATEGORY_CODE = V_CATEGORY_CODE
                AND D.LANGUAGE_CD = id.LANGUAGE_CD )

        WHEN MATCHED THEN
            UPDATE
            SET  D.CODE_NAME = id.CODE_NAME
                ,D.LOCAL_UPDATE_DTM = NOW()
                ,D.UPDATE_USER_ID = id.UPDATE_USER_ID
                ,D.SYSTEM_UPDATE_DTM = NOW()
        WHEN NOT MATCHED THEN
            INSERT ( TENANT_ID
                    ,CATEGORY_GROUP_CODE
                    ,CATEGORY_CODE
                    ,LANGUAGE_CD
                    ,CODE_NAME
                    ,LOCAL_CREATE_DTM
                    ,LOCAL_UPDATE_DTM
                    ,CREATE_USER_ID
                    ,UPDATE_USER_ID
                    ,SYSTEM_CREATE_DTM
                    ,SYSTEM_UPDATE_DTM
                )
            VALUES ( V_TENANT_ID
                    ,V_CATEGORY_GROUP_CODE
                    ,V_CATEGORY_CODE
                    ,id.LANGUAGE_CD
                    ,id.CODE_NAME
                    ,NOW()
                    ,NOW()
                    ,id.UPDATE_USER_ID
                    ,id.UPDATE_USER_ID
                    ,NOW()
                    ,NOW()
                )
        ; 

        /*  I_SD Table의 Data 일괄 추가,수정
        MERGE INTO DP_PD_PART_CATEGORY_ACTIVITY C
            USING ( SELECT :I_SD.tenant_id, V_COMPANY_CODE as COMPANY_CODE, V_ORG_TYPE_CODE as ORG_TYPE_CODE, cg.code as ORG_CODE,
                           :I_SD.CATEGORY_GROUP_CODE, :I_SD.CATEGORY_CODE, d.code as PART_PROJECT_TYPE_CODE, :I_SD.ACTIVITY_CODE, :I_SD.CRUD_TYPE_CODE,
                           :I_SD.S_GRADE_STANDARD_DAYS, :I_SD.A_GRADE_STANDARD_DAYS, :I_SD.B_GRADE_STANDARD_DAYS, :I_SD.C_GRADE_STANDARD_DAYS, :I_SD.D_GRADE_STANDARD_DAYS,
                           :I_SD.ACTIVE_FLAG, :I_SD.UPDATE_USER_ID
                      FROM :I_SD, cm_code_dtl d, cm_code_dtl cg
                     WHERE :I_SD.CRUD_TYPE_CODE IN ('C','U')
                       and :I_SD.tenant_id = 'L2101'
                       and :I_SD.tenant_id = d.tenant_id
                       and d.group_code = 'DP_PART_PJT_TYPE'
                       and :I_SD.tenant_id = cg.tenant_id
                       and cg.group_code = 'DP_PD_CATEGORY_GROUP_CODE'
                       and cg.parent_group_code = 'DP_PD_CATEGORY_GROUP'
                       and cg.parent_code = V_CATEGORY_GROUP_CODE
                  ) isd
            ON ( C.TENANT_ID = V_TENANT_ID
                AND C.COMPANY_CODE = V_COMPANY_CODE
                AND C.ORG_TYPE_CODE = V_ORG_TYPE_CODE
                AND C.ORG_TYPE_CODE = isd.ORG_CODE
                AND C.ACTIVITY_CODE = isd.ACTIVITY_CODE
                AND C.PART_PROJECT_TYPE_CODE = isd.PART_PROJECT_TYPE_CODE
                AND C.CATEGORY_GROUP_CODE = V_CATEGORY_GROUP_CODE
                AND C.CATEGORY_CODE = V_CATEGORY_CODE )

        WHEN MATCHED THEN
            UPDATE
            SET  C.S_GRADE_STANDARD_DAYS = isd.S_GRADE_STANDARD_DAYS
                ,C.A_GRADE_STANDARD_DAYS = isd.A_GRADE_STANDARD_DAYS	
                ,C.B_GRADE_STANDARD_DAYS = isd.B_GRADE_STANDARD_DAYS	
                ,C.C_GRADE_STANDARD_DAYS = isd.C_GRADE_STANDARD_DAYS	
                ,C.D_GRADE_STANDARD_DAYS = isd.D_GRADE_STANDARD_DAYS	
                ,C.ACTIVE_FLAG = isd.ACTIVE_FLAG	
                ,C.LOCAL_UPDATE_DTM = NOW()
                ,C.UPDATE_USER_ID = isd.UPDATE_USER_ID
                ,C.SYSTEM_UPDATE_DTM = NOW()
        WHEN NOT MATCHED THEN
            INSERT ( TENANT_ID
                    ,COMPANY_CODE
                    ,ORG_TYPE_CODE
                    ,ORG_CODE
                    ,ACTIVITY_CODE
                    ,CATEGORY_GROUP_CODE
                    ,CATEGORY_CODE
                    ,PART_PROJECT_TYPE_CODE
                    ,S_GRADE_STANDARD_DAYS	
                    ,A_GRADE_STANDARD_DAYS	
                    ,B_GRADE_STANDARD_DAYS	
                    ,C_GRADE_STANDARD_DAYS	
                    ,D_GRADE_STANDARD_DAYS	
                    ,ACTIVE_FLAG
                    ,LOCAL_CREATE_DTM
                    ,LOCAL_UPDATE_DTM
                    ,CREATE_USER_ID
                    ,UPDATE_USER_ID
                    ,SYSTEM_CREATE_DTM
                    ,SYSTEM_UPDATE_DTM
                )
            VALUES ( V_TENANT_ID
                    ,V_COMPANY_CODE
                    ,V_ORG_TYPE_CODE
                    ,isd.ORG_CODE
                    ,isd.ACTIVITY_CODE
                    ,V_CATEGORY_GROUP_CODE
                    ,V_CATEGORY_CODE
                    ,isd.PART_PROJECT_TYPE_CODE
                    ,isd.S_GRADE_STANDARD_DAYS	
                    ,isd.A_GRADE_STANDARD_DAYS	
                    ,isd.B_GRADE_STANDARD_DAYS	
                    ,isd.C_GRADE_STANDARD_DAYS	
                    ,isd.D_GRADE_STANDARD_DAYS	
                    ,isd.ACTIVE_FLAG
                    ,NOW()
                    ,NOW()
                    ,isd.UPDATE_USER_ID
                    ,isd.UPDATE_USER_ID
                    ,NOW()
                    ,NOW()
                )
        ;
        */

    END IF;
    
    COMMIT;
    O_MSG = SELECT 'OK' RETURN_CODE, 'Successfully Saved.' RETURN_MSG FROM DUMMY;
END;