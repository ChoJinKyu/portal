PROCEDURE DP_PD_PART_CATEGORY_SAVE_PROC (		
    IN  CRUD_TYPE NVARCHAR(1),
    IN  I_M TABLE ( TENANT_ID NVARCHAR(5), 
                    CATEGORY_GROUP_CODE NVARCHAR(30),
                    CATEGORY_CODE NVARCHAR(40),
                    PARENT_CATEGORY_CODE NVARCHAR(40),
                    SEQUENCE DECIMAL,
                    ACTIVE_FLAG BOOLEAN,
                    UPDATE_USER_ID NVARCHAR(255),
                    CRUD_TYPE_CODE NVARCHAR(1) ),
    IN  I_D TABLE ( TENANT_ID NVARCHAR(5), 
                    CATEGORY_GROUP_CODE NVARCHAR(30),
                    CATEGORY_CODE NVARCHAR(40),
                    LANGUAGE_CD NVARCHAR(30),
                    CODE_NAME NVARCHAR(240),
                    UPDATE_USER_ID NVARCHAR(255),
                    CRUD_TYPE_CODE NVARCHAR(1) ),
    IN  I_SD TABLE ( TENANT_ID NVARCHAR(5), 
                    CATEGORY_GROUP_CODE NVARCHAR(30),
                    CATEGORY_CODE NVARCHAR(40),
                    PART_PROJECT_TYPE_CODE NVARCHAR(30),
                    ACTIVITY_CODE NVARCHAR(40),
                    S_GRADE_STANDARD_DAYS INTEGER,
                    A_GRADE_STANDARD_DAYS INTEGER,
                    B_GRADE_STANDARD_DAYS INTEGER,
                    C_GRADE_STANDARD_DAYS INTEGER,
                    D_GRADE_STANDARD_DAYS INTEGER,
                    ACTIVE_FLAG BOOLEAN,
                    UPDATE_USER_ID NVARCHAR(255),
                    CRUD_TYPE_CODE NVARCHAR(1) ),
                    OUT O_MSG TABLE(RETURN_CODE NVARCHAR(2), RETURN_MSG NVARCHAR(5000) )
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER

AS
BEGIN
    DECLARE V_TENANT_ID NVARCHAR(5);
    DECLARE V_COMPANY_CODE NVARCHAR(10);
    DECLARE V_ORG_TYPE_CODE NVARCHAR(2);
    DECLARE V_ORG_CODE NVARCHAR(10);
    DECLARE V_ACTIVITY_CODE NVARCHAR(40);
    DECLARE V_CATEGORY_GROUP_CODE NVARCHAR(30);
    DECLARE V_PART_PROJECT_TYPE_CODE NVARCHAR(30);
    DECLARE V_CATEGORY_CODE NVARCHAR(40);
    DECLARE V_SEQUENCE DECIMAL;
    DECLARE V_ORG_SEQUENCE DECIMAL;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		O_MSG = SELECT  'NG' RETURN_CODE, ::SQL_ERROR_CODE||'-'||::SQL_ERROR_MESSAGE RETURN_MSG FROM  DUMMY;
    END;

    SELECT TENANT_ID, CATEGORY_GROUP_CODE,
           CASE WHEN CATEGORY_CODE = 'new' THEN
                     'PC' || TO_NCHAR(NOW(), 'YYMMDD') || LPAD(DP_PD_PART_CATEGORY_SEQ.NEXTVAL, 4, '0')
                ELSE CATEGORY_CODE
           END,
           SEQUENCE
    INTO   V_TENANT_ID, V_CATEGORY_GROUP_CODE, V_CATEGORY_CODE, V_SEQUENCE
    FROM   :I_M
    ;

    V_COMPANY_CODE := 'LGESL';
    V_ORG_TYPE_CODE := 'BU';
    V_ORG_CODE := 'BIZ20000';
    V_ORG_CODE := 'PRD';
    V_PART_PROJECT_TYPE_CODE := 'PRD';

    IF :CRUD_TYPE IN ('D', 'U') THEN

        SELECT SEQUENCE 
        INTO   V_ORG_SEQUENCE 
        FROM   DP_PD_PART_CATEGORY 
        WHERE  TENANT_ID = V_TENANT_ID
        AND    CATEGORY_GROUP_CODE = V_CATEGORY_GROUP_CODE
        AND    CATEGORY_CODE = V_CATEGORY_CODE
        ;

    END IF;

    /*  CRUD_TYPE가 'D' 인 Data 삭제 */
    IF :CRUD_TYPE = 'D' THEN
        DELETE FROM DP_PD_PART_CATEGORY_LNG D
        WHERE  D.TENANT_ID = V_TENANT_ID
        AND    D.CATEGORY_GROUP_CODE = V_CATEGORY_GROUP_CODE
        AND    D.CATEGORY_CODE = V_CATEGORY_CODE
        ;
 
        DELETE FROM DP_PD_PART_CATEGORY M
        WHERE  M.TENANT_ID = V_TENANT_ID
        AND    M.CATEGORY_GROUP_CODE = V_CATEGORY_GROUP_CODE
        AND    M.CATEGORY_CODE = V_CATEGORY_CODE
        ;

        UPDATE DP_PD_PART_CATEGORY
        SET    SEQUENCE = SEQUENCE - 1
        WHERE  TENANT_ID = V_TENANT_ID
        AND    SEQUENCE > V_ORG_SEQUENCE
        ; 

    ELSE

        IF :CRUD_TYPE = 'U' THEN

            IF V_ORG_SEQUENCE > V_SEQUENCE THEN

                UPDATE DP_PD_PART_CATEGORY
                SET    SEQUENCE = SEQUENCE + 1
                WHERE  TENANT_ID = V_TENANT_ID
                AND    SEQUENCE >= V_SEQUENCE
                AND    SEQUENCE < V_ORG_SEQUENCE
                ;

            ELSEIF V_ORG_SEQUENCE < V_SEQUENCE THEN

                UPDATE DP_PD_PART_CATEGORY
                SET    SEQUENCE = SEQUENCE - 1
                WHERE  TENANT_ID = V_TENANT_ID
                AND    SEQUENCE <= V_SEQUENCE
                AND    SEQUENCE > V_ORG_SEQUENCE
                ;

            END IF;
            
            UPDATE DP_PD_PART_CATEGORY M
               SET (M.PARENT_CATEGORY_CODE, M.SEQUENCE, M.ACTIVE_FLAG, M.LOCAL_UPDATE_DTM, M.UPDATE_USER_ID, M.SYSTEM_UPDATE_DTM) =
                   ( SELECT PARENT_CATEGORY_CODE, SEQUENCE, ACTIVE_FLAG, NOW(), UPDATE_USER_ID, NOW()
                       FROM :I_M
                      WHERE TENANT_ID = M.TENANT_ID 
                        AND CATEGORY_GROUP_CODE = M.CATEGORY_GROUP_CODE
                        AND CATEGORY_CODE = M.CATEGORY_CODE
                   )
            WHERE  M.TENANT_ID = V_TENANT_ID
            AND    M.CATEGORY_GROUP_CODE = V_CATEGORY_GROUP_CODE
            AND    M.CATEGORY_CODE = V_CATEGORY_CODE
            ;

        ELSE
            INSERT INTO DP_PD_PART_CATEGORY M
                      ( TENANT_ID
                        ,CATEGORY_CODE
                        ,CATEGORY_GROUP_CODE
                        ,SEQUENCE
                        ,ACTIVE_FLAG
                        ,LOCAL_CREATE_DTM
                        ,LOCAL_UPDATE_DTM
                        ,CREATE_USER_ID
                        ,UPDATE_USER_ID
                        ,SYSTEM_CREATE_DTM
                        ,SYSTEM_UPDATE_DTM
                      )
                 SELECT M.TENANT_ID
                        ,V_CATEGORY_CODE
                        ,M.CATEGORY_GROUP_CODE
                        ,(SELECT COALESCE(MAX(SEQUENCE), 0) + 1 FROM DP_PD_PART_CATEGORY WHERE TENANT_ID = M.TENANT_ID)
                        ,M.ACTIVE_FLAG
                        ,NOW()
                        ,NOW()
                        ,M.UPDATE_USER_ID
                        ,M.UPDATE_USER_ID
                        ,NOW()
                        ,NOW()
                FROM :I_M M
            ;

        END IF;

        /*  I_D Table의 Data 일괄 삭제 */
        DELETE FROM DP_PD_PART_CATEGORY_LNG D
        WHERE ( D.TENANT_ID,D.CATEGORY_GROUP_CODE,D.CATEGORY_CODE,D.LANGUAGE_CD ) IN
            ( SELECT id.TENANT_ID, id.CATEGORY_GROUP_CODE, id.CATEGORY_CODE, id.LANGUAGE_CD
                FROM :I_D id
               WHERE id.CRUD_TYPE_CODE = 'D'
            )
        ;

        /*  I_D Table의 Data 일괄 추가,수정 */
        MERGE INTO DP_PD_PART_CATEGORY_LNG D
            USING ( SELECT * FROM :I_D WHERE :I_D.CRUD_TYPE_CODE IN ('C','U')  ) id
            ON ( D.TENANT_ID = id.TENANT_ID
                AND D.CATEGORY_GROUP_CODE = id.CATEGORY_GROUP_CODE
                AND D.CATEGORY_CODE = id.CATEGORY_CODE
                AND D.LANGUAGE_CD = id.LANGUAGE_CD )

        WHEN MATCHED THEN
            UPDATE
            SET  D.CODE_NAME = id.CODE_NAME
                ,D.LOCAL_UPDATE_DTM = NOW()
                ,D.UPDATE_USER_ID = id.UPDATE_USER_ID
                ,D.SYSTEM_UPDATE_DTM = NOW()
        WHEN NOT MATCHED THEN
            INSERT ( TENANT_ID
                    ,CATEGORY_GROUP_CODE
                    ,CATEGORY_CODE
                    ,LANGUAGE_CD
                    ,CODE_NAME
                    ,LOCAL_CREATE_DTM
                    ,LOCAL_UPDATE_DTM
                    ,CREATE_USER_ID
                    ,UPDATE_USER_ID
                    ,SYSTEM_CREATE_DTM
                    ,SYSTEM_UPDATE_DTM
                )
            VALUES ( id.TENANT_ID
                    ,id.CATEGORY_GROUP_CODE
                    ,V_CATEGORY_CODE
                    ,id.LANGUAGE_CD
                    ,id.CODE_NAME
                    ,NOW()
                    ,NOW()
                    ,id.UPDATE_USER_ID
                    ,id.UPDATE_USER_ID
                    ,NOW()
                    ,NOW()
                )
        ; 

        /*  I_SD Table의 Data 일괄 추가,수정 */
        MERGE INTO DP_PD_PART_CATEGORY_ACTIVITY C
            USING ( SELECT * FROM :I_SD WHERE :I_SD.CRUD_TYPE_CODE IN ('C','U')  ) isd
            ON ( C.TENANT_ID = isd.TENANT_ID
                AND C.COMPANY_CODE = V_COMPANY_CODE
                AND C.ORG_TYPE_CODE = V_ORG_TYPE_CODE
                AND C.ORG_CODE = V_ORG_CODE
                AND C.ACTIVITY_CODE = V_ACTIVITY_CODE
                AND C.PART_PROJECT_TYPE_CODE = V_PART_PROJECT_TYPE_CODE
                AND C.CATEGORY_GROUP_CODE = isd.CATEGORY_GROUP_CODE
                AND C.CATEGORY_CODE = isd.CATEGORY_CODE )

        WHEN MATCHED THEN
            UPDATE
            SET  C.S_GRADE_STANDARD_DAYS = isd.S_GRADE_STANDARD_DAYS
                ,C.A_GRADE_STANDARD_DAYS = isd.A_GRADE_STANDARD_DAYS	
                ,C.B_GRADE_STANDARD_DAYS = isd.B_GRADE_STANDARD_DAYS	
                ,C.C_GRADE_STANDARD_DAYS = isd.C_GRADE_STANDARD_DAYS	
                ,C.D_GRADE_STANDARD_DAYS = isd.D_GRADE_STANDARD_DAYS	
                ,C.ACTIVE_FLAG = isd.ACTIVE_FLAG	
                ,C.LOCAL_UPDATE_DTM = NOW()
                ,C.UPDATE_USER_ID = isd.UPDATE_USER_ID
                ,C.SYSTEM_UPDATE_DTM = NOW()
        WHEN NOT MATCHED THEN
            INSERT ( TENANT_ID
                    ,COMPANY_CODE
                    ,ORG_TYPE_CODE
                    ,ORG_CODE
                    ,ACTIVITY_CODE
                    ,CATEGORY_GROUP_CODE
                    ,CATEGORY_CODE
                    ,PART_PROJECT_TYPE_CODE
                    ,S_GRADE_STANDARD_DAYS	
                    ,A_GRADE_STANDARD_DAYS	
                    ,B_GRADE_STANDARD_DAYS	
                    ,C_GRADE_STANDARD_DAYS	
                    ,D_GRADE_STANDARD_DAYS	
                    ,ACTIVE_FLAG
                    ,LOCAL_CREATE_DTM
                    ,LOCAL_UPDATE_DTM
                    ,CREATE_USER_ID
                    ,UPDATE_USER_ID
                    ,SYSTEM_CREATE_DTM
                    ,SYSTEM_UPDATE_DTM
                )
            VALUES ( isd.TENANT_ID
                    ,V_COMPANY_CODE
                    ,V_ORG_TYPE_CODE
                    ,V_ORG_CODE
                    ,V_ACTIVITY_CODE
                    ,isd.CATEGORY_GROUP_CODE
                    ,isd.CATEGORY_CODE
                    ,V_PART_PROJECT_TYPE_CODE
                    ,isd.S_GRADE_STANDARD_DAYS	
                    ,isd.A_GRADE_STANDARD_DAYS	
                    ,isd.B_GRADE_STANDARD_DAYS	
                    ,isd.C_GRADE_STANDARD_DAYS	
                    ,isd.D_GRADE_STANDARD_DAYS	
                    ,isd.ACTIVE_FLAG
                    ,NOW()
                    ,NOW()
                    ,isd.UPDATE_USER_ID
                    ,isd.UPDATE_USER_ID
                    ,NOW()
                    ,NOW()
                )
        ;

    END IF;
    
    COMMIT;
    O_MSG = SELECT 'OK' RETURN_CODE, 'Successfully Saved.' RETURN_MSG FROM DUMMY;
END;