PROCEDURE DP_PD_PART_ACTIVITY_SAVE_PROC (
    IN  I_TABLE DP_PD_PART_ACTIVITY_TEMPLATE_TYPE,
    OUT O_MSG PG_VP_VENDOR_POOL_PROC_OUT_TYPE
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 

AS
BEGIN

    DECLARE  var_commit  NVARCHAR(100) := 'COMMIT';
	DECLARE var_rollback NVARCHAR(100) := 'ROLLBACK';

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		EXEC (:var_rollback);
		O_MSG = SELECT  'NG' RETURN_CODE, ::SQL_ERROR_CODE||'-'||::SQL_ERROR_MESSAGE RETURN_MSG FROM  DUMMY;
	END;

/* 삭제 */
    DELETE FROM DP_PD_PART_ACTIVITY_TEMPLATE PAT
     WHERE (PAT.TENANT_ID,PAT.COMPANY_CODE,PAT.ORG_TYPE_CODE,PAT.ORG_CODE,PAT.ACTIVITY_CODE ) IN
        ( SELECT A.TENANT_ID, A.COMPANY_CODE, A.ORG_TYPE_CODE, A.ORG_CODE, A.ACTIVITY_CODE
           FROM :I_TABLE A
          WHERE A.CRUD_TYPE_CODE = 'D'
        )
    ;

/*  CRUD_TYPE_CODE가 'U' 인 Data 수정, 'C' 인 Data 생성 */
    MERGE INTO DP_PD_PART_ACTIVITY_TEMPLATE PAT
        USING ( SELECT * FROM :I_TABLE WHERE :I_TABLE.CRUD_TYPE_CODE IN ('C','U')  ) cu
        ON ( PAT.TENANT_ID = cu.TENANT_ID
             AND PAT.COMPANY_CODE = cu.COMPANY_CODE
             AND PAT.ORG_TYPE_CODE = cu.ORG_TYPE_CODE
             AND PAT.ORG_CODE = cu.ORG_CODE
             AND PAT.ACTIVITY_CODE = cu.ACTIVITY_CODE
            )

    WHEN MATCHED THEN
        UPDATE 
        SET  PAT.ACTIVITY_CODE = IFNULL(cu.UPDATE_ACTIVITY_CODE, PAT.ACTIVITY_CODE)
            ,PAT.DEVELOPE_EVENT_CODE = cu.DEVELOPE_EVENT_CODE
            ,PAT.SEQUENCE = cu.SEQUENCE
            ,PAT.ACTUAL_ROLE_CODE = cu.ACTUAL_ROLE_CODE
            ,PAT.ACTIVITY_COMPLETE_TYPE_CODE = cu.ACTIVITY_COMPLETE_TYPE_CODE
            ,PAT.JOB_TYPE_CODE = cu.JOB_TYPE_CODE
            ,PAT.ATTACHMENT_MANDATORY_FLAG = cu.ATTACHMENT_MANDATORY_FLAG
            ,PAT.APPROVE_MANDATORY_FLAG = cu.APPROVE_MANDATORY_FLAG
            ,PAT.ACTIVITY_NAME = cu.ACTIVITY_NAME
            ,PAT.ACTIVE_FLAG = cu.ACTIVE_FLAG
            ,PAT.LOCAL_UPDATE_DTM = NOW()
            ,PAT.UPDATE_USER_ID = cu.UPDATE_USER_ID
            ,PAT.SYSTEM_UPDATE_DTM = NOW()

    WHEN NOT MATCHED THEN
        INSERT ( TENANT_ID
                ,COMPANY_CODE
                ,ORG_TYPE_CODE
                ,ORG_CODE
                ,PART_PROJECT_TYPE_CODE
                ,ACTIVITY_CODE
                ,PARENT_ACTIVITY_CODE
                ,DEVELOPE_EVENT_CODE
                ,SEQUENCE
                ,ACTUAL_ROLE_CODE
                ,ACTIVITY_COMPLETE_TYPE_CODE
                ,JOB_TYPE_CODE
                ,ATTACHMENT_MANDATORY_FLAG
                ,APPROVE_MANDATORY_FLAG
                ,ACTIVITY_NAME
                ,ACTIVITY_ENGLISH_NAME
                ,ACTIVE_FLAG
                ,LOCAL_CREATE_DTM
                ,LOCAL_UPDATE_DTM
                ,CREATE_USER_ID
                ,UPDATE_USER_ID
                ,SYSTEM_CREATE_DTM
                ,SYSTEM_UPDATE_DTM
               )
        VALUES ( cu.TENANT_ID
                ,cu.COMPANY_CODE
                ,cu.ORG_TYPE_CODE
                ,cu.ORG_CODE
                ,cu.PART_PROJECT_TYPE_CODE
                ,cu.ACTIVITY_CODE
                ,cu.PARENT_ACTIVITY_CODE
                ,cu.DEVELOPE_EVENT_CODE
                ,cu.SEQUENCE
                ,cu.ACTUAL_ROLE_CODE
                ,cu.ACTIVITY_COMPLETE_TYPE_CODE
                ,cu.JOB_TYPE_CODE
                ,cu.ATTACHMENT_MANDATORY_FLAG
                ,cu.APPROVE_MANDATORY_FLAG
                ,cu.ACTIVITY_NAME
                ,cu.ACTIVITY_ENGLISH_NAME
                ,cu.ACTIVE_FLAG
                ,NOW()
                ,NOW()
                ,cu.UPDATE_USER_ID
                ,cu.UPDATE_USER_ID
                ,NOW()
                ,NOW()
               )
    ;

    EXEC (:var_commit);
    O_MSG = SELECT 'OK' RETURN_CODE, 'Successfully Saved.' RETURN_MSG FROM DUMMY;
END;