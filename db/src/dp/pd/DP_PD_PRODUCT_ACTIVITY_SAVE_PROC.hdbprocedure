PROCEDURE DP_PD_PRODUCT_ACTIVITY_SAVE_PROC (
    IN  I_TABLE DP_PD_PRODUCT_ACTIVITY_TEMPLATE_TYPE,
    OUT O_MSG PG_VP_VENDOR_POOL_PROC_OUT_TYPE
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 

AS
BEGIN

    DECLARE  var_commit  NVARCHAR(100) := 'COMMIT';
	DECLARE var_rollback NVARCHAR(100) := 'ROLLBACK';

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		EXEC (:var_rollback);
		O_MSG = SELECT  'NG' RETURN_CODE, ::SQL_ERROR_CODE||'-'||::SQL_ERROR_MESSAGE RETURN_MSG FROM  DUMMY;
	END;

/* 임시 Table에 전체 Data 추가 */
        INSERT INTO DP_PD_PRODUCT_ACTIVITY_TEMPLATE_TEMP
               ( TENANT_ID
                ,COMPANY_CODE
                ,ORG_TYPE_CODE
                ,ORG_CODE
                ,PRODUCT_ACTIVITY_CODE
                ,DEVELOPE_EVENT_CODE
                ,SEQUENCE
                ,PRODUCT_ACTIVITY_NAME
                ,PRODUCT_ACTIVITY_ENGLISH_NAME
                ,MILESTONE_FLAG
                ,ACTIVE_FLAG
                ,UPDATE_USER_ID
                ,SYSTEM_UPDATE_DTM
                ,CRUD_TYPE_CODE
                ,UPDATE_PRODUCT_ACTIVITy_CODE
               )
        SELECT  :I_TABLE.TENANT_ID
                ,:I_TABLE.COMPANY_CODE
                ,:I_TABLE.ORG_TYPE_CODE
                ,:I_TABLE.ORG_CODE
                ,:I_TABLE.PRODUCT_ACTIVITY_CODE
                ,:I_TABLE.DEVELOPE_EVENT_CODE
                ,:I_TABLE.SEQUENCE
                ,:I_TABLE.PRODUCT_ACTIVITY_NAME
                ,:I_TABLE.PRODUCT_ACTIVITY_ENGLISH_NAME
                ,:I_TABLE.MILESTONE_FLAG
                ,:I_TABLE.ACTIVE_FLAG
                ,:I_TABLE.UPDATE_USER_ID
                ,NOW()
                ,:I_TABLE.CRUD_TYPE_CODE
                ,:I_TABLE.UPDATE_PRODUCT_ACTIVITy_CODE
          FROM :I_TABLE
    ;

/* 삭제2 */
    DELETE FROM DP_PD_PRODUCT_ACTIVITY_TEMPLATE PAT
     WHERE (PAT.TENANT_ID,PAT.COMPANY_CODE,PAT.ORG_TYPE_CODE,PAT.ORG_CODE,PAT.PRODUCT_ACTIVITY_CODE ) IN
        ( SELECT A.TENANT_ID, A.COMPANY_CODE, A.ORG_TYPE_CODE, A.ORG_CODE, A.PRODUCT_ACTIVITY_CODE
           FROM :I_TABLE A
          WHERE A.CRUD_TYPE_CODE = 'D'
        )
    ;

/*  CRUD_TYPE_CODE가 'U' 인 Data수정, 'C' 인 Data 생성 */
    MERGE INTO DP_PD_PRODUCT_ACTIVITY_TEMPLATE PAT
        USING ( SELECT * FROM :I_TABLE WHERE :I_TABLE.CRUD_TYPE_CODE IN ('C','U')  ) cu
        ON ( PAT.TENANT_ID = cu.TENANT_ID
             AND PAT.COMPANY_CODE = cu.COMPANY_CODE
             AND PAT.ORG_TYPE_CODE = cu.ORG_TYPE_CODE
             AND PAT.ORG_CODE = cu.ORG_CODE
             AND PAT.PRODUCT_ACTIVITY_CODE = cu.PRODUCT_ACTIVITY_CODE
            )

    WHEN MATCHED THEN
        UPDATE 
        SET  PAT.PRODUCT_ACTIVITY_CODE = IFNULL(cu.UPDATE_PRODUCT_ACTIVITY_CODE, PAT.PRODUCT_ACTIVITY_CODE)
            ,PAT.DEVELOPE_EVENT_CODE = cu.DEVELOPE_EVENT_CODE
            ,PAT.SEQUENCE = cu.SEQUENCE
            ,PAT.PRODUCT_ACTIVITY_NAME = cu.PRODUCT_ACTIVITY_NAME
            ,PAT.PRODUCT_ACTIVITY_ENGLISH_NAME = cu.PRODUCT_ACTIVITY_ENGLISH_NAME
            ,PAT.MILESTONE_FLAG = cu.MILESTONE_FLAG
            ,PAT.ACTIVE_FLAG = cu.ACTIVE_FLAG
            ,PAT.LOCAL_UPDATE_DTM = NOW()
            ,PAT.UPDATE_USER_ID = cu.UPDATE_USER_ID
            ,PAT.SYSTEM_UPDATE_DTM = NOW()

    WHEN NOT MATCHED THEN
        INSERT ( TENANT_ID
                ,COMPANY_CODE
                ,ORG_TYPE_CODE
                ,ORG_CODE
                ,PRODUCT_ACTIVITY_CODE
                ,DEVELOPE_EVENT_CODE
                ,SEQUENCE
                ,PRODUCT_ACTIVITY_NAME
                ,PRODUCT_ACTIVITY_ENGLISH_NAME
                ,MILESTONE_FLAG
                ,ACTIVE_FLAG
                ,LOCAL_CREATE_DTM
                ,LOCAL_UPDATE_DTM
                ,CREATE_USER_ID
                ,UPDATE_USER_ID
                ,SYSTEM_CREATE_DTM
                ,SYSTEM_UPDATE_DTM
               )
        VALUES ( cu.TENANT_ID
                ,cu.COMPANY_CODE
                ,cu.ORG_TYPE_CODE
                ,cu.ORG_CODE
                ,cu.PRODUCT_ACTIVITY_CODE
                ,cu.DEVELOPE_EVENT_CODE
                ,cu.SEQUENCE
                ,cu.PRODUCT_ACTIVITY_NAME
                ,cu.PRODUCT_ACTIVITY_ENGLISH_NAME
                ,cu.MILESTONE_FLAG
                ,cu.ACTIVE_FLAG
                ,NOW()
                ,NOW()
                ,cu.UPDATE_USER_ID
                ,cu.UPDATE_USER_ID
                ,NOW()
                ,NOW()
               )
    ;

    EXEC (:var_commit);
    O_MSG = SELECT 'OK' RETURN_CODE, 'Successfully Saved.' RETURN_MSG FROM DUMMY;
END;