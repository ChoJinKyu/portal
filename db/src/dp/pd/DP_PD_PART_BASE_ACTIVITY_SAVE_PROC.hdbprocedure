PROCEDURE DP_PD_PART_BASE_ACTIVITY_SAVE_PROC (		
    IN  CRUD_TYPE NVARCHAR(1),
    IN  I_M TABLE ( TENANT_ID NVARCHAR(5), 
                    ACTIVITY_CODE NVARCHAR(40), 
                    SEQUENCE DECIMAL, 
                    DESCRIPTION NVARCHAR(240), 
                    ACTIVE_FLAG BOOLEAN,
                    UPDATE_USER_ID NVARCHAR(255),
                    CRUD_TYPE_CODE NVARCHAR(1) ),
    IN  I_D TABLE ( TENANT_ID NVARCHAR(5), 
                    ACTIVITY_CODE NVARCHAR(40), 
                    LANGUAGE_CD NVARCHAR(30), 
                    CODE_NAME NVARCHAR(240),
                    UPDATE_USER_ID NVARCHAR(255),
                    CRUD_TYPE_CODE NVARCHAR(1) ),
    OUT O_MSG TABLE(RETURN_CODE NVARCHAR(2), RETURN_MSG NVARCHAR(5000) )
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER

AS
BEGIN
    DECLARE V_TENANT_ID NVARCHAR(5);
    DECLARE V_ACTIVITY_CODE NVARCHAR(40);
    DECLARE V_SEQUENCE DECIMAL;
    DECLARE V_ORG_SEQUENCE DECIMAL;
    DECLARE V_CNT INTEGER;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		O_MSG = SELECT  'NG' RETURN_CODE, ::SQL_ERROR_CODE||'-'||::SQL_ERROR_MESSAGE RETURN_MSG FROM  DUMMY;
    END;
    
    SELECT TENANT_ID, ACTIVITY_CODE, SEQUENCE
    INTO   V_TENANT_ID, V_ACTIVITY_CODE, V_SEQUENCE
    FROM   :I_M
    ;   

    IF :CRUD_TYPE IN ('D', 'U') THEN

        SELECT SEQUENCE 
        INTO   V_ORG_SEQUENCE 
        FROM   DP_PD_PART_BASE_ACTIVITY 
        WHERE  TENANT_ID = V_TENANT_ID
        AND    ACTIVITY_CODE = V_ACTIVITY_CODE
        ;
   
    END IF;

    /*  CRUD_TYPE가 'D' 인 Data 삭제 */
    IF :CRUD_TYPE = 'D' THEN
    
        BEGIN

            SELECT COUNT(*)	
            INTO   V_CNT		
            FROM   DUMMY			
            WHERE  EXISTS			
                    (   SELECT A.ACTIVITY_CODE	
                        FROM   DP_PD_PART_BASE_ACTIVITY A, DP_PD_PART_ACTIVITY_TEMPLATE B
                        WHERE  A.TENANT_ID = V_TENANT_ID	
                        AND    A.ACTIVITY_CODE = V_ACTIVITY_CODE	
                        AND    B.TENANT_ID = A.TENANT_ID	
                        AND    B.ACTIVITY_CODE = A.ACTIVITY_CODE	
                    )
            ;	

            IF V_CNT > 0 THEN
                SIGNAL SQL_ERROR_CODE 10000 SET MESSAGE_TEXT = 'Not Deleted.'; 
            END IF;
            
            DELETE FROM DP_PD_PART_BASE_ACTIVITY_LNG D
            WHERE  D.TENANT_ID = V_TENANT_ID
            AND    D.ACTIVITY_CODE = V_ACTIVITY_CODE
            ;
    
            DELETE FROM DP_PD_PART_BASE_ACTIVITY M
            WHERE  M.TENANT_ID = V_TENANT_ID
            AND    M.ACTIVITY_CODE = V_ACTIVITY_CODE
            ;

            UPDATE DP_PD_PART_BASE_ACTIVITY
            SET    SEQUENCE = SEQUENCE - 1
            WHERE  TENANT_ID = V_TENANT_ID
            AND    SEQUENCE > V_ORG_SEQUENCE
            ; 
        END;

    ELSE

        IF :CRUD_TYPE = 'U' THEN

            IF V_ORG_SEQUENCE > V_SEQUENCE THEN

                UPDATE DP_PD_PART_BASE_ACTIVITY
                SET    SEQUENCE = SEQUENCE + 1
                WHERE  TENANT_ID = V_TENANT_ID
                AND    SEQUENCE >= V_SEQUENCE
                AND    SEQUENCE < V_ORG_SEQUENCE
                ;

            ELSEIF V_ORG_SEQUENCE < V_SEQUENCE THEN

                UPDATE DP_PD_PART_BASE_ACTIVITY
                SET    SEQUENCE = SEQUENCE - 1
                WHERE  TENANT_ID = V_TENANT_ID
                AND    SEQUENCE <= V_SEQUENCE
                AND    SEQUENCE > V_ORG_SEQUENCE
                ;

            END IF;
            
            UPDATE DP_PD_PART_BASE_ACTIVITY M
               SET (M.SEQUENCE, M.DESCRIPTION, M.ACTIVE_FLAG, M.LOCAL_UPDATE_DTM, M.UPDATE_USER_ID, M.SYSTEM_UPDATE_DTM) =
                   ( SELECT SEQUENCE, DESCRIPTION, ACTIVE_FLAG, NOW(), UPDATE_USER_ID, NOW()
                       FROM :I_M
                      WHERE TENANT_ID = M.TENANT_ID 
                        AND ACTIVITY_CODE = M.ACTIVITY_CODE
                   )
            WHERE  M.TENANT_ID = V_TENANT_ID
            AND    M.ACTIVITY_CODE = V_ACTIVITY_CODE
            ;

        ELSE

             SELECT 'PACT' || TO_NCHAR(NOW(), 'YYYYMMDD') || LPAD(DP_PD_PART_CATEGORY_SEQ.NEXTVAL, 5, '0') 
             INTO   V_ACTIVITY_CODE
             FROM   DUMMY
             ;

             INSERT INTO DP_PD_PART_BASE_ACTIVITY M
                      ( TENANT_ID
                        ,ACTIVITY_CODE
                        ,SEQUENCE
                        ,DESCRIPTION
                        ,ACTIVE_FLAG
                        ,LOCAL_CREATE_DTM
                        ,LOCAL_UPDATE_DTM
                        ,CREATE_USER_ID
                        ,UPDATE_USER_ID
                        ,SYSTEM_CREATE_DTM
                        ,SYSTEM_UPDATE_DTM
                      )
                 SELECT M.TENANT_ID
                        ,V_ACTIVITY_CODE
                        ,(SELECT COALESCE(MAX(SEQUENCE), 0) + 1 FROM DP_PD_PART_BASE_ACTIVITY WHERE TENANT_ID = M.TENANT_ID)
                        ,M.DESCRIPTION
                        ,M.ACTIVE_FLAG
                        ,NOW()
                        ,NOW()
                        ,M.UPDATE_USER_ID
                        ,M.UPDATE_USER_ID
                        ,NOW()
                        ,NOW()
                FROM :I_M M
            ;                

        END IF;

        /*  I_D Table의 Data 일괄 삭제 */
        DELETE FROM DP_PD_PART_BASE_ACTIVITY_LNG D
        WHERE ( D.TENANT_ID,D.ACTIVITY_CODE,D.LANGUAGE_CD ) IN
            ( SELECT id.TENANT_ID, V_ACTIVITY_CODE, id.LANGUAGE_CD
                FROM :I_D id
               WHERE id.CRUD_TYPE_CODE = 'D'
            )
        ;

        /*  I_D Table의 Data 일괄 추가,수정 */
        MERGE INTO DP_PD_PART_BASE_ACTIVITY_LNG D
            USING ( SELECT * FROM :I_D WHERE :I_D.CRUD_TYPE_CODE IN ('C','U')  ) id
            ON ( D.TENANT_ID = id.TENANT_ID
                AND D.ACTIVITY_CODE = V_ACTIVITY_CODE
                AND D.LANGUAGE_CD = id.LANGUAGE_CD )

        WHEN MATCHED THEN
            UPDATE
            SET  D.CODE_NAME = id.CODE_NAME
                ,D.LOCAL_UPDATE_DTM = NOW()
                ,D.UPDATE_USER_ID = id.UPDATE_USER_ID
                ,D.SYSTEM_UPDATE_DTM = NOW()
        WHEN NOT MATCHED THEN
            INSERT ( TENANT_ID
                    ,ACTIVITY_CODE
                    ,LANGUAGE_CD
                    ,CODE_NAME
                    ,LOCAL_CREATE_DTM
                    ,LOCAL_UPDATE_DTM
                    ,CREATE_USER_ID
                    ,UPDATE_USER_ID
                    ,SYSTEM_CREATE_DTM
                    ,SYSTEM_UPDATE_DTM
                )
            VALUES ( id.TENANT_ID
                    ,V_ACTIVITY_CODE
                    ,id.LANGUAGE_CD
                    ,id.CODE_NAME
                    ,NOW()
                    ,NOW()
                    ,id.UPDATE_USER_ID
                    ,id.UPDATE_USER_ID
                    ,NOW()
                    ,NOW()
                )
        ;

    END IF;
    
    COMMIT;
    O_MSG = SELECT 'OK' RETURN_CODE, 'Successfully Saved.' RETURN_MSG FROM DUMMY;
END;